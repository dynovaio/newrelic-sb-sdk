import sgqlc.types
import sgqlc.types.datetime

nerdgraph = sgqlc.types.Schema()


__docformat__ = "markdown"


########################################################################
# Scalars and Enumerations
########################################################################
class AgentApplicationSettingsErrorCollectorHttpStatus(sgqlc.types.Scalar):
    """A list of HTTP status codes and/or status code ranges, such as
    "404" or "500-599"
    """

    __schema__ = nerdgraph


class AgentApplicationSettingsRecordSqlEnum(sgqlc.types.Enum):
    """Obfuscation level for SQL queries reported in transaction trace
    nodes.  When turned on, the New Relic agent will attempt to remove
    values from SQL qeries.  For example:  ``` SELECT * FROM Table
    WHERE ssn='123-45-6789' ```  might become:  ``` SELECT * FROM
    Table WHERE ssn=? ```  This can behave differently for differnet
    applications and frameworks, please test for your specific case.
    Note: RAW collection is not campatible with High Security mode and
    cannot be set if your agent is running in that mode.

    Enumeration Choices:

    * `OBFUSCATED`: This is the default value. This setting strips
      string literals and numeric sequences from your queries and
      replaces them with the ? character. For example: the query
      select * from table where ssn='123-45-6789' would become select
      * from table where ssn=?.
    * `OFF`: Query collection is turned off entirely.
    * `RAW`: If you are confident that full query data collection will
      not impact your data security or your users' privacy, you can
      change the setting to Raw, which will record all query values.
      NOTE: 'Raw' is not permitted when 'High security mode' is
      enabled.
    """

    __schema__ = nerdgraph
    __choices__ = ("OBFUSCATED", "OFF", "RAW")


class AgentApplicationSettingsThresholdTypeEnum(sgqlc.types.Enum):
    """Determines whether a threshold is statically configured or
    dynamically configured.

    Enumeration Choices:

    * `APDEX_F`: Configures the threshold to be 4 times the value of
      APDEX_T
    * `VALUE`: Threshold will be statically configured via the
      corresponding "value" field.
    """

    __schema__ = nerdgraph
    __choices__ = ("APDEX_F", "VALUE")


class AgentApplicationSettingsTracer(sgqlc.types.Enum):
    """The type of tracing being done.

    Enumeration Choices:

    * `CROSS_APPLICATION_TRACER`: cross application tracing feature
      enabled
    * `DISTRIBUTED_TRACING`: distributed tracing feature enabled
    * `NONE`: both cross application & distributed tracing disabled
    """

    __schema__ = nerdgraph
    __choices__ = ("CROSS_APPLICATION_TRACER", "DISTRIBUTED_TRACING", "NONE")


class AgentApplicationSettingsUpdateErrorClass(sgqlc.types.Enum):
    """Categories of errors that could occur while attempting updates.

    Enumeration Choices:

    * `ACCESS_DENIED`: You are not authorized to update this field.
    * `INVALID_INPUT`: The given value for the field is not valid or
      out of range.
    * `NOT_FOUND`: No record could be found using the given input
      value.
    """

    __schema__ = nerdgraph
    __choices__ = ("ACCESS_DENIED", "INVALID_INPUT", "NOT_FOUND")


class AgentFeaturesFilter(sgqlc.types.Enum):
    """Agent Feature Filter

    Enumeration Choices:

    * `DOTNET`None
    * `ELIXIR`None
    * `GO`None
    * `HTML`None
    * `JAVA`None
    * `MOBILE`None
    * `NODEJS`None
    * `PHP`None
    * `PYTHON`None
    * `RUBY`None
    * `SDK`None
    """

    __schema__ = nerdgraph
    __choices__ = (
        "DOTNET",
        "ELIXIR",
        "GO",
        "HTML",
        "JAVA",
        "MOBILE",
        "NODEJS",
        "PHP",
        "PYTHON",
        "RUBY",
        "SDK",
    )


class AgentReleasesFilter(sgqlc.types.Enum):
    """Agent Release Filter

    Enumeration Choices:

    * `ANDROID`None
    * `BROWSER`None
    * `DOTNET`None
    * `ELIXIR`None
    * `GO`None
    * `INFRASTRUCTURE`None
    * `IOS`None
    * `JAVA`None
    * `NODEJS`None
    * `PHP`None
    * `PYTHON`None
    * `RUBY`None
    * `SDK`None
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ANDROID",
        "BROWSER",
        "DOTNET",
        "ELIXIR",
        "GO",
        "INFRASTRUCTURE",
        "IOS",
        "JAVA",
        "NODEJS",
        "PHP",
        "PYTHON",
        "RUBY",
        "SDK",
    )


class AiDecisionsDecisionSortMethod(sgqlc.types.Enum):
    """Sorting method for decisions.

    Enumeration Choices:

    * `ID`: Sort decisions by id
    * `LATEST_CREATED`: Sort decisions by latest_created
    * `STATE_LAST_MODIFIED`: Sort decisions by state_last_modified
    """

    __schema__ = nerdgraph
    __choices__ = ("ID", "LATEST_CREATED", "STATE_LAST_MODIFIED")


class AiDecisionsDecisionState(sgqlc.types.Enum):
    """State of decision.

    Enumeration Choices:

    * `DISABLED`: Decision state is disabled
    * `ENABLED`: Decision state is enabled
    """

    __schema__ = nerdgraph
    __choices__ = ("DISABLED", "ENABLED")


class AiDecisionsDecisionType(sgqlc.types.Enum):
    """Type of decision

    Enumeration Choices:

    * `EXPLICIT`: Decision type is explicit
    * `GLOBAL`: Decision type is global
    * `IMPLICIT`: Decision type is implicit
    """

    __schema__ = nerdgraph
    __choices__ = ("EXPLICIT", "GLOBAL", "IMPLICIT")


class AiDecisionsIncidentSelect(sgqlc.types.Enum):
    """Select incident for comparison.

    Enumeration Choices:

    * `FIRST_INCIDENT`: Select first incident in comparison.
    * `SECOND_INCIDENT`: Select second incident in comparison.
    """

    __schema__ = nerdgraph
    __choices__ = ("FIRST_INCIDENT", "SECOND_INCIDENT")


class AiDecisionsIssuePriority(sgqlc.types.Enum):
    """Priority of issue.

    Enumeration Choices:

    * `CRITICAL`: Issue priority of critical
    * `HIGH`: Issue priority of high
    * `LOW`: Issue priority of low
    * `MEDIUM`: Issue priority of medium
    """

    __schema__ = nerdgraph
    __choices__ = ("CRITICAL", "HIGH", "LOW", "MEDIUM")


class AiDecisionsOpinion(sgqlc.types.Enum):
    """Types of opinions users can leave as feedback.

    Enumeration Choices:

    * `DISLIKE`: A dislike opinion
    * `LIKE`: A like opinion
    """

    __schema__ = nerdgraph
    __choices__ = ("DISLIKE", "LIKE")


class AiDecisionsResultType(sgqlc.types.Enum):
    """Status of an operation.

    Enumeration Choices:

    * `FAILURE`: Failed operation
    * `SUCCESS`: Successful operation
    """

    __schema__ = nerdgraph
    __choices__ = ("FAILURE", "SUCCESS")


class AiDecisionsRuleExpression(sgqlc.types.Scalar):
    """Expression used for comparing incidents as part of a correlation."""

    __schema__ = nerdgraph


class AiDecisionsRuleSource(sgqlc.types.Enum):
    """Possible creation sources for rules.

    Enumeration Choices:

    * `ADMIN`: Created by ADMIN
    * `GENERATED`: Created by GENERATED
    * `SYSTEM`: Created by SYSTEM
    * `USER`: Created by USER
    """

    __schema__ = nerdgraph
    __choices__ = ("ADMIN", "GENERATED", "SYSTEM", "USER")


class AiDecisionsRuleState(sgqlc.types.Enum):
    """State of rule.

    Enumeration Choices:

    * `DISABLED`: Rule state is disabled
    * `ENABLED`: Rule state is enabled
    """

    __schema__ = nerdgraph
    __choices__ = ("DISABLED", "ENABLED")


class AiDecisionsRuleType(sgqlc.types.Enum):
    """Type of rule

    Enumeration Choices:

    * `EXPLICIT`: Rule type is explicit
    * `GLOBAL`: Rule type is global
    * `IMPLICIT`: Rule type is implicit
    """

    __schema__ = nerdgraph
    __choices__ = ("EXPLICIT", "GLOBAL", "IMPLICIT")


class AiDecisionsSuggestionState(sgqlc.types.Enum):
    """State of suggestion

    Enumeration Choices:

    * `ACCEPTED`: Suggestion is accepted
    * `DECLINED`: Suggestion is declined
    * `POSTPONED`: Suggestion is postponed
    * `UNDECIDED`: Suggestion is undecided
    """

    __schema__ = nerdgraph
    __choices__ = ("ACCEPTED", "DECLINED", "POSTPONED", "UNDECIDED")


class AiDecisionsVertexClass(sgqlc.types.Enum):
    """Class of vertex.

    Enumeration Choices:

    * `APPLICATION`: Vertex class is application
    * `CLOUDSERVICE`: Vertex class is cloudservice
    * `CLUSTER`: Vertex class is cluster
    * `DATASTORE`: Vertex class is datastore
    * `HOST`: Vertex class is host
    * `TEAM`: Vertex class is team
    """

    __schema__ = nerdgraph
    __choices__ = (
        "APPLICATION",
        "CLOUDSERVICE",
        "CLUSTER",
        "DATASTORE",
        "HOST",
        "TEAM",
    )


class AiIssuesIncidentState(sgqlc.types.Enum):
    """Incident state

    Enumeration Choices:

    * `CLOSED`: Incident is closed
    * `CREATED`: Incident is created
    """

    __schema__ = nerdgraph
    __choices__ = ("CLOSED", "CREATED")


class AiIssuesIssueState(sgqlc.types.Enum):
    """Issue state

    Enumeration Choices:

    * `ACTIVATED`: Issue is activated
    * `CLOSED`: Issue is closed
    * `CREATED`: Issue is created
    * `DEACTIVATED`: Issue is deactivated
    """

    __schema__ = nerdgraph
    __choices__ = ("ACTIVATED", "CLOSED", "CREATED", "DEACTIVATED")


class AiIssuesIssueUserAction(sgqlc.types.Enum):
    """User operations with issue

    Enumeration Choices:

    * `ACK`: Acknowledge issue
    * `RESOLVE`: Resolve issue
    * `UNACK`: Unacknowledge issue
    """

    __schema__ = nerdgraph
    __choices__ = ("ACK", "RESOLVE", "UNACK")


class AiIssuesPriority(sgqlc.types.Enum):
    """Issue priority

    Enumeration Choices:

    * `CRITICAL`: Critical priority
    * `HIGH`: High priority
    * `LOW`: Low priority
    * `MEDIUM`: Medium priority
    """

    __schema__ = nerdgraph
    __choices__ = ("CRITICAL", "HIGH", "LOW", "MEDIUM")


class AiNotificationsAuthType(sgqlc.types.Enum):
    """Authentication types

    Enumeration Choices:

    * `BASIC`: Basic user and password authentication
    * `OAUTH2`: OAuth based authentication
    * `TOKEN`: Token based authentication
    """

    __schema__ = nerdgraph
    __choices__ = ("BASIC", "OAUTH2", "TOKEN")


class AiNotificationsChannelFields(sgqlc.types.Enum):
    """Channel fields to filter by

    Enumeration Choices:

    * `ACTIVE`: active field
    * `CREATED_AT`: created timestamp field
    * `DEFAULT`: default field
    * `DESTINATION_ID`: destination id field
    * `NAME`: name field
    * `PRODUCT`: product field
    * `STATUS`: status field
    * `TYPE`: type field
    * `UPDATED_AT`: updated timestamp field
    * `UPDATED_BY`: updated_by field
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ACTIVE",
        "CREATED_AT",
        "DEFAULT",
        "DESTINATION_ID",
        "NAME",
        "PRODUCT",
        "STATUS",
        "TYPE",
        "UPDATED_AT",
        "UPDATED_BY",
    )


class AiNotificationsChannelStatus(sgqlc.types.Enum):
    """Channel statuses

    Enumeration Choices:

    * `CONFIGURATION_ERROR`: Configuration Error channel status
    * `CONFIGURATION_WARNING`: Configuration Warning channel status
    * `DEFAULT`: Default channel status
    * `DRAFT`: Draft channel status
    * `ERROR`: Error channel status
    * `TESTED`: Tested channel status
    * `THROTTLED`: Throttled channel status
    * `UNKNOWN_ERROR`: Unknown Error channel status
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CONFIGURATION_ERROR",
        "CONFIGURATION_WARNING",
        "DEFAULT",
        "DRAFT",
        "ERROR",
        "TESTED",
        "THROTTLED",
        "UNKNOWN_ERROR",
    )


class AiNotificationsChannelType(sgqlc.types.Enum):
    """Channel type

    Enumeration Choices:

    * `EMAIL`: Email channel type
    * `EVENT_BRIDGE`: Event Bridge channel type
    * `JIRA_CLASSIC`: Jira Classic channel type
    * `JIRA_NEXTGEN`: Jira Nextgen channel type
    * `MOBILE_PUSH`: Mobile push channel type
    * `PAGERDUTY_ACCOUNT_INTEGRATION`: PagerDuty channel type
    * `PAGERDUTY_SERVICE_INTEGRATION`: Pager Duty channel type
    * `SERVICENOW_EVENTS`: Servicenow events channel type
    * `SERVICENOW_INCIDENTS`: Servicenow incidents channel type
    * `SLACK`: Slack channel type
    * `SLACK_COLLABORATION`: Slack Collaboration channel type
    * `WEBHOOK`: Webhook channel type
    """

    __schema__ = nerdgraph
    __choices__ = (
        "EMAIL",
        "EVENT_BRIDGE",
        "JIRA_CLASSIC",
        "JIRA_NEXTGEN",
        "MOBILE_PUSH",
        "PAGERDUTY_ACCOUNT_INTEGRATION",
        "PAGERDUTY_SERVICE_INTEGRATION",
        "SERVICENOW_EVENTS",
        "SERVICENOW_INCIDENTS",
        "SLACK",
        "SLACK_COLLABORATION",
        "WEBHOOK",
    )


class AiNotificationsDestinationFields(sgqlc.types.Enum):
    """Destination fields

    Enumeration Choices:

    * `ACTIVE`: active field
    * `CREATED_AT`: created_at field
    * `DEFAULT`: default field
    * `LAST_SENT`: last_sent field
    * `NAME`: name field
    * `STATUS`: status field
    * `TYPE`: type field
    * `UPDATED_AT`: updated_at field
    * `UPDATED_BY`: updated_by field
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ACTIVE",
        "CREATED_AT",
        "DEFAULT",
        "LAST_SENT",
        "NAME",
        "STATUS",
        "TYPE",
        "UPDATED_AT",
        "UPDATED_BY",
    )


class AiNotificationsDestinationStatus(sgqlc.types.Enum):
    """Destination statuses

    Enumeration Choices:

    * `AUTHENTICATION_ERROR`: Authentication Error destination status
    * `AUTHORIZATION_ERROR`: Authorization Error destination status
    * `AUTHORIZATION_WARNING`: Authorization Warning destination
      status
    * `CONFIGURATION_ERROR`: Configuration Error destination status
    * `DEFAULT`: Default destination status
    * `DRAFT`: Draft channel status
    * `ERROR`: Error channel status
    * `TEMPORARY_WARNING`: Temporary Warning destination status
    * `TESTED`: Tested channel status
    * `THROTTLED`: Throttled channel status
    * `THROTTLING_WARNING`: Throttling Warning destination status
    * `UNKNOWN_ERROR`: Unknown Error destination status
    """

    __schema__ = nerdgraph
    __choices__ = (
        "AUTHENTICATION_ERROR",
        "AUTHORIZATION_ERROR",
        "AUTHORIZATION_WARNING",
        "CONFIGURATION_ERROR",
        "DEFAULT",
        "DRAFT",
        "ERROR",
        "TEMPORARY_WARNING",
        "TESTED",
        "THROTTLED",
        "THROTTLING_WARNING",
        "UNKNOWN_ERROR",
    )


class AiNotificationsDestinationType(sgqlc.types.Enum):
    """Destination types

    Enumeration Choices:

    * `EMAIL`: Email destination type
    * `EVENT_BRIDGE`: EventBridge destination type
    * `JIRA`: Jira destination type
    * `MOBILE_PUSH`: Mobile push destination type
    * `PAGERDUTY_ACCOUNT_INTEGRATION`: PagerDuty destination type
    * `PAGERDUTY_SERVICE_INTEGRATION`: PagerDuty destination type}
    * `SERVICE_NOW`: ServiceNow destination type
    * `SLACK`: Slack destination type
    * `SLACK_COLLABORATION`: Slack Collaboration destination type
    * `WEBHOOK`: WebHook destination type
    """

    __schema__ = nerdgraph
    __choices__ = (
        "EMAIL",
        "EVENT_BRIDGE",
        "JIRA",
        "MOBILE_PUSH",
        "PAGERDUTY_ACCOUNT_INTEGRATION",
        "PAGERDUTY_SERVICE_INTEGRATION",
        "SERVICE_NOW",
        "SLACK",
        "SLACK_COLLABORATION",
        "WEBHOOK",
    )


class AiNotificationsErrorType(sgqlc.types.Enum):
    """Error types

    Enumeration Choices:

    * `CONNECTION_ERROR`: Unable to connect to external service to
      perform this action
    * `ENTITY_IN_USE`: This operation could not be completed because
      the entity is in use
    * `INVALID_CREDENTIALS`: The credentials provided were invalid,
      Please check them and try again
    * `INVALID_KEY`: Could not provide suggestions for this key
    * `INVALID_PARAMETER`: The parameter provided does not correspond
      to any valid entity
    * `LIMIT_REACHED`: Entities limit has been reached
    * `MISSING_CAPABILITIES`: User is missing capabilities
    * `MISSING_CONSTRAINTS`: This key requires additional constraints
    * `MISSING_PARAMETERS`: At least one parameter is required to
      complete this action
    * `OAUTH_NOT_SUPPORTED`: This destination does not support OAuth
      authentication
    * `SUGGESTIONS_UNAVAILABLE`: This destination does not provide any
      suggestions
    * `TIMEOUT_ERROR`: Request did not finish within time limit
    * `TYPE_EXAMPLE_MISMATCH`: The variable type is different from the
      example type
    * `UNAUTHORIZED_ACCOUNT`: This account is not allowed to perform
      this action
    * `UNEXPECTED_PARAMETER`: Received one or more unexpected
      parameters
    * `UNKNOWN_ERROR`: An unknown error has occurred
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CONNECTION_ERROR",
        "ENTITY_IN_USE",
        "INVALID_CREDENTIALS",
        "INVALID_KEY",
        "INVALID_PARAMETER",
        "LIMIT_REACHED",
        "MISSING_CAPABILITIES",
        "MISSING_CONSTRAINTS",
        "MISSING_PARAMETERS",
        "OAUTH_NOT_SUPPORTED",
        "SUGGESTIONS_UNAVAILABLE",
        "TIMEOUT_ERROR",
        "TYPE_EXAMPLE_MISMATCH",
        "UNAUTHORIZED_ACCOUNT",
        "UNEXPECTED_PARAMETER",
        "UNKNOWN_ERROR",
    )


class AiNotificationsProduct(sgqlc.types.Enum):
    """Product types

    Enumeration Choices:

    * `ALERTS`: Alerts product type
    * `DISCUSSIONS`: Discussions and comments product type
    * `ERROR_TRACKING`: Error Tracking product type
    * `IINT`: Incident Intelligence product type
    * `NTFC`: Notifications internal product type
    * `PD`: Proactive Detection product type
    * `SHARING`: Sharing product type
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ALERTS",
        "DISCUSSIONS",
        "ERROR_TRACKING",
        "IINT",
        "NTFC",
        "PD",
        "SHARING",
    )


class AiNotificationsResult(sgqlc.types.Enum):
    """Result status

    Enumeration Choices:

    * `FAIL`: Failure
    * `SUCCESS`: Success
    """

    __schema__ = nerdgraph
    __choices__ = ("FAIL", "SUCCESS")


class AiNotificationsSortOrder(sgqlc.types.Enum):
    """Sort order

    Enumeration Choices:

    * `ASC`: Ascending sort order
    * `DESC`: Descending sort order
    """

    __schema__ = nerdgraph
    __choices__ = ("ASC", "DESC")


class AiNotificationsSuggestionFilterType(sgqlc.types.Enum):
    """Filters for the suggestions object

    Enumeration Choices:

    * `CONTAINS`: Contains specific string
    * `STARTSWITH`: Starts with a specific string
    """

    __schema__ = nerdgraph
    __choices__ = ("CONTAINS", "STARTSWITH")


class AiNotificationsUiComponentType(sgqlc.types.Enum):
    """UI component type

    Enumeration Choices:

    * `BUTTON`: Button component
    * `DICTIONARY_WITH_MASK`: Dictionary type component
    * `PAYLOAD`: Handlebars powered payload editor
    * `SELECT`: Select component
    * `TEXT_AREA`: Multiline text box
    * `TEXT_FIELD`: Single line text field
    * `TOGGLE`: Toggle component
    """

    __schema__ = nerdgraph
    __choices__ = (
        "BUTTON",
        "DICTIONARY_WITH_MASK",
        "PAYLOAD",
        "SELECT",
        "TEXT_AREA",
        "TEXT_FIELD",
        "TOGGLE",
    )


class AiNotificationsUiComponentValidation(sgqlc.types.Enum):
    """Type of Validation required for this component

    Enumeration Choices:

    * `DATE`: Data should be a valid DATE ISO-8601 format
    * `DATETIME`: Data should be a valid DATETIME ISO-8601 format
    * `EMAIL`: Data should be a valid email
    * `JSON`: Data should be a valid JSON
    * `NONE`: No validation
    * `NUMBER`: Data should be a valid number
    * `URL`: Data should be a valid URL
    """

    __schema__ = nerdgraph
    __choices__ = ("DATE", "DATETIME", "EMAIL", "JSON", "NONE", "NUMBER", "URL")


class AiNotificationsVariableFields(sgqlc.types.Enum):
    """Variable fields to filter by

    Enumeration Choices:

    * `ACTIVE`: active field
    * `DEFAULT`: default field
    * `DESCRIPTION`: description field
    * `EXAMPLE`: example field
    * `KEY`: key field
    * `LABEL`: label field
    * `NAME`: name field
    * `PRODUCT`: product field
    * `TYPE`: type field
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ACTIVE",
        "DEFAULT",
        "DESCRIPTION",
        "EXAMPLE",
        "KEY",
        "LABEL",
        "NAME",
        "PRODUCT",
        "TYPE",
    )


class AiNotificationsVariableType(sgqlc.types.Enum):
    """Variable types

    Enumeration Choices:

    * `BOOLEAN`: Boolean variable type
    * `LIST`: List variable type
    * `NUMBER`: number variable type
    * `OBJECT`: Object variable type
    * `STRING`: String variable type
    """

    __schema__ = nerdgraph
    __choices__ = ("BOOLEAN", "LIST", "NUMBER", "OBJECT", "STRING")


class AiTopologyCollectorResultType(sgqlc.types.Enum):
    """Status of an operation.

    Enumeration Choices:

    * `FAILURE`: Failed operation
    * `SUCCESS`: Successful operation
    """

    __schema__ = nerdgraph
    __choices__ = ("FAILURE", "SUCCESS")


class AiTopologyCollectorVertexClass(sgqlc.types.Enum):
    """Class of vertex.

    Enumeration Choices:

    * `APPLICATION`: Vertex class is application
    * `CLOUDSERVICE`: Vertex class is cloudservice
    * `CLUSTER`: Vertex class is cluster
    * `DATASTORE`: Vertex class is datastore
    * `HOST`: Vertex class is host
    * `TEAM`: Vertex class is team
    """

    __schema__ = nerdgraph
    __choices__ = (
        "APPLICATION",
        "CLOUDSERVICE",
        "CLUSTER",
        "DATASTORE",
        "HOST",
        "TEAM",
    )


class AiTopologyVertexClass(sgqlc.types.Enum):
    """Class of vertex.

    Enumeration Choices:

    * `APPLICATION`: Vertex class is application
    * `CLOUDSERVICE`: Vertex class is cloudservice
    * `CLUSTER`: Vertex class is cluster
    * `DATASTORE`: Vertex class is datastore
    * `HOST`: Vertex class is host
    * `TEAM`: Vertex class is team
    """

    __schema__ = nerdgraph
    __choices__ = (
        "APPLICATION",
        "CLOUDSERVICE",
        "CLUSTER",
        "DATASTORE",
        "HOST",
        "TEAM",
    )


class AiWorkflowsCreateErrorType(sgqlc.types.Enum):
    """Type of create error

    Enumeration Choices:

    * `CHANNEL_NOT_FOUND`: We couldn't find a channel with the given
      id
    * `DUPLICATE`: A workflow with this name already exists
    * `INVALID_PARAMETER`: One or more of the parameters you provided
      are incorrect
    * `LIMIT_REACHED`: Reached the maximum number of workflows per
      account
    * `MISSING_ENTITLEMENT`: This account is missing the required
      entitlement(s) to perform this action
    * `UNAUTHORIZED_ACCOUNT`: This account in not authorized to
      perform this action
    * `UNSUPPORTED_CHANNEL_TYPE`: The given channel id represents an
      unsupported channel type
    * `VALIDATION_ERROR`: The parameter provided does not have a valid
      form
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CHANNEL_NOT_FOUND",
        "DUPLICATE",
        "INVALID_PARAMETER",
        "LIMIT_REACHED",
        "MISSING_ENTITLEMENT",
        "UNAUTHORIZED_ACCOUNT",
        "UNSUPPORTED_CHANNEL_TYPE",
        "VALIDATION_ERROR",
    )


class AiWorkflowsDeleteErrorType(sgqlc.types.Enum):
    """Type of delete error

    Enumeration Choices:

    * `INVALID_PARAMETER`: One or more of the parameters you provided
      are incorrect
    * `UNAUTHORIZED_ACCOUNT`: This account in not authorized to
      perform this action
    * `VALIDATION_ERROR`: The parameter provided does not have a valid
      form
    """

    __schema__ = nerdgraph
    __choices__ = ("INVALID_PARAMETER", "UNAUTHORIZED_ACCOUNT", "VALIDATION_ERROR")


class AiWorkflowsDestinationType(sgqlc.types.Enum):
    """Type of Destination Configuration

    Enumeration Choices:

    * `EMAIL`: Email Destination Configuration type
    * `EVENT_BRIDGE`: Event Bridge Destination Configuration type
    * `JIRA`: Jira Destination Configuration type
    * `MOBILE_PUSH`: New Relic Mobile Push Destination Configuration
      type
    * `PAGERDUTY`: Pager Duty Destination Configuration type
    * `PAGERDUTY_ACCOUNT_INTEGRATION`: Pager Duty with account
      integration Destination Configuration type
    * `PAGERDUTY_SERVICE_INTEGRATION`: Pager Duty with service
      integration Destination Configuration type
    * `SERVICE_NOW`: Service Now Destination Configuration type
    * `SLACK`: Slack Destination Configuration type
    * `WEBHOOK`: Webhook Destination Configuration type
    """

    __schema__ = nerdgraph
    __choices__ = (
        "EMAIL",
        "EVENT_BRIDGE",
        "JIRA",
        "MOBILE_PUSH",
        "PAGERDUTY",
        "PAGERDUTY_ACCOUNT_INTEGRATION",
        "PAGERDUTY_SERVICE_INTEGRATION",
        "SERVICE_NOW",
        "SLACK",
        "WEBHOOK",
    )


class AiWorkflowsEnrichmentType(sgqlc.types.Enum):
    """Type of Enrichment

    Enumeration Choices:

    * `NRQL`: NRQL Enrichment type
    """

    __schema__ = nerdgraph
    __choices__ = ("NRQL",)


class AiWorkflowsFilterType(sgqlc.types.Enum):
    """Type of Filter

    Enumeration Choices:

    * `FILTER`: Standard Filter type
    * `VIEW`: View Filter type
    """

    __schema__ = nerdgraph
    __choices__ = ("FILTER", "VIEW")


class AiWorkflowsMutingRulesHandling(sgqlc.types.Enum):
    """The wanted behavior for muted issues in the workflow

    Enumeration Choices:

    * `DONT_NOTIFY_FULLY_MUTED_ISSUES`: Notify only about partially
      muted and unmuted issues
    * `DONT_NOTIFY_FULLY_OR_PARTIALLY_MUTED_ISSUES`: Notify only about
      unmuted issues
    * `NOTIFY_ALL_ISSUES`: Notify about all issues
    """

    __schema__ = nerdgraph
    __choices__ = (
        "DONT_NOTIFY_FULLY_MUTED_ISSUES",
        "DONT_NOTIFY_FULLY_OR_PARTIALLY_MUTED_ISSUES",
        "NOTIFY_ALL_ISSUES",
    )


class AiWorkflowsOperator(sgqlc.types.Enum):
    """Type of Filter

    Enumeration Choices:

    * `CONTAINS`: String or list attribute contains this value
    * `DOES_NOT_CONTAIN`: String or list attribute does not contain
      this value
    * `DOES_NOT_EQUAL`: String or Numeric attribute does not equal
      this value
    * `DOES_NOT_EXACTLY_MATCH`: Element in list attribute does not
      exactly match this value
    * `ENDS_WITH`: String attribute ends with this value
    * `EQUAL`: String or Numeric attribute equals this value
    * `EXACTLY_MATCHES`: Element in list attribute exactly matches
      this value
    * `GREATER_OR_EQUAL`: Numeric attribute is greater or equal to
      this value
    * `GREATER_THAN`: Numeric attribute is greater than this value
    * `IS`: Boolean attribute equals value
    * `IS_NOT`: Boolean attribute does not equal value
    * `LESS_OR_EQUAL`: Numeric attribute is less or equal to this
      value
    * `LESS_THAN`: Numeric attribute is less than this value
    * `STARTS_WITH`: String attribute starts with this value
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CONTAINS",
        "DOES_NOT_CONTAIN",
        "DOES_NOT_EQUAL",
        "DOES_NOT_EXACTLY_MATCH",
        "ENDS_WITH",
        "EQUAL",
        "EXACTLY_MATCHES",
        "GREATER_OR_EQUAL",
        "GREATER_THAN",
        "IS",
        "IS_NOT",
        "LESS_OR_EQUAL",
        "LESS_THAN",
        "STARTS_WITH",
    )


class AiWorkflowsTestErrorType(sgqlc.types.Enum):
    """Type of test error

    Enumeration Choices:

    * `CHANNEL_NOT_FOUND`: We couldn't find a channel with the given
      id
    * `FAILED_RUNNING_TEST`: Failed running test workflow
    * `MISSING_ENTITLEMENT`: This account is missing the required
      entitlement(s) to perform this action
    * `UNAUTHORIZED_ACCOUNT`: This account is not allowed to preform
      this action
    * `UNSUPPORTED_CHANNEL_TYPE`: The given channel id represents an
      unsupported channel type
    * `VALIDATION_ERROR`: The parameter provided does not have a valid
      form
    * `WARNING_FAILED_SENDING_NOTIFICATION`: Failed to send a
      notification to the channel
    * `WARNING_NO_FILTERED_ISSUE_FOUND`: There are no issues that
      match this filter
    * `WARNING_NO_MATCHING_DYNAMIC_VARIABLES_FOUND`: There are no
      issues that match these dynamic variables
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CHANNEL_NOT_FOUND",
        "FAILED_RUNNING_TEST",
        "MISSING_ENTITLEMENT",
        "UNAUTHORIZED_ACCOUNT",
        "UNSUPPORTED_CHANNEL_TYPE",
        "VALIDATION_ERROR",
        "WARNING_FAILED_SENDING_NOTIFICATION",
        "WARNING_NO_FILTERED_ISSUE_FOUND",
        "WARNING_NO_MATCHING_DYNAMIC_VARIABLES_FOUND",
    )


class AiWorkflowsTestNotificationResponseStatus(sgqlc.types.Enum):
    """Status of the test notification

    Enumeration Choices:

    * `FAILURE`: The test notification failed
    * `SUCCESS`: The test notification succeeded
    """

    __schema__ = nerdgraph
    __choices__ = ("FAILURE", "SUCCESS")


class AiWorkflowsTestResponseStatus(sgqlc.types.Enum):
    """Status of the test

    Enumeration Choices:

    * `FAILURE`: The test failed
    * `SUCCESS`: The test succeeded
    """

    __schema__ = nerdgraph
    __choices__ = ("FAILURE", "SUCCESS")


class AiWorkflowsUpdateErrorType(sgqlc.types.Enum):
    """Type of update error

    Enumeration Choices:

    * `CHANNEL_NOT_FOUND`: We couldn't find a channel with the given
      id
    * `DUPLICATE`: A workflow with this name already exists
    * `INVALID_PARAMETER`: One or more of the parameters you provided
      are incorrect
    * `MISSING_ENTITLEMENT`: This account is missing the required
      entitlement(s) to perform this action
    * `UNAUTHORIZED_ACCOUNT`: This account in not authorized to
      perform this action
    * `UNSUPPORTED_CHANNEL_TYPE`: The given channel id represents an
      unsupported channel type
    * `VALIDATION_ERROR`: The parameter provided does not have a valid
      form
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CHANNEL_NOT_FOUND",
        "DUPLICATE",
        "INVALID_PARAMETER",
        "MISSING_ENTITLEMENT",
        "UNAUTHORIZED_ACCOUNT",
        "UNSUPPORTED_CHANNEL_TYPE",
        "VALIDATION_ERROR",
    )


class AlertsDayOfWeek(sgqlc.types.Enum):
    """The day of the week used to configure a WEEKLY scheduled
    MutingRule

    Enumeration Choices:

    * `FRIDAY`: Friday
    * `MONDAY`: Monday
    * `SATURDAY`: Saturday
    * `SUNDAY`: Sunday
    * `THURSDAY`: Thursday
    * `TUESDAY`: Tuesday
    * `WEDNESDAY`: Wednesday
    """

    __schema__ = nerdgraph
    __choices__ = (
        "FRIDAY",
        "MONDAY",
        "SATURDAY",
        "SUNDAY",
        "THURSDAY",
        "TUESDAY",
        "WEDNESDAY",
    )


class AlertsFillOption(sgqlc.types.Enum):
    """The available fill options.

    Enumeration Choices:

    * `LAST_VALUE`: Fill using the last known value.
    * `NONE`: Do not fill data.
    * `STATIC`: Fill using a static value.
    """

    __schema__ = nerdgraph
    __choices__ = ("LAST_VALUE", "NONE", "STATIC")


class AlertsIncidentPreference(sgqlc.types.Enum):
    """Determines how incidents are created for critical violations of
    the conditions contained in the policy.

    Enumeration Choices:

    * `PER_CONDITION`: A condition will create a condition-level
      incident when it violates its critical threshold. Other
      violating conditions will create their own incidents.
    * `PER_CONDITION_AND_TARGET`: Each target of each condition will
      create an entity-level incident upon critical violation. Other
      violating targets will create their own incidents (even on the
      same condition).
    * `PER_POLICY`: A condition will create a policy-level incident
      when it violates its critical threshold. Other violating
      conditions will be grouped into this incident.
    """

    __schema__ = nerdgraph
    __choices__ = ("PER_CONDITION", "PER_CONDITION_AND_TARGET", "PER_POLICY")


class AlertsMutingRuleConditionGroupOperator(sgqlc.types.Enum):
    """An operator used to combine MutingRuleConditions within a
    MutingRuleConditionGroup.

    Enumeration Choices:

    * `AND`: Match conditions by AND
    * `OR`: Match conditions by OR
    """

    __schema__ = nerdgraph
    __choices__ = ("AND", "OR")


class AlertsMutingRuleConditionOperator(sgqlc.types.Enum):
    """The list of operators to be used in a MutingRuleCondition. Each
    operator is limited to one value in the `values` list unless
    otherwise specified.

    Enumeration Choices:

    * `ANY`: Where attribute is any.
    * `CONTAINS`: Where attribute contains value.
    * `ENDS_WITH`: Where attribute ends with value.
    * `EQUALS`: Where attribute equals value.
    * `IN`: Where attribute in values. (Limit 500)
    * `IS_BLANK`: Where attribute is blank.
    * `IS_NOT_BLANK`: Where attribute is not blank.
    * `NOT_CONTAINS`: Where attribute does not contain value.
    * `NOT_ENDS_WITH`: Where attribute does not end with value.
    * `NOT_EQUALS`: Where attribute does not equal value.
    * `NOT_IN`: Where attribute not in values. (Limit 500)
    * `NOT_STARTS_WITH`: Where attribute does not start with value.
    * `STARTS_WITH`: Where attribute starts with value.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ANY",
        "CONTAINS",
        "ENDS_WITH",
        "EQUALS",
        "IN",
        "IS_BLANK",
        "IS_NOT_BLANK",
        "NOT_CONTAINS",
        "NOT_ENDS_WITH",
        "NOT_EQUALS",
        "NOT_IN",
        "NOT_STARTS_WITH",
        "STARTS_WITH",
    )


class AlertsMutingRuleScheduleRepeat(sgqlc.types.Enum):
    """Details about if or how frequently a MutingRule's schedule
    repeats.

    Enumeration Choices:

    * `DAILY`: Schedule repeats once per calendar day
    * `MONTHLY`: Schedule repeats once per calendar month
    * `WEEKLY`: Schedule repeats once per specified day per calendar
      week
    """

    __schema__ = nerdgraph
    __choices__ = ("DAILY", "MONTHLY", "WEEKLY")


class AlertsMutingRuleStatus(sgqlc.types.Enum):
    """The status of a MutingRule based on whether it is Enabled and has
    a Schedule

    Enumeration Choices:

    * `ACTIVE`: Muting is enabled and active.
    * `ENDED`: Muting is enabled, but no longer active (there's no
      future schedule).
    * `INACTIVE`: Muting is disabled.
    * `SCHEDULED`: Muting is enabled but not active yet (there's a
      future schedule).
    """

    __schema__ = nerdgraph
    __choices__ = ("ACTIVE", "ENDED", "INACTIVE", "SCHEDULED")


class AlertsNotificationChannelCreateErrorType(sgqlc.types.Enum):
    """The error type for creating a notification channel.

    Enumeration Choices:

    * `BAD_USER_INPUT`: Bad user input error.
    * `FORBIDDEN_ERROR`: Forbidden error.
    * `SERVER_ERROR`: Server error.
    * `TOO_MANY_REQUESTS_ERROR`: Too many requests error.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "BAD_USER_INPUT",
        "FORBIDDEN_ERROR",
        "SERVER_ERROR",
        "TOO_MANY_REQUESTS_ERROR",
    )


class AlertsNotificationChannelDeleteErrorType(sgqlc.types.Enum):
    """The error type for deleting a notification channel.

    Enumeration Choices:

    * `BAD_USER_INPUT`: Bad user input error.
    * `FORBIDDEN_ERROR`: Forbidden error.
    * `NOT_FOUND_ERROR`: Not found error.
    * `SERVER_ERROR`: Server error.
    * `TOO_MANY_REQUESTS_ERROR`: Too many requests error.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "BAD_USER_INPUT",
        "FORBIDDEN_ERROR",
        "NOT_FOUND_ERROR",
        "SERVER_ERROR",
        "TOO_MANY_REQUESTS_ERROR",
    )


class AlertsNotificationChannelType(sgqlc.types.Enum):
    """The type of the notification channel which determines its
    configuration field.

    Enumeration Choices:

    * `CAMPFIRE`: Campfire notification channel.
    * `EMAIL`: Email notification channel.
    * `HIP_CHAT`: HipChat notification channel.
    * `OPSGENIE`: OpsGenie notification channel.
    * `PAGERDUTY`: PagerDuty notification channel.
    * `SLACK`: Slack notification channel.
    * `USER`: User notification channel.
    * `VICTOROPS`: VictorOps notification channel.
    * `WEBHOOK`: Webhook notification channel.
    * `XMATTERS`: xMatters notification channel.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CAMPFIRE",
        "EMAIL",
        "HIP_CHAT",
        "OPSGENIE",
        "PAGERDUTY",
        "SLACK",
        "USER",
        "VICTOROPS",
        "WEBHOOK",
        "XMATTERS",
    )


class AlertsNotificationChannelUpdateErrorType(sgqlc.types.Enum):
    """The error type for updating a notification channel.

    Enumeration Choices:

    * `BAD_USER_INPUT`: Bad user input error.
    * `FORBIDDEN_ERROR`: Forbidden error.
    * `NOT_FOUND_ERROR`: Not found error.
    * `SERVER_ERROR`: Server error.
    * `TOO_MANY_REQUESTS_ERROR`: Too many requests error.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "BAD_USER_INPUT",
        "FORBIDDEN_ERROR",
        "NOT_FOUND_ERROR",
        "SERVER_ERROR",
        "TOO_MANY_REQUESTS_ERROR",
    )


class AlertsNotificationChannelsAddToPolicyErrorType(sgqlc.types.Enum):
    """The error type for associating notification channels with a
    policy.

    Enumeration Choices:

    * `BAD_USER_INPUT`: Bad user input error.
    * `FORBIDDEN_ERROR`: Forbidden error.
    * `NOT_FOUND_ERROR`: Not found error.
    * `SERVER_ERROR`: Server error.
    * `TOO_MANY_REQUESTS_ERROR`: Too many requests error.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "BAD_USER_INPUT",
        "FORBIDDEN_ERROR",
        "NOT_FOUND_ERROR",
        "SERVER_ERROR",
        "TOO_MANY_REQUESTS_ERROR",
    )


class AlertsNotificationChannelsRemoveFromPolicyErrorType(sgqlc.types.Enum):
    """The error type for dissociating notification channels from a
    policy.

    Enumeration Choices:

    * `BAD_USER_INPUT`: Bad user input error.
    * `FORBIDDEN_ERROR`: Forbidden error.
    * `NOT_FOUND_ERROR`: Not found error.
    * `SERVER_ERROR`: Server error.
    * `TOO_MANY_REQUESTS_ERROR`: Too many requests error.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "BAD_USER_INPUT",
        "FORBIDDEN_ERROR",
        "NOT_FOUND_ERROR",
        "SERVER_ERROR",
        "TOO_MANY_REQUESTS_ERROR",
    )


class AlertsNrqlBaselineDirection(sgqlc.types.Enum):
    """Direction for a baseline NRQL condition.

    Enumeration Choices:

    * `LOWER_ONLY`: Only lower direction.
    * `UPPER_AND_LOWER`: Both upper and lower direction.
    * `UPPER_ONLY`: Only upper direction.
    """

    __schema__ = nerdgraph
    __choices__ = ("LOWER_ONLY", "UPPER_AND_LOWER", "UPPER_ONLY")


class AlertsNrqlConditionPriority(sgqlc.types.Enum):
    """Value determining whether to open a critical or warning violation
    for a NrqlCondition.

    Enumeration Choices:

    * `CRITICAL`: When a critical priority violation occurs,
      notifications will be sent. The number of incidents opened and
      notifications sent depends on the incident preference defined in
      the condition's policy.
    * `WARNING`: Does not generate notifications. Use a warning
      priority when you want to monitor when a system behavior is
      concerning or noteworthy, but not important enough to require a
      notification.
    """

    __schema__ = nerdgraph
    __choices__ = ("CRITICAL", "WARNING")


class AlertsNrqlConditionTermsOperator(sgqlc.types.Enum):
    """Operator used to compare against the threshold for NrqlConditions.

    Enumeration Choices:

    * `ABOVE`: For comparing values above a threshold.
    * `ABOVE_OR_EQUALS`: For comparing values above or equal to a
      threshold.
    * `BELOW`: For comparing values below a threshold.
    * `BELOW_OR_EQUALS`: For comparing values below or equal to a
      threshold.
    * `EQUALS`: For comparing values equal to a threshold.
    * `NOT_EQUALS`: For comparing values that do not equal a
      threshold.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ABOVE",
        "ABOVE_OR_EQUALS",
        "BELOW",
        "BELOW_OR_EQUALS",
        "EQUALS",
        "NOT_EQUALS",
    )


class AlertsNrqlConditionThresholdOccurrences(sgqlc.types.Enum):
    """How many data points must be in violation for a NrqlCondition
    term's threshold duration.

    Enumeration Choices:

    * `ALL`: All points must be in violation during a term's threshold
      duration.
    * `AT_LEAST_ONCE`: At least one data point must be in violation
      during a term's threshold duration.
    """

    __schema__ = nerdgraph
    __choices__ = ("ALL", "AT_LEAST_ONCE")


class AlertsNrqlConditionType(sgqlc.types.Enum):
    """Types of NrqlConditions.

    Enumeration Choices:

    * `BASELINE`: Baseline NrqlCondition.
    * `OUTLIER`: Outlier NrqlCondition.
    * `STATIC`: Static NrqlCondition.
    """

    __schema__ = nerdgraph
    __choices__ = ("BASELINE", "OUTLIER", "STATIC")


class AlertsNrqlDynamicConditionTermsOperator(sgqlc.types.Enum):
    """Operator used to compare against the threshold for
    `NrqlConditions`. Only `ABOVE` is allowed for baseline and outlier
    NRQL conditions.

    Enumeration Choices:

    * `ABOVE`: For comparing values above a threshold.
    """

    __schema__ = nerdgraph
    __choices__ = ("ABOVE",)


class AlertsNrqlStaticConditionValueFunction(sgqlc.types.Enum):
    """Deprecated.  By default, condition is evaluated based on each
    query's returned value.  To aggregate data in time "windows", use
    `signal.slideBy`.  Function used to aggregate the NRQL query
    value(s) for comparison to the `terms.threshold`. When the result
    of this aggregate surpasses the `terms.threshold`, a violation
    will be opened.

    Enumeration Choices:

    * `SINGLE_VALUE`: Condition is evaluated based on each query's
      returned value.
    * `SUM`: Condition is evaluated based on the sum of each query's
      returned values over the specified thresholdDuration.
    """

    __schema__ = nerdgraph
    __choices__ = ("SINGLE_VALUE", "SUM")


class AlertsOpsGenieDataCenterRegion(sgqlc.types.Enum):
    """OpsGenie data center region

    Enumeration Choices:

    * `EU`: EU data center region
    * `US`: US data center region
    """

    __schema__ = nerdgraph
    __choices__ = ("EU", "US")


class AlertsSignalAggregationMethod(sgqlc.types.Enum):
    """The method that determines when we consider an aggregation window
    to be complete so that we can evaluate the signal for violations.
    Default is `CADENCE`.

    Enumeration Choices:

    * `CADENCE`: `CADENCE` streams data points as the clocks at New
      Relic advance past the end of their window. This ensures a
      rigorous evaluation cadence, but does not take into account
      extraneous data latency.  Use in conjunction with the
      `aggregationDelay` field.
    * `EVENT_FLOW`: `EVENT_FLOW` streams data points for evaluation as
      data for newer time windows arrive. Whenever data is received,
      any data points older than the specified delay will be
      evaluated.  Use in conjunction with the `aggregationDelay`
      field.
    * `EVENT_TIMER`: `EVENT_TIMER` streams data points after the
      specified timer elapses since data last arrived for that window.
      Special measures are taken to make sure data points flow in
      order.  Use in conjunction with the `aggregationTimer` field.
    """

    __schema__ = nerdgraph
    __choices__ = ("CADENCE", "EVENT_FLOW", "EVENT_TIMER")


class AlertsViolationTimeLimit(sgqlc.types.Enum):
    """Duration after which a violation will automatically close.

    Enumeration Choices:

    * `EIGHT_HOURS`: Violation will close after eight hours.
    * `FOUR_HOURS`: Violation will close after four hours.
    * `NON_MATCHABLE_LIMIT_VALUE`: Time limit specified does not match
      available options.
    * `ONE_HOUR`: Violation will close after one hour.
    * `THIRTY_DAYS`: Violation will close after thirty days.
    * `TWELVE_HOURS`: Violation will close after twelve hours.
    * `TWENTY_FOUR_HOURS`: Violation will close after twenty four
      hours.
    * `TWO_HOURS`: Violation will close after two hours.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "EIGHT_HOURS",
        "FOUR_HOURS",
        "NON_MATCHABLE_LIMIT_VALUE",
        "ONE_HOUR",
        "THIRTY_DAYS",
        "TWELVE_HOURS",
        "TWENTY_FOUR_HOURS",
        "TWO_HOURS",
    )


class AlertsWebhookCustomPayloadType(sgqlc.types.Enum):
    """Webhook custom payload type

    Enumeration Choices:

    * `FORM`: FORM payload type
    * `JSON`: JSON payload type
    """

    __schema__ = nerdgraph
    __choices__ = ("FORM", "JSON")


class ApiAccessIngestKeyErrorType(sgqlc.types.Enum):
    """The type of error.

    Enumeration Choices:

    * `FORBIDDEN`: Occurs when the user issuing the mutation does not
      have sufficient permissions to perform the action for a key.
    * `INVALID`: Occurs when the action taken on a key did not
      successfully pass validation.
    * `NOT_FOUND`: Occurs when the requested key `id` was not found.
    """

    __schema__ = nerdgraph
    __choices__ = ("FORBIDDEN", "INVALID", "NOT_FOUND")


class ApiAccessIngestKeyType(sgqlc.types.Enum):
    """The type of ingest key, which dictates what types of agents can
    use it to report.

    Enumeration Choices:

    * `BROWSER`: Ingest keys of type `BROWSER` mean browser agents
      will use them to report data to New Relic.
    * `LICENSE`: For ingest keys of type `LICENSE`: APM and
      Infrastructure agents use the key to report data to New Relic.
    """

    __schema__ = nerdgraph
    __choices__ = ("BROWSER", "LICENSE")


class ApiAccessKeyType(sgqlc.types.Enum):
    """The type of key.

    Enumeration Choices:

    * `INGEST`: An ingest key is used by New Relic agents to
      authenticate with New Relic and send data to the assigned
      account.
    * `USER`: A user key is used by New Relic users to authenticate
      with New Relic and to interact with the New Relic GraphQL API .
    """

    __schema__ = nerdgraph
    __choices__ = ("INGEST", "USER")


class ApiAccessUserKeyErrorType(sgqlc.types.Enum):
    """The type of error.

    Enumeration Choices:

    * `FORBIDDEN`: Occurs when the user issuing the mutation does not
      have sufficient permissions to perform the action for a key.
    * `INVALID`: Occurs when the action taken on a key did not
      successfully pass validation.
    * `NOT_FOUND`: Occurs when the requested key `id` was not found.
    """

    __schema__ = nerdgraph
    __choices__ = ("FORBIDDEN", "INVALID", "NOT_FOUND")


class AttributeMap(sgqlc.types.Scalar):
    """This scalar represents a map of attributes in the form of key-
    value pairs.
    """

    __schema__ = nerdgraph


Boolean = sgqlc.types.Boolean


class BrowserAgentInstallType(sgqlc.types.Enum):
    """Browser agent install types.

    Enumeration Choices:

    * `LITE`: Lite agent install type.
    * `PRO`: Pro agent install type.
    * `PRO_SPA`: Pro + SPA agent install type.
    """

    __schema__ = nerdgraph
    __choices__ = ("LITE", "PRO", "PRO_SPA")


class ChartFormatType(sgqlc.types.Enum):
    """Represents all the format types available for static charts.

    Enumeration Choices:

    * `PDF`None
    * `PNG`None
    """

    __schema__ = nerdgraph
    __choices__ = ("PDF", "PNG")


class ChartImageType(sgqlc.types.Enum):
    """Represents all the visualization types available for static
    charts.

    Enumeration Choices:

    * `APDEX`None
    * `AREA`None
    * `BAR`None
    * `BASELINE`None
    * `BILLBOARD`None
    * `BULLET`None
    * `EVENT_FEED`None
    * `FUNNEL`None
    * `HEATMAP`None
    * `HISTOGRAM`None
    * `LINE`None
    * `PIE`None
    * `SCATTER`None
    * `STACKED_HORIZONTAL_BAR`None
    * `TABLE`None
    * `VERTICAL_BAR`None
    """

    __schema__ = nerdgraph
    __choices__ = (
        "APDEX",
        "AREA",
        "BAR",
        "BASELINE",
        "BILLBOARD",
        "BULLET",
        "EVENT_FEED",
        "FUNNEL",
        "HEATMAP",
        "HISTOGRAM",
        "LINE",
        "PIE",
        "SCATTER",
        "STACKED_HORIZONTAL_BAR",
        "TABLE",
        "VERTICAL_BAR",
    )


class CloudMetricCollectionMode(sgqlc.types.Enum):
    """How metrics will be collected.

    Enumeration Choices:

    * `PULL`: Metrics will be pulled by NewRelic
    * `PUSH`: Metrics will be pushed by the provider
    """

    __schema__ = nerdgraph
    __choices__ = ("PULL", "PUSH")


class DashboardAddWidgetsToPageErrorType(sgqlc.types.Enum):
    """Expected error types that can be returned by addWidgetsToPage
    operation.

    Enumeration Choices:

    * `FORBIDDEN_OPERATION`: User is not allowed to execute the
      operation.
    * `INVALID_INPUT`: Invalid input error.
    * `PAGE_NOT_FOUND`: Page not found in the system.
    """

    __schema__ = nerdgraph
    __choices__ = ("FORBIDDEN_OPERATION", "INVALID_INPUT", "PAGE_NOT_FOUND")


class DashboardAlertSeverity(sgqlc.types.Enum):
    """Alert severity.

    Enumeration Choices:

    * `CRITICAL`: CRITICAL.
    * `NOT_ALERTING`: NOT_ALERTING.
    * `WARNING`: WARNING.
    """

    __schema__ = nerdgraph
    __choices__ = ("CRITICAL", "NOT_ALERTING", "WARNING")


class DashboardCreateErrorType(sgqlc.types.Enum):
    """Expected error types that can be returned by create operation.

    Enumeration Choices:

    * `INVALID_INPUT`: Invalid input error.
    """

    __schema__ = nerdgraph
    __choices__ = ("INVALID_INPUT",)


class DashboardDeleteErrorType(sgqlc.types.Enum):
    """Expected error types that can be returned by delete operation.

    Enumeration Choices:

    * `DASHBOARD_NOT_FOUND`: Dashboard not found in the system.
    * `FORBIDDEN_OPERATION`: User is not allowed to execute the
      operation.
    """

    __schema__ = nerdgraph
    __choices__ = ("DASHBOARD_NOT_FOUND", "FORBIDDEN_OPERATION")


class DashboardDeleteResultStatus(sgqlc.types.Enum):
    """Result status of delete operation.

    Enumeration Choices:

    * `FAILURE`: FAILURE.
    * `SUCCESS`: SUCCESS.
    """

    __schema__ = nerdgraph
    __choices__ = ("FAILURE", "SUCCESS")


class DashboardEntityPermissions(sgqlc.types.Enum):
    """Permisions that represent visibility & editability

    Enumeration Choices:

    * `PRIVATE`: Private
    * `PUBLIC_READ_ONLY`: Public read only
    * `PUBLIC_READ_WRITE`: Public read & write
    """

    __schema__ = nerdgraph
    __choices__ = ("PRIVATE", "PUBLIC_READ_ONLY", "PUBLIC_READ_WRITE")


class DashboardLiveUrlErrorType(sgqlc.types.Enum):
    """Live URL error type.

    Enumeration Choices:

    * `OPERATION_FAILURE`: General operation failure.
    * `UNAUTHORIZED`: Unauthorized error.
    * `UNSUPPORTED`: Not supported error.
    * `URL_NOT_FOUND`: URL not found in the system.
    """

    __schema__ = nerdgraph
    __choices__ = ("OPERATION_FAILURE", "UNAUTHORIZED", "UNSUPPORTED", "URL_NOT_FOUND")


class DashboardLiveUrlType(sgqlc.types.Enum):
    """Live URL type.

    Enumeration Choices:

    * `DASHBOARD`: Dashboard.
    * `WIDGET`: Widget.
    """

    __schema__ = nerdgraph
    __choices__ = ("DASHBOARD", "WIDGET")


class DashboardPermissions(sgqlc.types.Enum):
    """Permissions that represent visibility & editing.

    Enumeration Choices:

    * `PRIVATE`: Only you can see the dashboard. Everything but the
      metadata is hidden.
    * `PUBLIC_READ_ONLY`: All users are able to see the dashboard, but
      only you have full rights to work with the dashboard. Other
      users can access the dashboard but are not able to edit or
      delete it, although they can duplicate it.
    * `PUBLIC_READ_WRITE`: All users have full rights to the
      dashboard.
    """

    __schema__ = nerdgraph
    __choices__ = ("PRIVATE", "PUBLIC_READ_ONLY", "PUBLIC_READ_WRITE")


class DashboardUndeleteErrorType(sgqlc.types.Enum):
    """Expected error types that can be returned by undelete operation.

    Enumeration Choices:

    * `DASHBOARD_NOT_FOUND`: Dashboard not found in the system.
    * `FORBIDDEN_OPERATION`: User is not allowed to execute the
      operation.
    """

    __schema__ = nerdgraph
    __choices__ = ("DASHBOARD_NOT_FOUND", "FORBIDDEN_OPERATION")


class DashboardUpdateErrorType(sgqlc.types.Enum):
    """Expected error types that can be returned by update operation.

    Enumeration Choices:

    * `FORBIDDEN_OPERATION`: User is not allowed to execute the
      operation.
    * `INVALID_INPUT`: Invalid input error.
    """

    __schema__ = nerdgraph
    __choices__ = ("FORBIDDEN_OPERATION", "INVALID_INPUT")


class DashboardUpdatePageErrorType(sgqlc.types.Enum):
    """Expected error types that can be returned by updatePage operation.

    Enumeration Choices:

    * `FORBIDDEN_OPERATION`: User is not allowed to execute the
      operation.
    * `INVALID_INPUT`: Invalid input error.
    * `PAGE_NOT_FOUND`: Page not found in the system.
    """

    __schema__ = nerdgraph
    __choices__ = ("FORBIDDEN_OPERATION", "INVALID_INPUT", "PAGE_NOT_FOUND")


class DashboardUpdateWidgetsInPageErrorType(sgqlc.types.Enum):
    """Expected error types that can be returned by updateWidgetsInPage
    operation.

    Enumeration Choices:

    * `FORBIDDEN_OPERATION`: User is not allowed to execute the
      operation.
    * `INVALID_INPUT`: Invalid input error.
    * `PAGE_NOT_FOUND`: Page not found in the system.
    * `WIDGET_NOT_FOUND`: Widget not found in the system.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "FORBIDDEN_OPERATION",
        "INVALID_INPUT",
        "PAGE_NOT_FOUND",
        "WIDGET_NOT_FOUND",
    )


class DashboardWidgetRawConfiguration(sgqlc.types.Scalar):
    """Raw JSON payload with full configuration of a widget."""

    __schema__ = nerdgraph


class DataDictionaryTextFormat(sgqlc.types.Enum):
    """Enumerated list of text output

    Enumeration Choices:

    * `HTML`: Text as HTML output
    * `MARKDOWN`: Text as markdown output
    * `PLAIN`: Text as plain output, stripped of markup
    """

    __schema__ = nerdgraph
    __choices__ = ("HTML", "MARKDOWN", "PLAIN")


class DataManagementCategory(sgqlc.types.Enum):
    """Category of a limit

    Enumeration Choices:

    * `ALERTING`: Limits on Alerting
    * `INGEST`: Limits on Ingest
    * `QUERY`: Limits on Query
    """

    __schema__ = nerdgraph
    __choices__ = ("ALERTING", "INGEST", "QUERY")


class DataManagementUnit(sgqlc.types.Enum):
    """Unit for a limit value

    Enumeration Choices:

    * `BYTES`: Value is in bytes
    * `COUNT`: Value is a count
    * `GIGABYTES`: Value is in gigabytes
    """

    __schema__ = nerdgraph
    __choices__ = ("BYTES", "COUNT", "GIGABYTES")


Date = sgqlc.types.datetime.Date

DateTime = sgqlc.types.datetime.DateTime


class DistributedTracingSpanAnomalyType(sgqlc.types.Enum):
    """The type of Span Anomaly being reported (currently only Duration
    is supported).

    Enumeration Choices:

    * `DURATION`: An anomaly type related to the duration of the span.
    """

    __schema__ = nerdgraph
    __choices__ = ("DURATION",)


class DistributedTracingSpanAttributes(sgqlc.types.Scalar):
    """Map of key value pairs for a span"""

    __schema__ = nerdgraph


class DistributedTracingSpanClientType(sgqlc.types.Enum):
    """Represents whether a span is a call to a datastore or an external
    service.

    Enumeration Choices:

    * `DATASTORE`: A span that represents a call to a datastore.
    * `EXTERNAL`: A span that represents a call to an external
      service.
    """

    __schema__ = nerdgraph
    __choices__ = ("DATASTORE", "EXTERNAL")


class DistributedTracingSpanProcessBoundary(sgqlc.types.Enum):
    """The position of a span with respect to the boundaries between
    processes in the trace.

    Enumeration Choices:

    * `ENTRY`: The first span in a process.
    * `EXIT`: A span that is the parent of an ENTRY span, or has an
      attribute name prefixed with either `db.` or `http.`, such as
      `db.statement` or `http.url`. If a span is both the first span
      in its process and has a `db.` or `http.`, its processBoundary
      value will be ENTRY.
    * `IN_PROCESS`: A span that is neither an ENTRY nor EXIT span. In-
      process spans are operations within each process, like internal
      method calls and functions.
    """

    __schema__ = nerdgraph
    __choices__ = ("ENTRY", "EXIT", "IN_PROCESS")


class EdgeComplianceTypeCode(sgqlc.types.Enum):
    """Compliance type codes that can be applied to a trace observer

    Enumeration Choices:

    * `FEDRAMP`: Fedramp compliant
    """

    __schema__ = nerdgraph
    __choices__ = ("FEDRAMP",)


class EdgeCreateSpanAttributeRuleResponseErrorType(sgqlc.types.Enum):
    """Known error codes and messages for
    `CreateSpanAttributeRuleResponseError`.

    Enumeration Choices:

    * `DUPLICATE_RULES`: Duplicate span attribute trace filter rules
      found
    * `EXCEEDS_SPAN_ATTRIBUTE_RULE_LIMITS`: The trace filter rule
      creation exceeds the number of allowed span attribute rules for
      a trace observer
    * `INVALID_INPUT`: Invalid trace filter rule input provided.
    * `NOT_FOUND`: No trace observer was found with the id given.
    * `OPPOSING_RULES`: Span attribute trace filter rules found that
      would cancel each other out
    """

    __schema__ = nerdgraph
    __choices__ = (
        "DUPLICATE_RULES",
        "EXCEEDS_SPAN_ATTRIBUTE_RULE_LIMITS",
        "INVALID_INPUT",
        "NOT_FOUND",
        "OPPOSING_RULES",
    )


class EdgeCreateTraceObserverResponseErrorType(sgqlc.types.Enum):
    """Known error codes and messages for
    `CreateTraceObserverResponseError`.

    Enumeration Choices:

    * `ALREADY_EXISTS`: A trace observer already exists for this
      account family and provider region.
    * `NO_AVAILABILITY_IN_REGION`: Trace observers aren’t available in
      provider region.
    """

    __schema__ = nerdgraph
    __choices__ = ("ALREADY_EXISTS", "NO_AVAILABILITY_IN_REGION")


class EdgeDataSourceGroupUpdateType(sgqlc.types.Enum):
    """The type of update you would like to apply to the existing data
    source group.

    Enumeration Choices:

    * `ADD`: Add the supplied entity guids to those that are currently
      active.
    * `REMOVE`: Remove the supplied entity guids from those that are
      currently active.
    * `REPLACE`: Replace the currently active entity guids with the
      ones supplied.
    """

    __schema__ = nerdgraph
    __choices__ = ("ADD", "REMOVE", "REPLACE")


class EdgeDataSourceStatusType(sgqlc.types.Enum):
    """The status of whether data is being sent to the trace observer for
    a particular data source.

    Enumeration Choices:

    * `ACTIVE`: The data source telemetry is being sent to this trace
      observer.
    * `INACTIVE`: The data source telemetry is *not* being sent to
      this trace observer.
    """

    __schema__ = nerdgraph
    __choices__ = ("ACTIVE", "INACTIVE")


class EdgeDeleteSpanAttributeRuleResponseErrorType(sgqlc.types.Enum):
    """Known error codes and messages for
    `DeleteSpanAttributeRuleResponseError`.

    Enumeration Choices:

    * `NOT_FOUND`: No trace observer was found with the id given.
    """

    __schema__ = nerdgraph
    __choices__ = ("NOT_FOUND",)


class EdgeDeleteTraceObserverResponseErrorType(sgqlc.types.Enum):
    """Known error codes and messages for
    `DeleteTraceObserverResponseError`.

    Enumeration Choices:

    * `ALREADY_DELETED`: The trace observer has already been deleted.
    * `NOT_FOUND`: No trace observer was found with the id given.
    """

    __schema__ = nerdgraph
    __choices__ = ("ALREADY_DELETED", "NOT_FOUND")


class EdgeEndpointStatus(sgqlc.types.Enum):
    """Status of the endpoint.

    Enumeration Choices:

    * `CREATED`: The endpoint has been created and is available for
      use.
    * `DELETED`: The endpoint has been deleted and is no longer
      available for use.
    """

    __schema__ = nerdgraph
    __choices__ = ("CREATED", "DELETED")


class EdgeEndpointType(sgqlc.types.Enum):
    """Type of connection established with the trace observer. Currently,
    only `PUBLIC` is supported.

    Enumeration Choices:

    * `PUBLIC`: PUBLIC: the endpoint is reachable on the internet.
    """

    __schema__ = nerdgraph
    __choices__ = ("PUBLIC",)


class EdgeProviderRegion(sgqlc.types.Enum):
    """Provider and region where the trace observer is located.
    Currently, only AWS regions are supported.

    Enumeration Choices:

    * `AWS_AP_SOUTHEAST_1`: Provider: `AWS`, Region: `ap-southeast-1`
    * `AWS_AP_SOUTHEAST_2`: Provider: `AWS`, Region: `ap-southeast-2`
    * `AWS_EU_CENTRAL_1`: Provider: `AWS`, Region: `eu-central-1`
    * `AWS_EU_WEST_1`: Provider: `AWS`, Region: `eu-west-1`
    * `AWS_US_EAST_1`: Provider: `AWS`, Region: `us-east-1`
    * `AWS_US_EAST_2`: Provider: `AWS`, Region: `us-east-2`
    * `AWS_US_WEST_2`: Provider: `AWS`, Region: `us-west-2`
    """

    __schema__ = nerdgraph
    __choices__ = (
        "AWS_AP_SOUTHEAST_1",
        "AWS_AP_SOUTHEAST_2",
        "AWS_EU_CENTRAL_1",
        "AWS_EU_WEST_1",
        "AWS_US_EAST_1",
        "AWS_US_EAST_2",
        "AWS_US_WEST_2",
    )


class EdgeSpanAttributeKeyOperator(sgqlc.types.Enum):
    """Span attribute key operator types

    Enumeration Choices:

    * `EQUALS`: Matches on an exact value
    * `LIKE`: Matches on a value that starts-with and/or ends-with the
      provided value
    """

    __schema__ = nerdgraph
    __choices__ = ("EQUALS", "LIKE")


class EdgeSpanAttributeValueOperator(sgqlc.types.Enum):
    """Span attribute value operator types

    Enumeration Choices:

    * `EQUALS`: Matches on an exact value
    * `IS_NOT_NULL`: Matches on any value
    * `LIKE`: Matches on a value that starts-with and/or ends-with the
      provided value
    """

    __schema__ = nerdgraph
    __choices__ = ("EQUALS", "IS_NOT_NULL", "LIKE")


class EdgeTraceFilterAction(sgqlc.types.Enum):
    """Type of action to perform when a `TraceFilter` match occurs

    Enumeration Choices:

    * `DISCARD`: Discards traces that match the filter
    * `KEEP`: Keeps traces that match the filter
    """

    __schema__ = nerdgraph
    __choices__ = ("DISCARD", "KEEP")


class EdgeTraceObserverStatus(sgqlc.types.Enum):
    """Status of the trace observer.

    Enumeration Choices:

    * `CREATED`: The trace observer has been created and is available
      for use.
    * `DELETED`: The trace observer has been deleted and is no longer
      available for use.
    """

    __schema__ = nerdgraph
    __choices__ = ("CREATED", "DELETED")


class EdgeUpdateTraceObserverResponseErrorType(sgqlc.types.Enum):
    """Known error codes and messages for
    `UpdateTraceObserverResponseError`.

    Enumeration Choices:

    * `INVALID_INPUT`: Invalid input provided.
    * `NOT_FOUND`: No trace observer was found with the id given.
    """

    __schema__ = nerdgraph
    __choices__ = ("INVALID_INPUT", "NOT_FOUND")


class EmbeddedChartType(sgqlc.types.Enum):
    """Represents all the visualization types available for embedded
    charts.

    Enumeration Choices:

    * `APDEX`None
    * `AREA`None
    * `BAR`None
    * `BASELINE`None
    * `BILLBOARD`None
    * `BULLET`None
    * `EMPTY`None
    * `EVENT_FEED`None
    * `FUNNEL`None
    * `HEATMAP`None
    * `HISTOGRAM`None
    * `JSON`None
    * `LINE`None
    * `MARKDOWN`None
    * `PIE`None
    * `SCATTER`None
    * `STACKED_HORIZONTAL_BAR`None
    * `TABLE`None
    * `TRAFFIC_LIGHT`None
    * `VERTICAL_BAR`None
    """

    __schema__ = nerdgraph
    __choices__ = (
        "APDEX",
        "AREA",
        "BAR",
        "BASELINE",
        "BILLBOARD",
        "BULLET",
        "EMPTY",
        "EVENT_FEED",
        "FUNNEL",
        "HEATMAP",
        "HISTOGRAM",
        "JSON",
        "LINE",
        "MARKDOWN",
        "PIE",
        "SCATTER",
        "STACKED_HORIZONTAL_BAR",
        "TABLE",
        "TRAFFIC_LIGHT",
        "VERTICAL_BAR",
    )


class EntityAlertSeverity(sgqlc.types.Enum):
    """The alert severity of the entity.

    Enumeration Choices:

    * `CRITICAL`: Indicates an entity has a critical violation in
      progress.
    * `NOT_ALERTING`: Indicates an entity has no violations and
      therefore is not alerting.
    * `NOT_CONFIGURED`: Indicates an entity is not configured for
      alerting.
    * `WARNING`: Indicates an entity  has a warning violation in
      progress.
    """

    __schema__ = nerdgraph
    __choices__ = ("CRITICAL", "NOT_ALERTING", "NOT_CONFIGURED", "WARNING")


class EntityCollectionType(sgqlc.types.Enum):
    """Indicates where this collection is used

    Enumeration Choices:

    * `WORKLOAD`: Collections that define the entities that belong to
      a workload
    * `WORKLOAD_STATUS_RULE_GROUP`: Collections that define the entity
      groups that are used to calculate the status of a workload
    """

    __schema__ = nerdgraph
    __choices__ = ("WORKLOAD", "WORKLOAD_STATUS_RULE_GROUP")


class EntityDeleteErrorType(sgqlc.types.Enum):
    """List of all potential error types that an entity delete operation
    might return.

    Enumeration Choices:

    * `FORBIDDEN`: Forbidden request
    * `INTERNAL_ERROR`: Internal error
    * `INVALID_INPUT`: Invalid input
    """

    __schema__ = nerdgraph
    __choices__ = ("FORBIDDEN", "INTERNAL_ERROR", "INVALID_INPUT")


class EntityGoldenEventObjectId(sgqlc.types.Enum):
    """Types of references for the default WHERE clause.

    Enumeration Choices:

    * `DOMAIN_IDS`: The WHERE clause will be done against a domainId.
    * `ENTITY_GUIDS`: The WHERE clause will be done against a GUID.
    * `ENTITY_NAMES`: The WHERE clause will be done against the name
      of the entity.
    """

    __schema__ = nerdgraph
    __choices__ = ("DOMAIN_IDS", "ENTITY_GUIDS", "ENTITY_NAMES")


class EntityGoldenGoldenMetricsErrorType(sgqlc.types.Enum):
    """An object that represents a golden metrics error

    Enumeration Choices:

    * `INVALID_CONTEXT`: The context defined in the request is not
      valid.
    * `INVALID_DOMAIN_TYPE`: The domain type defined in the request is
      not valid.
    * `INVALID_QUERY_PARAMS`: There is some parameter validation that
      has failed
    * `LIMIT_EXCEEDED`: Number of metrics defined in the requests
      exceeds the limit.
    * `NOT_AUTHORIZED`: The user does not have permissions to perform
      the operation.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "INVALID_CONTEXT",
        "INVALID_DOMAIN_TYPE",
        "INVALID_QUERY_PARAMS",
        "LIMIT_EXCEEDED",
        "NOT_AUTHORIZED",
    )


class EntityGoldenMetricUnit(sgqlc.types.Enum):
    """The different units that can be used to express golden metrics.

    Enumeration Choices:

    * `APDEX`: Apdex (Application Performance Index).
    * `BITS`: Bits.
    * `BITS_PER_SECOND`: Bits per second.
    * `BYTES`: Bytes.
    * `BYTES_PER_SECOND`: Bytes per second.
    * `CELSIUS`: Degrees celsius.
    * `COUNT`: Count.
    * `HERTZ`: Hertz.
    * `MESSAGES_PER_SECOND`: Messages per second.
    * `MS`: Milliseconds.
    * `OPERATIONS_PER_SECOND`: Operations per second.
    * `PAGES_PER_SECOND`: Pages loaded per second.
    * `PERCENTAGE`: Percentage.
    * `REQUESTS_PER_MINUTE`: Requests received per minute.
    * `REQUESTS_PER_SECOND`: Requests received per second.
    * `SECONDS`: Seconds.
    * `TIMESTAMP`: Timestamp.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "APDEX",
        "BITS",
        "BITS_PER_SECOND",
        "BYTES",
        "BYTES_PER_SECOND",
        "CELSIUS",
        "COUNT",
        "HERTZ",
        "MESSAGES_PER_SECOND",
        "MS",
        "OPERATIONS_PER_SECOND",
        "PAGES_PER_SECOND",
        "PERCENTAGE",
        "REQUESTS_PER_MINUTE",
        "REQUESTS_PER_SECOND",
        "SECONDS",
        "TIMESTAMP",
    )


class EntityGuid(sgqlc.types.Scalar):
    """An encoded Entity GUID"""

    __schema__ = nerdgraph


class EntityInfrastructureIntegrationType(sgqlc.types.Enum):
    """The type of Infrastructure Integration

    Enumeration Choices:

    * `APACHE_SERVER`: APACHE_SERVER integration
    * `AWSELASTICSEARCHNODE`: AWSELASTICSEARCHNODE integration
    * `AWS_ALB`: AWS_ALB integration
    * `AWS_ALB_LISTENER`: AWS_ALB_LISTENER integration
    * `AWS_ALB_LISTENER_RULE`: AWS_ALB_LISTENER_RULE integration
    * `AWS_ALB_TARGET_GROUP`: AWS_ALB_TARGET_GROUP integration
    * `AWS_API_GATEWAY_API`: AWS_API_GATEWAY_API integration
    * `AWS_API_GATEWAY_RESOURCE`: AWS_API_GATEWAY_RESOURCE integration
    * `AWS_API_GATEWAY_RESOURCE_WITH_METRICS`:
      AWS_API_GATEWAY_RESOURCE_WITH_METRICS integration
    * `AWS_API_GATEWAY_STAGE`: AWS_API_GATEWAY_STAGE integration
    * `AWS_AUTO_SCALING_GROUP`: AWS_AUTO_SCALING_GROUP integration
    * `AWS_AUTO_SCALING_INSTANCE`: AWS_AUTO_SCALING_INSTANCE
      integration
    * `AWS_AUTO_SCALING_LAUNCH_CONFIGURATION`:
      AWS_AUTO_SCALING_LAUNCH_CONFIGURATION integration
    * `AWS_AUTO_SCALING_POLICY`: AWS_AUTO_SCALING_POLICY integration
    * `AWS_AUTO_SCALING_REGION_LIMIT`: AWS_AUTO_SCALING_REGION_LIMIT
      integration
    * `AWS_BILLING_ACCOUNT_COST`: AWS_BILLING_ACCOUNT_COST integration
    * `AWS_BILLING_ACCOUNT_SERVICE_COST`:
      AWS_BILLING_ACCOUNT_SERVICE_COST integration
    * `AWS_BILLING_BUDGET`: AWS_BILLING_BUDGET integration
    * `AWS_BILLING_SERVICE_COST`: AWS_BILLING_SERVICE_COST integration
    * `AWS_CLOUD_FRONT_DISTRIBUTION`: AWS_CLOUD_FRONT_DISTRIBUTION
      integration
    * `AWS_CLOUD_TRAIL`: AWS_CLOUD_TRAIL integration
    * `AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX`:
      AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX integration
    * `AWS_DYNAMO_DB_REGION`: AWS_DYNAMO_DB_REGION integration
    * `AWS_DYNAMO_DB_TABLE`: AWS_DYNAMO_DB_TABLE integration
    * `AWS_EBS_VOLUME`: AWS_EBS_VOLUME integration
    * `AWS_ECS_CLUSTER`: AWS_ECS_CLUSTER integration
    * `AWS_ECS_SERVICE`: AWS_ECS_SERVICE integration
    * `AWS_EFS_FILE_SYSTEM`: AWS_EFS_FILE_SYSTEM integration
    * `AWS_ELASTICSEARCH_CLUSTER`: AWS_ELASTICSEARCH_CLUSTER
      integration
    * `AWS_ELASTICSEARCH_INSTANCE`: AWS_ELASTICSEARCH_INSTANCE
      integration
    * `AWS_ELASTIC_BEANSTALK_ENVIRONMENT`:
      AWS_ELASTIC_BEANSTALK_ENVIRONMENT integration
    * `AWS_ELASTIC_BEANSTALK_INSTANCE`: AWS_ELASTIC_BEANSTALK_INSTANCE
      integration
    * `AWS_ELASTIC_MAP_REDUCE_CLUSTER`: AWS_ELASTIC_MAP_REDUCE_CLUSTER
      integration
    * `AWS_ELASTIC_MAP_REDUCE_INSTANCE`:
      AWS_ELASTIC_MAP_REDUCE_INSTANCE integration
    * `AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET`:
      AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET integration
    * `AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP`:
      AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP integration
    * `AWS_ELASTI_CACHE_MEMCACHED_CLUSTER`:
      AWS_ELASTI_CACHE_MEMCACHED_CLUSTER integration
    * `AWS_ELASTI_CACHE_MEMCACHED_NODE`:
      AWS_ELASTI_CACHE_MEMCACHED_NODE integration
    * `AWS_ELASTI_CACHE_REDIS_CLUSTER`: AWS_ELASTI_CACHE_REDIS_CLUSTER
      integration
    * `AWS_ELASTI_CACHE_REDIS_NODE`: AWS_ELASTI_CACHE_REDIS_NODE
      integration
    * `AWS_ELB`: AWS_ELB integration
    * `AWS_HEALTH_ISSUE`: AWS_HEALTH_ISSUE integration
    * `AWS_HEALTH_NOTIFICATION`: AWS_HEALTH_NOTIFICATION integration
    * `AWS_HEALTH_SCHEDULED_CHANGE`: AWS_HEALTH_SCHEDULED_CHANGE
      integration
    * `AWS_HEALTH_UNKNOWN`: AWS_HEALTH_UNKNOWN integration
    * `AWS_IAM`: AWS_IAM integration
    * `AWS_IAM_GROUP`: AWS_IAM_GROUP integration
    * `AWS_IAM_OPEN_ID_PROVIDER`: AWS_IAM_OPEN_ID_PROVIDER integration
    * `AWS_IAM_POLICY`: AWS_IAM_POLICY integration
    * `AWS_IAM_ROLE`: AWS_IAM_ROLE integration
    * `AWS_IAM_SAML_PROVIDER`: AWS_IAM_SAML_PROVIDER integration
    * `AWS_IAM_SERVER_CERTIFICATE`: AWS_IAM_SERVER_CERTIFICATE
      integration
    * `AWS_IAM_USER`: AWS_IAM_USER integration
    * `AWS_IAM_VIRTUAL_MFA_DEVICE`: AWS_IAM_VIRTUAL_MFA_DEVICE
      integration
    * `AWS_IOT_BROKER`: AWS_IOT_BROKER integration
    * `AWS_IOT_RULE`: AWS_IOT_RULE integration
    * `AWS_IOT_RULE_ACTION`: AWS_IOT_RULE_ACTION integration
    * `AWS_KINESIS_DELIVERY_STREAM`: AWS_KINESIS_DELIVERY_STREAM
      integration
    * `AWS_KINESIS_STREAM`: AWS_KINESIS_STREAM integration
    * `AWS_KINESIS_STREAM_SHARD`: AWS_KINESIS_STREAM_SHARD integration
    * `AWS_LAMBDA_AGENT_TRANSACTION`: AWS_LAMBDA_AGENT_TRANSACTION
      integration
    * `AWS_LAMBDA_AGENT_TRANSACTION_ERROR`:
      AWS_LAMBDA_AGENT_TRANSACTION_ERROR integration
    * `AWS_LAMBDA_EDGE_FUNCTION`: AWS_LAMBDA_EDGE_FUNCTION integration
    * `AWS_LAMBDA_EVENT_SOURCE_MAPPING`:
      AWS_LAMBDA_EVENT_SOURCE_MAPPING integration
    * `AWS_LAMBDA_FUNCTION`: AWS_LAMBDA_FUNCTION integration
    * `AWS_LAMBDA_FUNCTION_ALIAS`: AWS_LAMBDA_FUNCTION_ALIAS
      integration
    * `AWS_LAMBDA_OPERATION`: AWS_LAMBDA_OPERATION integration
    * `AWS_LAMBDA_REGION`: AWS_LAMBDA_REGION integration
    * `AWS_LAMBDA_SPAN`: AWS_LAMBDA_SPAN integration
    * `AWS_LAMBDA_TRACE`: AWS_LAMBDA_TRACE integration
    * `AWS_RDS_DB_CLUSTER`: AWS_RDS_DB_CLUSTER integration
    * `AWS_RDS_DB_INSTANCE`: AWS_RDS_DB_INSTANCE integration
    * `AWS_REDSHIFT_CLUSTER`: AWS_REDSHIFT_CLUSTER integration
    * `AWS_REDSHIFT_NODE`: AWS_REDSHIFT_NODE integration
    * `AWS_ROUTE53_HEALTH_CHECK`: AWS_ROUTE53_HEALTH_CHECK integration
    * `AWS_ROUTE53_ZONE`: AWS_ROUTE53_ZONE integration
    * `AWS_ROUTE53_ZONE_RECORD_SET`: AWS_ROUTE53_ZONE_RECORD_SET
      integration
    * `AWS_S3_BUCKET`: AWS_S3_BUCKET integration
    * `AWS_S3_BUCKET_REQUESTS`: AWS_S3_BUCKET_REQUESTS integration
    * `AWS_SES_CONFIGURATION_SET`: AWS_SES_CONFIGURATION_SET
      integration
    * `AWS_SES_EVENT_DESTINATION`: AWS_SES_EVENT_DESTINATION
      integration
    * `AWS_SES_RECEIPT_FILTER`: AWS_SES_RECEIPT_FILTER integration
    * `AWS_SES_RECEIPT_RULE`: AWS_SES_RECEIPT_RULE integration
    * `AWS_SES_RECEIPT_RULE_SET`: AWS_SES_RECEIPT_RULE_SET integration
    * `AWS_SES_REGION`: AWS_SES_REGION integration
    * `AWS_SNS_SUBSCRIPTION`: AWS_SNS_SUBSCRIPTION integration
    * `AWS_SNS_TOPIC`: AWS_SNS_TOPIC integration
    * `AWS_SQS_QUEUE`: AWS_SQS_QUEUE integration
    * `AWS_VPC`: AWS_VPC integration
    * `AWS_VPC_ENDPOINT`: AWS_VPC_ENDPOINT integration
    * `AWS_VPC_INTERNET_GATEWAY`: AWS_VPC_INTERNET_GATEWAY integration
    * `AWS_VPC_NAT_GATEWAY`: AWS_VPC_NAT_GATEWAY integration
    * `AWS_VPC_NETWORK_ACL`: AWS_VPC_NETWORK_ACL integration
    * `AWS_VPC_NETWORK_INTERFACE`: AWS_VPC_NETWORK_INTERFACE
      integration
    * `AWS_VPC_PEERING_CONNECTION`: AWS_VPC_PEERING_CONNECTION
      integration
    * `AWS_VPC_ROUTE_TABLE`: AWS_VPC_ROUTE_TABLE integration
    * `AWS_VPC_SECURITY_GROUP`: AWS_VPC_SECURITY_GROUP integration
    * `AWS_VPC_SUBNET`: AWS_VPC_SUBNET integration
    * `AWS_VPC_VPN_CONNECTION`: AWS_VPC_VPN_CONNECTION integration
    * `AWS_VPC_VPN_TUNNEL`: AWS_VPC_VPN_TUNNEL integration
    * `AZURE_APP_SERVICE_HOST_NAME`: AZURE_APP_SERVICE_HOST_NAME
      integration
    * `AZURE_APP_SERVICE_WEB_APP`: AZURE_APP_SERVICE_WEB_APP
      integration
    * `AZURE_COSMOS_DB_ACCOUNT`: AZURE_COSMOS_DB_ACCOUNT integration
    * `AZURE_FUNCTIONS_APP`: AZURE_FUNCTIONS_APP integration
    * `AZURE_LOAD_BALANCER`: AZURE_LOAD_BALANCER integration
    * `AZURE_LOAD_BALANCER_BACKEND`: AZURE_LOAD_BALANCER_BACKEND
      integration
    * `AZURE_LOAD_BALANCER_FRONTEND_IP`:
      AZURE_LOAD_BALANCER_FRONTEND_IP integration
    * `AZURE_LOAD_BALANCER_INBOUND_NAT_POOL`:
      AZURE_LOAD_BALANCER_INBOUND_NAT_POOL integration
    * `AZURE_LOAD_BALANCER_INBOUND_NAT_RULE`:
      AZURE_LOAD_BALANCER_INBOUND_NAT_RULE integration
    * `AZURE_LOAD_BALANCER_PROBE`: AZURE_LOAD_BALANCER_PROBE
      integration
    * `AZURE_LOAD_BALANCER_RULE`: AZURE_LOAD_BALANCER_RULE integration
    * `AZURE_MARIADB_SERVER`: AZURE_MARIADB_SERVER integration
    * `AZURE_MYSQL_SERVER`: AZURE_MYSQL_SERVER integration
    * `AZURE_POSTGRESQL_SERVER`: AZURE_POSTGRESQL_SERVER integration
    * `AZURE_REDIS_CACHE`: AZURE_REDIS_CACHE integration
    * `AZURE_REDIS_CACHE_SHARD`: AZURE_REDIS_CACHE_SHARD integration
    * `AZURE_SERVICE_BUS_NAMESPACE`: AZURE_SERVICE_BUS_NAMESPACE
      integration
    * `AZURE_SERVICE_BUS_QUEUE`: AZURE_SERVICE_BUS_QUEUE integration
    * `AZURE_SERVICE_BUS_SUBSCRIPTION`: AZURE_SERVICE_BUS_SUBSCRIPTION
      integration
    * `AZURE_SERVICE_BUS_TOPIC`: AZURE_SERVICE_BUS_TOPIC integration
    * `AZURE_SQL_DATABASE`: AZURE_SQL_DATABASE integration
    * `AZURE_SQL_ELASTIC_POOL`: AZURE_SQL_ELASTIC_POOL integration
    * `AZURE_SQL_FIREWALL`: AZURE_SQL_FIREWALL integration
    * `AZURE_SQL_REPLICATION_LINK`: AZURE_SQL_REPLICATION_LINK
      integration
    * `AZURE_SQL_RESTORE_POINT`: AZURE_SQL_RESTORE_POINT integration
    * `AZURE_SQL_SERVER`: AZURE_SQL_SERVER integration
    * `AZURE_STORAGE_ACCOUNT`: AZURE_STORAGE_ACCOUNT integration
    * `AZURE_VIRTUAL_NETWORKS`: AZURE_VIRTUAL_NETWORKS integration
    * `AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION`:
      AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION integration
    * `AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE`:
      AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE integration
    * `AZURE_VIRTUAL_NETWORKS_PEERING`: AZURE_VIRTUAL_NETWORKS_PEERING
      integration
    * `AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS`:
      AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS integration
    * `AZURE_VIRTUAL_NETWORKS_ROUTE`: AZURE_VIRTUAL_NETWORKS_ROUTE
      integration
    * `AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE`:
      AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE integration
    * `AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP`:
      AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP integration
    * `AZURE_VIRTUAL_NETWORKS_SECURITY_RULE`:
      AZURE_VIRTUAL_NETWORKS_SECURITY_RULE integration
    * `AZURE_VIRTUAL_NETWORKS_SUBNET`: AZURE_VIRTUAL_NETWORKS_SUBNET
      integration
    * `CASSANDRA_NODE`: CASSANDRA_NODE integration
    * `CONSUL_AGENT`: CONSUL_AGENT integration
    * `COUCHBASE_BUCKET`: COUCHBASE_BUCKET integration
    * `COUCHBASE_CLUSTER`: COUCHBASE_CLUSTER integration
    * `COUCHBASE_NODE`: COUCHBASE_NODE integration
    * `COUCHBASE_QUERY_ENGINE`: COUCHBASE_QUERY_ENGINE integration
    * `ELASTICSEARCH_NODE`: ELASTICSEARCH_NODE integration
    * `F5_NODE`: F5_NODE integration
    * `F5_POOL`: F5_POOL integration
    * `F5_POOL_MEMBER`: F5_POOL_MEMBER integration
    * `F5_SYSTEM`: F5_SYSTEM integration
    * `F5_VIRTUAL_SERVER`: F5_VIRTUAL_SERVER integration
    * `GCP_APP_ENGINE_SERVICE`: GCP_APP_ENGINE_SERVICE integration
    * `GCP_BIG_QUERY_DATA_SET`: GCP_BIG_QUERY_DATA_SET integration
    * `GCP_BIG_QUERY_PROJECT`: GCP_BIG_QUERY_PROJECT integration
    * `GCP_BIG_QUERY_TABLE`: GCP_BIG_QUERY_TABLE integration
    * `GCP_CLOUD_FUNCTION`: GCP_CLOUD_FUNCTION integration
    * `GCP_CLOUD_SQL`: GCP_CLOUD_SQL integration
    * `GCP_CLOUD_TASKS_QUEUE`: GCP_CLOUD_TASKS_QUEUE integration
    * `GCP_HTTP_LOAD_BALANCER`: GCP_HTTP_LOAD_BALANCER integration
    * `GCP_INTERNAL_LOAD_BALANCER`: GCP_INTERNAL_LOAD_BALANCER
      integration
    * `GCP_KUBERNETES_CONTAINER`: GCP_KUBERNETES_CONTAINER integration
    * `GCP_KUBERNETES_NODE`: GCP_KUBERNETES_NODE integration
    * `GCP_KUBERNETES_POD`: GCP_KUBERNETES_POD integration
    * `GCP_PUB_SUB_SUBSCRIPTION`: GCP_PUB_SUB_SUBSCRIPTION integration
    * `GCP_PUB_SUB_TOPIC`: GCP_PUB_SUB_TOPIC integration
    * `GCP_SPANNER_DATABASE`: GCP_SPANNER_DATABASE integration
    * `GCP_SPANNER_INSTANCE`: GCP_SPANNER_INSTANCE integration
    * `GCP_STORAGE_BUCKET`: GCP_STORAGE_BUCKET integration
    * `GCP_TCP_SSL_PROXY_LOAD_BALANCER`:
      GCP_TCP_SSL_PROXY_LOAD_BALANCER integration
    * `GCP_VIRTUAL_MACHINE_DISK`: GCP_VIRTUAL_MACHINE_DISK integration
    * `KAFKA_BROKER`: KAFKA_BROKER integration
    * `KAFKA_TOPIC`: KAFKA_TOPIC integration
    * `KUBERNETES_CLUSTER`: KUBERNETES_CLUSTER integration
    * `MEMCACHED_INSTANCE`: MEMCACHED_INSTANCE integration
    * `MSSQL_INSTANCE`: MSSQL_INSTANCE integration
    * `MYSQL_NODE`: MYSQL_NODE integration
    * `NA`: NA integration
    * `NGINX_SERVER`: NGINX_SERVER integration
    * `ORACLE_DB_INSTANCE`: ORACLE_DB_INSTANCE integration
    * `POSTGRE_SQL_INSTANCE`: POSTGRE_SQL_INSTANCE integration
    * `RABBIT_MQ_CLUSTER`: RABBIT_MQ_CLUSTER integration
    * `RABBIT_MQ_EXCHANGE`: RABBIT_MQ_EXCHANGE integration
    * `RABBIT_MQ_NODE`: RABBIT_MQ_NODE integration
    * `RABBIT_MQ_QUEUE`: RABBIT_MQ_QUEUE integration
    * `REDIS_INSTANCE`: REDIS_INSTANCE integration
    * `VARNISH_INSTANCE`: VARNISH_INSTANCE integration
    """

    __schema__ = nerdgraph
    __choices__ = (
        "APACHE_SERVER",
        "AWSELASTICSEARCHNODE",
        "AWS_ALB",
        "AWS_ALB_LISTENER",
        "AWS_ALB_LISTENER_RULE",
        "AWS_ALB_TARGET_GROUP",
        "AWS_API_GATEWAY_API",
        "AWS_API_GATEWAY_RESOURCE",
        "AWS_API_GATEWAY_RESOURCE_WITH_METRICS",
        "AWS_API_GATEWAY_STAGE",
        "AWS_AUTO_SCALING_GROUP",
        "AWS_AUTO_SCALING_INSTANCE",
        "AWS_AUTO_SCALING_LAUNCH_CONFIGURATION",
        "AWS_AUTO_SCALING_POLICY",
        "AWS_AUTO_SCALING_REGION_LIMIT",
        "AWS_BILLING_ACCOUNT_COST",
        "AWS_BILLING_ACCOUNT_SERVICE_COST",
        "AWS_BILLING_BUDGET",
        "AWS_BILLING_SERVICE_COST",
        "AWS_CLOUD_FRONT_DISTRIBUTION",
        "AWS_CLOUD_TRAIL",
        "AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX",
        "AWS_DYNAMO_DB_REGION",
        "AWS_DYNAMO_DB_TABLE",
        "AWS_EBS_VOLUME",
        "AWS_ECS_CLUSTER",
        "AWS_ECS_SERVICE",
        "AWS_EFS_FILE_SYSTEM",
        "AWS_ELASTICSEARCH_CLUSTER",
        "AWS_ELASTICSEARCH_INSTANCE",
        "AWS_ELASTIC_BEANSTALK_ENVIRONMENT",
        "AWS_ELASTIC_BEANSTALK_INSTANCE",
        "AWS_ELASTIC_MAP_REDUCE_CLUSTER",
        "AWS_ELASTIC_MAP_REDUCE_INSTANCE",
        "AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET",
        "AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP",
        "AWS_ELASTI_CACHE_MEMCACHED_CLUSTER",
        "AWS_ELASTI_CACHE_MEMCACHED_NODE",
        "AWS_ELASTI_CACHE_REDIS_CLUSTER",
        "AWS_ELASTI_CACHE_REDIS_NODE",
        "AWS_ELB",
        "AWS_HEALTH_ISSUE",
        "AWS_HEALTH_NOTIFICATION",
        "AWS_HEALTH_SCHEDULED_CHANGE",
        "AWS_HEALTH_UNKNOWN",
        "AWS_IAM",
        "AWS_IAM_GROUP",
        "AWS_IAM_OPEN_ID_PROVIDER",
        "AWS_IAM_POLICY",
        "AWS_IAM_ROLE",
        "AWS_IAM_SAML_PROVIDER",
        "AWS_IAM_SERVER_CERTIFICATE",
        "AWS_IAM_USER",
        "AWS_IAM_VIRTUAL_MFA_DEVICE",
        "AWS_IOT_BROKER",
        "AWS_IOT_RULE",
        "AWS_IOT_RULE_ACTION",
        "AWS_KINESIS_DELIVERY_STREAM",
        "AWS_KINESIS_STREAM",
        "AWS_KINESIS_STREAM_SHARD",
        "AWS_LAMBDA_AGENT_TRANSACTION",
        "AWS_LAMBDA_AGENT_TRANSACTION_ERROR",
        "AWS_LAMBDA_EDGE_FUNCTION",
        "AWS_LAMBDA_EVENT_SOURCE_MAPPING",
        "AWS_LAMBDA_FUNCTION",
        "AWS_LAMBDA_FUNCTION_ALIAS",
        "AWS_LAMBDA_OPERATION",
        "AWS_LAMBDA_REGION",
        "AWS_LAMBDA_SPAN",
        "AWS_LAMBDA_TRACE",
        "AWS_RDS_DB_CLUSTER",
        "AWS_RDS_DB_INSTANCE",
        "AWS_REDSHIFT_CLUSTER",
        "AWS_REDSHIFT_NODE",
        "AWS_ROUTE53_HEALTH_CHECK",
        "AWS_ROUTE53_ZONE",
        "AWS_ROUTE53_ZONE_RECORD_SET",
        "AWS_S3_BUCKET",
        "AWS_S3_BUCKET_REQUESTS",
        "AWS_SES_CONFIGURATION_SET",
        "AWS_SES_EVENT_DESTINATION",
        "AWS_SES_RECEIPT_FILTER",
        "AWS_SES_RECEIPT_RULE",
        "AWS_SES_RECEIPT_RULE_SET",
        "AWS_SES_REGION",
        "AWS_SNS_SUBSCRIPTION",
        "AWS_SNS_TOPIC",
        "AWS_SQS_QUEUE",
        "AWS_VPC",
        "AWS_VPC_ENDPOINT",
        "AWS_VPC_INTERNET_GATEWAY",
        "AWS_VPC_NAT_GATEWAY",
        "AWS_VPC_NETWORK_ACL",
        "AWS_VPC_NETWORK_INTERFACE",
        "AWS_VPC_PEERING_CONNECTION",
        "AWS_VPC_ROUTE_TABLE",
        "AWS_VPC_SECURITY_GROUP",
        "AWS_VPC_SUBNET",
        "AWS_VPC_VPN_CONNECTION",
        "AWS_VPC_VPN_TUNNEL",
        "AZURE_APP_SERVICE_HOST_NAME",
        "AZURE_APP_SERVICE_WEB_APP",
        "AZURE_COSMOS_DB_ACCOUNT",
        "AZURE_FUNCTIONS_APP",
        "AZURE_LOAD_BALANCER",
        "AZURE_LOAD_BALANCER_BACKEND",
        "AZURE_LOAD_BALANCER_FRONTEND_IP",
        "AZURE_LOAD_BALANCER_INBOUND_NAT_POOL",
        "AZURE_LOAD_BALANCER_INBOUND_NAT_RULE",
        "AZURE_LOAD_BALANCER_PROBE",
        "AZURE_LOAD_BALANCER_RULE",
        "AZURE_MARIADB_SERVER",
        "AZURE_MYSQL_SERVER",
        "AZURE_POSTGRESQL_SERVER",
        "AZURE_REDIS_CACHE",
        "AZURE_REDIS_CACHE_SHARD",
        "AZURE_SERVICE_BUS_NAMESPACE",
        "AZURE_SERVICE_BUS_QUEUE",
        "AZURE_SERVICE_BUS_SUBSCRIPTION",
        "AZURE_SERVICE_BUS_TOPIC",
        "AZURE_SQL_DATABASE",
        "AZURE_SQL_ELASTIC_POOL",
        "AZURE_SQL_FIREWALL",
        "AZURE_SQL_REPLICATION_LINK",
        "AZURE_SQL_RESTORE_POINT",
        "AZURE_SQL_SERVER",
        "AZURE_STORAGE_ACCOUNT",
        "AZURE_VIRTUAL_NETWORKS",
        "AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION",
        "AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE",
        "AZURE_VIRTUAL_NETWORKS_PEERING",
        "AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS",
        "AZURE_VIRTUAL_NETWORKS_ROUTE",
        "AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE",
        "AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP",
        "AZURE_VIRTUAL_NETWORKS_SECURITY_RULE",
        "AZURE_VIRTUAL_NETWORKS_SUBNET",
        "CASSANDRA_NODE",
        "CONSUL_AGENT",
        "COUCHBASE_BUCKET",
        "COUCHBASE_CLUSTER",
        "COUCHBASE_NODE",
        "COUCHBASE_QUERY_ENGINE",
        "ELASTICSEARCH_NODE",
        "F5_NODE",
        "F5_POOL",
        "F5_POOL_MEMBER",
        "F5_SYSTEM",
        "F5_VIRTUAL_SERVER",
        "GCP_APP_ENGINE_SERVICE",
        "GCP_BIG_QUERY_DATA_SET",
        "GCP_BIG_QUERY_PROJECT",
        "GCP_BIG_QUERY_TABLE",
        "GCP_CLOUD_FUNCTION",
        "GCP_CLOUD_SQL",
        "GCP_CLOUD_TASKS_QUEUE",
        "GCP_HTTP_LOAD_BALANCER",
        "GCP_INTERNAL_LOAD_BALANCER",
        "GCP_KUBERNETES_CONTAINER",
        "GCP_KUBERNETES_NODE",
        "GCP_KUBERNETES_POD",
        "GCP_PUB_SUB_SUBSCRIPTION",
        "GCP_PUB_SUB_TOPIC",
        "GCP_SPANNER_DATABASE",
        "GCP_SPANNER_INSTANCE",
        "GCP_STORAGE_BUCKET",
        "GCP_TCP_SSL_PROXY_LOAD_BALANCER",
        "GCP_VIRTUAL_MACHINE_DISK",
        "KAFKA_BROKER",
        "KAFKA_TOPIC",
        "KUBERNETES_CLUSTER",
        "MEMCACHED_INSTANCE",
        "MSSQL_INSTANCE",
        "MYSQL_NODE",
        "NA",
        "NGINX_SERVER",
        "ORACLE_DB_INSTANCE",
        "POSTGRE_SQL_INSTANCE",
        "RABBIT_MQ_CLUSTER",
        "RABBIT_MQ_EXCHANGE",
        "RABBIT_MQ_NODE",
        "RABBIT_MQ_QUEUE",
        "REDIS_INSTANCE",
        "VARNISH_INSTANCE",
    )


class EntityRelationshipEdgeDirection(sgqlc.types.Enum):
    """Values for relationship direction filter.

    Enumeration Choices:

    * `BOTH`: Traverse both inbound and outbound connections.
    * `INBOUND`: Traverse inbound connections to the source of the
      relationship.
    * `OUTBOUND`: Traverse outbound connections to the target of the
      relationship.
    """

    __schema__ = nerdgraph
    __choices__ = ("BOTH", "INBOUND", "OUTBOUND")


class EntityRelationshipEdgeType(sgqlc.types.Enum):
    """The type of the relationship.

    Enumeration Choices:

    * `BUILT_FROM`: The target entity contains the code for the source
      entity.
    * `CALLS`: The source entity calls the target entity.
    * `CONNECTS_TO`: The source entity has a connection to the target
      entity.
    * `CONSUMES`: The source entity consumes messages from a target
      kafka topic or other queue systems.
    * `CONTAINS`: The source entity contains the target entity.
    * `HOSTS`: The source entity hosts the target.
    * `IS`: The source and target entities are perspectives on the
      same thing.
    * `MANAGES`: The source entity manages the target, that represents
      a subsystem of the source.
    * `PRODUCES`: The source entity produces messages to a target
      kafka topic or other queue systems.
    * `SERVES`: The source is an Application that serves the target
      Browser application.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "BUILT_FROM",
        "CALLS",
        "CONNECTS_TO",
        "CONSUMES",
        "CONTAINS",
        "HOSTS",
        "IS",
        "MANAGES",
        "PRODUCES",
        "SERVES",
    )


class EntityRelationshipType(sgqlc.types.Enum):
    """The type of the relationship.  For details, visit [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/graphql-relationships-api-tutorial).

    Enumeration Choices:

    * `BUILT_FROM`: The source repository containing the code for the
      target
    * `CALLS`: The source entity calls the target entity.
    * `CONNECTS_TO`: The source establishes TCP connections to the
      target
    * `CONTAINS`: The source entity contains the target entity
    * `HOSTS`: The source entity hosts the target
    * `IS`: The source and target entities are perspectives on the
      same thing
    * `SERVES`: The source is an Application that serves the target
      Browser application
    * `UNKNOWN`: Type not known
    """

    __schema__ = nerdgraph
    __choices__ = (
        "BUILT_FROM",
        "CALLS",
        "CONNECTS_TO",
        "CONTAINS",
        "HOSTS",
        "IS",
        "SERVES",
        "UNKNOWN",
    )


class EntityRelationshipUserDefinedCreateOrReplaceErrorType(sgqlc.types.Enum):
    """The different error types for the
    entityRelationshipUserDefinedCreateOrReplace mutation.

    Enumeration Choices:

    * `LIMIT_EXCEEDED`: Number of user-defined relationships for a
      given entity has exceeded the limit (2000 relationships).
    * `NOT_ALLOWED`: The operation is not allowed.
    * `NOT_AUTHORIZED`: The user does not have permissions to perform
      the operation.
    """

    __schema__ = nerdgraph
    __choices__ = ("LIMIT_EXCEEDED", "NOT_ALLOWED", "NOT_AUTHORIZED")


class EntityRelationshipUserDefinedDeleteErrorType(sgqlc.types.Enum):
    """The different error types for the
    entityRelationshipUserDefinedDelete mutation.

    Enumeration Choices:

    * `NOT_AUTHORIZED`: The user does not have permissions to perform
      the operation.
    """

    __schema__ = nerdgraph
    __choices__ = ("NOT_AUTHORIZED",)


class EntitySearchCountsFacet(sgqlc.types.Enum):
    """Possible entity search count facets.

    Enumeration Choices:

    * `ACCOUNT_ID`: Facet by account id.
    * `ALERT_SEVERITY`: Facet by alert severity.
    * `DOMAIN`: Facet by entity domain.
    * `DOMAIN_TYPE`: Facet by entity domain and entity type.
    * `NAME`: Facet by entity name
    * `REPORTING`: Facet by reporting state.
    * `TYPE`: Facet by entity type.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ACCOUNT_ID",
        "ALERT_SEVERITY",
        "DOMAIN",
        "DOMAIN_TYPE",
        "NAME",
        "REPORTING",
        "TYPE",
    )


class EntitySearchQuery(sgqlc.types.Scalar):
    """A query string using Entity Search query syntax"""

    __schema__ = nerdgraph


class EntitySearchQueryBuilderDomain(sgqlc.types.Enum):
    """The domain to search

    Enumeration Choices:

    * `APM`: Any APM entity
    * `BROWSER`: Any Browser entity
    * `EXT`: Any External entity
    * `INFRA`: Any Infrastructure entity
    * `MOBILE`: Any Mobile entity
    * `SYNTH`: Any Synthetics entity
    """

    __schema__ = nerdgraph
    __choices__ = ("APM", "BROWSER", "EXT", "INFRA", "MOBILE", "SYNTH")


class EntitySearchQueryBuilderType(sgqlc.types.Enum):
    """The type of entity

    Enumeration Choices:

    * `APPLICATION`: An application
    * `DASHBOARD`: A dashboard
    * `HOST`: A host
    * `MONITOR`: A monitor
    * `WORKLOAD`: A workload
    """

    __schema__ = nerdgraph
    __choices__ = ("APPLICATION", "DASHBOARD", "HOST", "MONITOR", "WORKLOAD")


class EntitySearchSortCriteria(sgqlc.types.Enum):
    """Possible entity sorting criteria.

    Enumeration Choices:

    * `ALERT_SEVERITY`: Sort by alert severity.
    * `DOMAIN`: Sort by entity domain.
    * `MOST_RELEVANT`: Sort by relevance. Note that these results
      can't be paginated.
    * `NAME`: Sort by entity name.
    * `REPORTING`: Sort by reporting state.
    * `TYPE`: Sort by entity type.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ALERT_SEVERITY",
        "DOMAIN",
        "MOST_RELEVANT",
        "NAME",
        "REPORTING",
        "TYPE",
    )


class EntityType(sgqlc.types.Enum):
    """The specific type of entity

    Enumeration Choices:

    * `APM_APPLICATION_ENTITY`: An APM Application
    * `APM_DATABASE_INSTANCE_ENTITY`: A database instance seen by an
      APM Application
    * `APM_EXTERNAL_SERVICE_ENTITY`: An external service seen by an
      APM Application
    * `BROWSER_APPLICATION_ENTITY`: A Browser Application
    * `DASHBOARD_ENTITY`: A Dashboard entity
    * `EXTERNAL_ENTITY`: An External entity. For more information
      about defining External entities, see the [open source
      documentation](https://github.com/newrelic-experimental/entity-
      synthesis-definitions).
    * `GENERIC_ENTITY`: A Generic entity with no detailed data
    * `GENERIC_INFRASTRUCTURE_ENTITY`: An Infrastructure entity
    * `INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY`: An Infrastructure
      Integration AWS Lambda Function entity
    * `INFRASTRUCTURE_HOST_ENTITY`: An Infrastructure Host entity
    * `KEY_TRANSACTION_ENTITY`: A Key Transaction entity
    * `MOBILE_APPLICATION_ENTITY`: A Mobile Application
    * `SECURE_CREDENTIAL_ENTITY`: A Secure Credential entity
    * `SYNTHETIC_MONITOR_ENTITY`: A Synthetic Monitor entity
    * `THIRD_PARTY_SERVICE_ENTITY`: A Third Party Service entity
    * `UNAVAILABLE_ENTITY`: A entity that is unavailable
    * `WORKLOAD_ENTITY`: A Workload entity
    """

    __schema__ = nerdgraph
    __choices__ = (
        "APM_APPLICATION_ENTITY",
        "APM_DATABASE_INSTANCE_ENTITY",
        "APM_EXTERNAL_SERVICE_ENTITY",
        "BROWSER_APPLICATION_ENTITY",
        "DASHBOARD_ENTITY",
        "EXTERNAL_ENTITY",
        "GENERIC_ENTITY",
        "GENERIC_INFRASTRUCTURE_ENTITY",
        "INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY",
        "INFRASTRUCTURE_HOST_ENTITY",
        "KEY_TRANSACTION_ENTITY",
        "MOBILE_APPLICATION_ENTITY",
        "SECURE_CREDENTIAL_ENTITY",
        "SYNTHETIC_MONITOR_ENTITY",
        "THIRD_PARTY_SERVICE_ENTITY",
        "UNAVAILABLE_ENTITY",
        "WORKLOAD_ENTITY",
    )


class EpochMilliseconds(sgqlc.types.Scalar):
    """The `EpochMilliseconds` scalar represents the number of
    milliseconds since the Unix epoch
    """

    __schema__ = nerdgraph


class EpochSeconds(sgqlc.types.Scalar):
    """The `EpochSeconds` scalar represents the number of seconds since
    the Unix epoch
    """

    __schema__ = nerdgraph


class ErrorsInboxAssignErrorGroupErrorType(sgqlc.types.Enum):
    """Type of assign error group error.

    Enumeration Choices:

    * `NOT_AUTHORIZED`: The user does not have permissions to perform
      the operation.
    """

    __schema__ = nerdgraph
    __choices__ = ("NOT_AUTHORIZED",)


class ErrorsInboxErrorGroupState(sgqlc.types.Enum):
    """Current state of the error group.

    Enumeration Choices:

    * `IGNORED`: Error group is ignored.
    * `RESOLVED`: Error group is resolved.
    * `UNRESOLVED`: Error group is unresolved.
    """

    __schema__ = nerdgraph
    __choices__ = ("IGNORED", "RESOLVED", "UNRESOLVED")


class ErrorsInboxResourceType(sgqlc.types.Enum):
    """A Type of resource

    Enumeration Choices:

    * `JIRA_ISSUE`: A JIRA issue
    """

    __schema__ = nerdgraph
    __choices__ = ("JIRA_ISSUE",)


class ErrorsInboxUpdateErrorGroupStateErrorType(sgqlc.types.Enum):
    """Type of update error group state error.

    Enumeration Choices:

    * `NOT_AUTHORIZED`: The user does not have permissions to perform
      the operation.
    """

    __schema__ = nerdgraph
    __choices__ = ("NOT_AUTHORIZED",)


class EventsToMetricsErrorReason(sgqlc.types.Enum):
    """General error categories.

    Enumeration Choices:

    * `GENERAL`: Other errors.
    * `INVALID_INPUT`: Indicates some part of your submission was
      invalid.
    * `USER_NOT_AUTHORIZED`: The user attempting to submit this rule
      is not authorized to do so.
    """

    __schema__ = nerdgraph
    __choices__ = ("GENERAL", "INVALID_INPUT", "USER_NOT_AUTHORIZED")


Float = sgqlc.types.Float

ID = sgqlc.types.ID


class IncidentIntelligenceEnvironmentConsentAccountsResult(sgqlc.types.Enum):
    """Result options for account consent marking

    Enumeration Choices:

    * `ALREADY_CONSENTED`: All of the accounts have been already
      marked with consent
    * `CONSENTED`: Accounts were consented
    * `USER_NOT_AUTHORIZED_MISSING_CAPABILITY`: The user is not
      authorized to consent due to a missing capability
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ALREADY_CONSENTED",
        "CONSENTED",
        "USER_NOT_AUTHORIZED_MISSING_CAPABILITY",
    )


class IncidentIntelligenceEnvironmentCreateEnvironmentResult(sgqlc.types.Enum):
    """Result options for environment creation

    Enumeration Choices:

    * `ACCOUNTS_ALREADY_ASSOCIATED`: The specified associated accounts
      are already associated to other environments
    * `ACCOUNT_NOT_CONSENTED`: The account is not marked with consent
      for environment creation
    * `ACCOUNT_NOT_ENTITLED`: The account is not entitled to incident
      intelligence
    * `ALREADY_EXISTS`: The environment already exists and cannot be
      created again for the same parent account id tree
    * `ASSOCIATED_ACCOUNTS_NOT_AUTHORIZED`: The specified associated
      accounts are not authorized to the user
    * `CREATED`: The environment was created successfully
    * `USER_NOT_AUTHORIZED`: The user is not authorized to create an
      environment
    * `USER_NOT_AUTHORIZED_MISSING_CAPABILITY`: The user is not
      authorized to create the environment due to a missing capability
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ACCOUNTS_ALREADY_ASSOCIATED",
        "ACCOUNT_NOT_CONSENTED",
        "ACCOUNT_NOT_ENTITLED",
        "ALREADY_EXISTS",
        "ASSOCIATED_ACCOUNTS_NOT_AUTHORIZED",
        "CREATED",
        "USER_NOT_AUTHORIZED",
        "USER_NOT_AUTHORIZED_MISSING_CAPABILITY",
    )


class IncidentIntelligenceEnvironmentCurrentEnvironmentResultReason(sgqlc.types.Enum):
    """Current environment result reasoning

    Enumeration Choices:

    * `CURRENT_ACCOUNT_NOT_ENTITLED`: The current account is not
      entitled for incident intelligence
    * `ENVIRONMENT_FOUND`: The user is attached to an environment
    * `MULTIPLE_ENVIRONMENTS`: The user is attached to more than one
      environment, hence the user is authorized to more then one
      parent account that has an environment. To get a list of
      possible environments, query authorizedEnvironment and select
      one of the accounts.
    * `NO_ENVIRONMENT`: The user is not attached to any environment
    * `USER_NOT_AUTHORIZED_FOR_ACCOUNT`: The user is not authorized to
      access environments from the current account
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CURRENT_ACCOUNT_NOT_ENTITLED",
        "ENVIRONMENT_FOUND",
        "MULTIPLE_ENVIRONMENTS",
        "NO_ENVIRONMENT",
        "USER_NOT_AUTHORIZED_FOR_ACCOUNT",
    )


class IncidentIntelligenceEnvironmentDeleteEnvironmentResult(sgqlc.types.Enum):
    """Result options for environment deletion

    Enumeration Choices:

    * `ACCOUNT_NOT_ENTITLED`: The account is not entitled to incident
      intelligence
    * `DELETED`: The environment was deleted successfully
    * `DOES_NOT_EXIST`: The environment does not exists and cannot be
      deleted
    * `USER_NOT_AUTHORIZED`: The user is not authorized to delete an
      environment
    * `USER_NOT_AUTHORIZED_MISSING_CAPABILITY`: The user is not
      authorized to delete the environment due to a missing capability
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ACCOUNT_NOT_ENTITLED",
        "DELETED",
        "DOES_NOT_EXIST",
        "USER_NOT_AUTHORIZED",
        "USER_NOT_AUTHORIZED_MISSING_CAPABILITY",
    )


class IncidentIntelligenceEnvironmentDissentAccountsResult(sgqlc.types.Enum):
    """Result options for account consent marking

    Enumeration Choices:

    * `CONSENTED_ACCOUNTS_NOT_FOUND`: There are no accounts authorized
      by the user that are consented for Incident Intelligence usage
    * `DISSENTED`: Accounts were dissented
    * `USER_NOT_AUTHORIZED_MISSING_CAPABILITY`: The user is not
      authorized to dissent due to a missing capability
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CONSENTED_ACCOUNTS_NOT_FOUND",
        "DISSENTED",
        "USER_NOT_AUTHORIZED_MISSING_CAPABILITY",
    )


class IncidentIntelligenceEnvironmentEnvironmentKind(sgqlc.types.Enum):
    """Incident Intelligence environment kinds

    Enumeration Choices:

    * `CROSS_ACCOUNT_ENVIRONMENT`: The environment can contain more
      than one account so that cross-account correlation between
      accounts is supported
    * `SINGLE_ACCOUNT_ENVIRONMENT`: The environment only contains a
      single account
    """

    __schema__ = nerdgraph
    __choices__ = ("CROSS_ACCOUNT_ENVIRONMENT", "SINGLE_ACCOUNT_ENVIRONMENT")


class IncidentIntelligenceEnvironmentSupportedEnvironmentKind(sgqlc.types.Enum):
    """Which environment kinds the request will provide

    Enumeration Choices:

    * `CROSS_ACCOUNT`: Will return environments that are cross account
      (based on the parent-account and sub-account)
    * `SINGLE_AND_CROSS_ACCOUNT`: Will return environments that are
      cross account (based on the parent-account and sub-account) and
      single accounts
    """

    __schema__ = nerdgraph
    __choices__ = ("CROSS_ACCOUNT", "SINGLE_AND_CROSS_ACCOUNT")


class InstallationInstallStateType(sgqlc.types.Enum):
    """An enum that represent the installation state.

    Enumeration Choices:

    * `COMPLETED`: Defines a completed installation.
    * `STARTED`: Defines an installation that has been started.
    """

    __schema__ = nerdgraph
    __choices__ = ("COMPLETED", "STARTED")


class InstallationRawMetadata(sgqlc.types.Scalar):
    """An arbitrary key:value object containing additional data related
    to the environment where the installation occurred.
    """

    __schema__ = nerdgraph


class InstallationRecipeStatusType(sgqlc.types.Enum):
    """An enum that represents the various recipe statuses.

    Enumeration Choices:

    * `AVAILABLE`: Defines an available recipe when attempting to
      install.
    * `CANCELED`: Defines a canceled recipe when attempting to
      install.
    * `DETECTED`: Defines when New Relic instrumentation compatibility
      is detected.
    * `FAILED`: Defines a recipe that has failed during installation.
    * `INSTALLED`: Defines a recipe that has been installed.
    * `INSTALLING`: Defines a recipe currently being installed.
    * `RECOMMENDED`: Defines a recipe that has been recommended during
      installation.
    * `SKIPPED`: Defines a recipe that has been skipped during
      installation.
    * `UNSUPPORTED`: Defines a recipe that is unsupported.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "AVAILABLE",
        "CANCELED",
        "DETECTED",
        "FAILED",
        "INSTALLED",
        "INSTALLING",
        "RECOMMENDED",
        "SKIPPED",
        "UNSUPPORTED",
    )


Int = sgqlc.types.Int


class LogConfigurationsCreateDataPartitionRuleErrorType(sgqlc.types.Enum):
    """Expected error types as result of creating a new data partition
    rule.

    Enumeration Choices:

    * `DUPLICATE_DATA_PARTITION_RULE_NAME`: A data partition rule with
      the provided name already exists.
    * `INVALID_DATA_PARTITION_INPUT`: The provided data partition does
      not match the validation requirements
    * `MAX_DATA_PARTITION_RULES`: Customer has reached the maximum
      number of allowed data partition rules.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "DUPLICATE_DATA_PARTITION_RULE_NAME",
        "INVALID_DATA_PARTITION_INPUT",
        "MAX_DATA_PARTITION_RULES",
    )


class LogConfigurationsDataPartitionRuleMatchingOperator(sgqlc.types.Enum):
    """The matching method for the rule to allocate the data partition
    data. Select EQUALS to target logs that match your criteria
    exactly, or select LIKE to apply a fuzzy match.

    Enumeration Choices:

    * `EQUALS`: When applying the rule will allocate data for those
      attributes that are an exact match with the provided value.
    * `LIKE`: When applying the rule will allocate data for those
      attributes that contain the provided value.
    """

    __schema__ = nerdgraph
    __choices__ = ("EQUALS", "LIKE")


class LogConfigurationsDataPartitionRuleMutationErrorType(sgqlc.types.Enum):
    """Expected default error types as result of mutating an existing
    data partition rule.

    Enumeration Choices:

    * `INVALID_ID`: Number format error. ID should be convertible to
      int.
    * `NOT_FOUND`: Couldn't find the provided data partition rule.
    """

    __schema__ = nerdgraph
    __choices__ = ("INVALID_ID", "NOT_FOUND")


class LogConfigurationsDataPartitionRuleRetentionPolicyType(sgqlc.types.Enum):
    """The retention policy for the data partition data.

    Enumeration Choices:

    * `SECONDARY`: The alternative data retention policy, 30 days of
      data retention since the log data is ingested.
    * `STANDARD`: The maximum retention period associated with the
      account. This is determined by the customer’s
      subscription/contract with New Relic.
    """

    __schema__ = nerdgraph
    __choices__ = ("SECONDARY", "STANDARD")


class LogConfigurationsLogDataPartitionName(sgqlc.types.Scalar):
    """The name of a log data partition. Has to start with 'Log_' prefix
    and can only contain alphanumeric characters and underscores.
    """

    __schema__ = nerdgraph


class LogConfigurationsObfuscationMethod(sgqlc.types.Enum):
    """Methods for replacing obfuscated values.

    Enumeration Choices:

    * `HASH_SHA256`: Replace the matched data with a SHA256 hash.
    * `MASK`: Replace the matched data with a static value.
    """

    __schema__ = nerdgraph
    __choices__ = ("HASH_SHA256", "MASK")


class LogConfigurationsParsingRuleMutationErrorType(sgqlc.types.Enum):
    """Expected default error types as result of mutating an existing
    parsing rule.

    Enumeration Choices:

    * `INVALID_GROK`: Invalid Grok
    * `INVALID_ID`: Number format error. ID should be convertible to
      int.
    * `INVALID_NRQL`: Invalid NRQL
    * `NOT_FOUND`: Couldn't find the specified parsing rule.
    """

    __schema__ = nerdgraph
    __choices__ = ("INVALID_GROK", "INVALID_ID", "INVALID_NRQL", "NOT_FOUND")


class MetricNormalizationCustomerRuleAction(sgqlc.types.Enum):
    """The different rule actions for customers.

    Enumeration Choices:

    * `DENY_NEW_METRICS`: Deny new metrics (only for NR
      Administrators)
    * `IGNORE`: Ignore matching metrics.
    * `REPLACE`: Replace metrics.
    """

    __schema__ = nerdgraph
    __choices__ = ("DENY_NEW_METRICS", "IGNORE", "REPLACE")


class MetricNormalizationRuleAction(sgqlc.types.Enum):
    """The different rule actions.

    Enumeration Choices:

    * `DENY_NEW_METRICS`: Deny new metrics.
    * `IGNORE`: Ignore matching metrics.
    * `REPLACE`: Replace metrics.
    """

    __schema__ = nerdgraph
    __choices__ = ("DENY_NEW_METRICS", "IGNORE", "REPLACE")


class MetricNormalizationRuleErrorType(sgqlc.types.Enum):
    """The different types of errors the API can return.

    Enumeration Choices:

    * `CREATION_ERROR`: Creation Error.
    * `EDITION_ERROR`: Edition Error.
    * `RULE_NOT_FOUND`: Rule does not exist.
    * `VALIDATION_ERROR`: Validation error
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CREATION_ERROR",
        "EDITION_ERROR",
        "RULE_NOT_FOUND",
        "VALIDATION_ERROR",
    )


class Milliseconds(sgqlc.types.Scalar):
    """The `Milliseconds` scalar represents a duration in milliseconds"""

    __schema__ = nerdgraph


class Minutes(sgqlc.types.Scalar):
    """The `Minutes` scalar represents a duration in minutes"""

    __schema__ = nerdgraph


class NaiveDateTime(sgqlc.types.Scalar):
    """The `NaiveDateTime` scalar represents a date and time without a
    Time Zone. The `NaiveDateTime` appears as an ISO8601 formatted
    string.
    """

    __schema__ = nerdgraph


class NerdStorageDocument(sgqlc.types.Scalar):
    """This scalar represents a NerdStorage document."""

    __schema__ = nerdgraph


class NerdStorageScope(sgqlc.types.Enum):
    """The access level of the NerdStorage data.

    Enumeration Choices:

    * `ACCOUNT`: Account-level storage.
    * `ACTOR`: Actor-level storage.
    * `ENTITY`: Entity-level storage.
    """

    __schema__ = nerdgraph
    __choices__ = ("ACCOUNT", "ACTOR", "ENTITY")


class NerdStorageVaultActorScope(sgqlc.types.Enum):
    """NerdStorageVault data will only be visible to the User that
    created them.

    Enumeration Choices:

    * `CURRENT_USER`: Store and retrieve NerdStorageVault data for the
      current user.
    """

    __schema__ = nerdgraph
    __choices__ = ("CURRENT_USER",)


class NerdStorageVaultErrorType(sgqlc.types.Enum):
    """The possible types why an error may have occurred.

    Enumeration Choices:

    * `ACCESS_DENIED`: Indicates the client performing the operation
      does not have sufficient permission.
    * `BAD_INPUT`: Indicates the mutation has malformed input and
      needs to be corrected before the mutation can be processed.
    * `NOT_FOUND`: Indicates that the resource does not exist.
    * `VALIDATION_FAILED`: Indicates the mutation has failed
      validation.
    """

    __schema__ = nerdgraph
    __choices__ = ("ACCESS_DENIED", "BAD_INPUT", "NOT_FOUND", "VALIDATION_FAILED")


class NerdStorageVaultResultStatus(sgqlc.types.Enum):
    """Mutation result status.

    Enumeration Choices:

    * `FAILURE`: The mutation failed.
    * `SUCCESS`: The mutation succeeded.
    """

    __schema__ = nerdgraph
    __choices__ = ("FAILURE", "SUCCESS")


class NerdpackMutationErrorType(sgqlc.types.Enum):
    """Error reason for the mutation.

    Enumeration Choices:

    * `CAPABILITY_NOT_GRANTED`: The user does not have the required
      capability to execute the operation.
    * `DOWNSTREAM_ERROR`: Downstream service error.
    * `NOT_FOUND`: Resource not found for given operation.
    * `TNC_NOT_ACCEPTED`: Terms and conditions have not been accepted
      by the operation account.
    * `UNAUTHORIZED_ACCOUNT`: Account is not authorized to execute the
      operation.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CAPABILITY_NOT_GRANTED",
        "DOWNSTREAM_ERROR",
        "NOT_FOUND",
        "TNC_NOT_ACCEPTED",
        "UNAUTHORIZED_ACCOUNT",
    )


class NerdpackMutationResult(sgqlc.types.Enum):
    """Mutation result.

    Enumeration Choices:

    * `ERROR`: Error executing mutation.
    * `OK`: Successful mutation execution.
    """

    __schema__ = nerdgraph
    __choices__ = ("ERROR", "OK")


class NerdpackRemovedTagResponseType(sgqlc.types.Enum):
    """Indicates if a tag has been removed for a nerdpack

    Enumeration Choices:

    * `NOTHING_TO_REMOVE`: Indicates the tag has not been removed
    * `REMOVED`: Indicates the tag has been removed
    """

    __schema__ = nerdgraph
    __choices__ = ("NOTHING_TO_REMOVE", "REMOVED")


class NerdpackSubscriptionAccessType(sgqlc.types.Enum):
    """Type of access to the subscribed Nerdpack.

    Enumeration Choices:

    * `DIRECT`: Direct subscription with user account.
    * `INHERITED`: Master account subscription.
    """

    __schema__ = nerdgraph
    __choices__ = ("DIRECT", "INHERITED")


class NerdpackSubscriptionModel(sgqlc.types.Enum):
    """Type that define the rules for account subscription.

    Enumeration Choices:

    * `CORE`: Product nerdpacks displayed to everybody, no
      subscription required .
    * `GLOBAL`: Any NR user can subscribe to the nerdpack.
    * `OWNER_AND_ALLOWED`: Only owner, master and allowed accounts can
      subscribe to the nerdpack.
    """

    __schema__ = nerdgraph
    __choices__ = ("CORE", "GLOBAL", "OWNER_AND_ALLOWED")


class NerdpackTagName(sgqlc.types.Scalar):
    """A string representing a nerdpack tag."""

    __schema__ = nerdgraph


class NerdpackVersionFilterFallback(sgqlc.types.Enum):
    """Fallback version to return if no version matches with the given
    filters.

    Enumeration Choices:

    * `LATEST_SEMVER`: Latest version (semver).
    """

    __schema__ = nerdgraph
    __choices__ = ("LATEST_SEMVER",)


class Nr1CatalogAlertConditionType(sgqlc.types.Enum):
    """Possible types of configured alert conditions

    Enumeration Choices:

    * `BASELINE`: A baseline alert condition
    * `STATIC`: A static alert condition
    """

    __schema__ = nerdgraph
    __choices__ = ("BASELINE", "STATIC")


class Nr1CatalogInstallPlanDestination(sgqlc.types.Enum):
    """Possible destinations for the install plan target

    Enumeration Choices:

    * `APPLICATION`: Application (APM) install
    * `CLOUD`: Cloud provider install
    * `HOST`: Host install
    * `KUBERNETES`: Kubernetes install
    * `UNKNOWN`: Unknown install - special case when the target where
      the install takes place is unknown (such as guided install)
    """

    __schema__ = nerdgraph
    __choices__ = ("APPLICATION", "CLOUD", "HOST", "KUBERNETES", "UNKNOWN")


class Nr1CatalogInstallPlanDirectiveMode(sgqlc.types.Enum):
    """Possible modes for an install plan directive

    Enumeration Choices:

    * `LINK`: Directs the installation toward an external link
    * `NERDLET`: Directs the installation to open a stacked Nerdlet to
      perform the installation
    * `TARGETED`: Directs the installation toward a specific target
    """

    __schema__ = nerdgraph
    __choices__ = ("LINK", "NERDLET", "TARGETED")


class Nr1CatalogInstallPlanOperatingSystem(sgqlc.types.Enum):
    """Possible types for the install plan operating system

    Enumeration Choices:

    * `DARWIN`: Mac operating system
    * `LINUX`: Linux operating system
    * `WINDOWS`: Windows operating system
    """

    __schema__ = nerdgraph
    __choices__ = ("DARWIN", "LINUX", "WINDOWS")


class Nr1CatalogInstallPlanTargetType(sgqlc.types.Enum):
    """Possible types for the install plan target

    Enumeration Choices:

    * `AGENT`: Agent install
    * `INTEGRATION`: Integration install
    * `ON_HOST_INTEGRATION`: On host integration install
    * `UNKNOWN`: Unknown install - special case when the target where
      the install takes place is unknown (such as guided install)
    """

    __schema__ = nerdgraph
    __choices__ = ("AGENT", "INTEGRATION", "ON_HOST_INTEGRATION", "UNKNOWN")


class Nr1CatalogInstallerType(sgqlc.types.Enum):
    """Type of installer

    Enumeration Choices:

    * `INSTALL_PLAN`: Install plan
    """

    __schema__ = nerdgraph
    __choices__ = ("INSTALL_PLAN",)


class Nr1CatalogMutationResult(sgqlc.types.Enum):
    """Outcome of the mutation

    Enumeration Choices:

    * `ERROR`: The mutation failed
    * `OK`: The mutation was processed successfully
    """

    __schema__ = nerdgraph
    __choices__ = ("ERROR", "OK")


class Nr1CatalogNerdpackVisibility(sgqlc.types.Enum):
    """Possible visibilities for the Nerdpack

    Enumeration Choices:

    * `GLOBAL`: Indicates the Nerdpack is available globally across
      all accounts
    * `OWNER_AND_ALLOWED`: Indicates the Nerdpack is only available to
      the owning and allowed accounts
    """

    __schema__ = nerdgraph
    __choices__ = ("GLOBAL", "OWNER_AND_ALLOWED")


class Nr1CatalogQuickstartAlertConditionType(sgqlc.types.Enum):
    """Possible types of configured alert conditions

    Enumeration Choices:

    * `BASELINE`: A baseline alert condition
    * `OUTLIER`: An outlier alert condition
    * `STATIC`: A static alert condition
    """

    __schema__ = nerdgraph
    __choices__ = ("BASELINE", "OUTLIER", "STATIC")


class Nr1CatalogRawNerdletState(sgqlc.types.Scalar):
    """Represents JSON nerdlet state data"""

    __schema__ = nerdgraph


class Nr1CatalogRenderFormat(sgqlc.types.Enum):
    """Supported rendering formats for data

    Enumeration Choices:

    * `MARKDOWN`: Renders the output in Markdown
    """

    __schema__ = nerdgraph
    __choices__ = ("MARKDOWN",)


class Nr1CatalogSearchComponentType(sgqlc.types.Enum):
    """Possible component types to filter the search

    Enumeration Choices:

    * `ALERTS`: Filter search results that contain alerts
    * `APPS`: Filter search results that contain apps
    * `DASHBOARDS`: Filter search results that contain dashboards
    * `DATA_SOURCES`: Filter search results that contain data sources
    * `VISUALIZATIONS`: Filter search results that contain
      visualizations
    """

    __schema__ = nerdgraph
    __choices__ = ("ALERTS", "APPS", "DASHBOARDS", "DATA_SOURCES", "VISUALIZATIONS")


class Nr1CatalogSearchResultType(sgqlc.types.Enum):
    """Possible search result types used to filter search results

    Enumeration Choices:

    * `ALERT_POLICY_TEMPLATE`: Filter search results by alert policy
      templates
    * `DASHBOARD_TEMPLATE`: Filter search results by dashboard
      templates
    * `DATA_SOURCE`: Filter search results by data sources
    * `NERDPACK`: Filter search results by nerdpacks
    * `QUICKSTART`: Filter search results by quickstarts
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ALERT_POLICY_TEMPLATE",
        "DASHBOARD_TEMPLATE",
        "DATA_SOURCE",
        "NERDPACK",
        "QUICKSTART",
    )


class Nr1CatalogSearchSortOption(sgqlc.types.Enum):
    """Possible options to sort search results

    Enumeration Choices:

    * `ALPHABETICAL`: Sort the search results alphabetically
    * `POPULARITY`: Sort the search results by most popular
    * `RELEVANCE`: Sort the search results by the most relevant to the
      search query
    * `REVERSE_ALPHABETICAL`: Sort the search results alphabetically
      in reverse order
    """

    __schema__ = nerdgraph
    __choices__ = ("ALPHABETICAL", "POPULARITY", "RELEVANCE", "REVERSE_ALPHABETICAL")


class Nr1CatalogSubmitMetadataErrorType(sgqlc.types.Enum):
    """The type of error that occurred during the mutation when
    submitting metadata

    Enumeration Choices:

    * `NERDPACK_NOT_FOUND`: The Nerdpack cannot be found
    * `SERVER_ERROR`: Something went wrong in the service
    * `UNAUTHORIZED`: The user does not have permission to update the
      metadata for the Nerdpack
    * `UNSUPPORTED_TYPE`: The type of the Nerdpack is not supported in
      the New Relic One Catalog
    * `VALIDATION_FAILED`: The submitted metadata is not valid and
      needs to be corrected to be accepted
    """

    __schema__ = nerdgraph
    __choices__ = (
        "NERDPACK_NOT_FOUND",
        "SERVER_ERROR",
        "UNAUTHORIZED",
        "UNSUPPORTED_TYPE",
        "VALIDATION_FAILED",
    )


class Nr1CatalogSupportLevel(sgqlc.types.Enum):
    """Possible levels of support

    Enumeration Choices:

    * `COMMUNITY`: Community supported
    * `ENTERPRISE`: Enterprise supported
    * `NEW_RELIC`: New Relic supported
    * `VERIFIED`: Partner supported
    """

    __schema__ = nerdgraph
    __choices__ = ("COMMUNITY", "ENTERPRISE", "NEW_RELIC", "VERIFIED")


class Nr1CatalogSupportedEntityTypesMode(sgqlc.types.Enum):
    """Possible modes for supported entity types

    Enumeration Choices:

    * `ALL`: Indicates that all entity types are supported
    * `NONE`: Indicates that no entity types are supported
    * `SPECIFIC`: Indicates that a specific set of entity types are
      supported
    """

    __schema__ = nerdgraph
    __choices__ = ("ALL", "NONE", "SPECIFIC")


class NrdbRawResults(sgqlc.types.Scalar):
    """This scalar represents the raw nrql query results as returned from
    NRDB. It is a `Map` of `String` keys to values.  The shape of
    these objects reflect the query used to generate them, the
    contents of the objects is not part of the GraphQL schema.
    """

    __schema__ = nerdgraph


class NrdbResult(sgqlc.types.Scalar):
    """This scalar represents a NRDB Result. It is a `Map` of `String`
    keys to values.  The shape of these objects reflect the query used
    to generate them, the contents of the objects is not part of the
    GraphQL schema.
    """

    __schema__ = nerdgraph


class Nrql(sgqlc.types.Scalar):
    """This scalar represents a NRQL query string.  See the [NRQL
    Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-
    query-language/nrql-resources/nrql-syntax-components-functions)
    for more information about NRQL syntax.
    """

    __schema__ = nerdgraph


class NrqlDropRulesAction(sgqlc.types.Enum):
    """Specifies how data matching the drop rule's NRQL string should be
    processed.

    Enumeration Choices:

    * `DROP_ATTRIBUTES`: This action will strip the attributes
      specified in the SELECT clause of the NRQL string for all events
      that match the associated NRQL string.
    * `DROP_ATTRIBUTES_FROM_METRIC_AGGREGATES`: This action will strip
      the attributes specified in the SELECT clause of the NRQL string
      for metric aggregates. The event type must be Metric.
    * `DROP_DATA`: This action will drop all data that match the
      associated NRQL string. That string MUST be a `SELECT *`.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "DROP_ATTRIBUTES",
        "DROP_ATTRIBUTES_FROM_METRIC_AGGREGATES",
        "DROP_DATA",
    )


class NrqlDropRulesErrorReason(sgqlc.types.Enum):
    """General error categories.

    Enumeration Choices:

    * `FEATURE_FLAG_DISABLED`: Targeted account does not have access
      to this feature.
    * `GENERAL`: Other errors.
    * `INVALID_INPUT`: Something about the request was invalid.
    * `INVALID_QUERY`: The provided NRQL string was ill formed or used
      invalid features.
    * `RULE_NOT_FOUND`: The drop rule being acted upon did not exist.
    * `USER_NOT_AUTHORIZED`: The current user does not have authority
      to perform the given action.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "FEATURE_FLAG_DISABLED",
        "GENERAL",
        "INVALID_INPUT",
        "INVALID_QUERY",
        "RULE_NOT_FOUND",
        "USER_NOT_AUTHORIZED",
    )


class OpenInstallationCategory(sgqlc.types.Enum):
    """Categorization of a Quickstart

    Enumeration Choices:

    * `COMMUNITY`: COMMUNITY category
    * `NEWRELIC`: NEWRELIC category
    * `VERIFIED`: Verified Observbility Pack
    """

    __schema__ = nerdgraph
    __choices__ = ("COMMUNITY", "NEWRELIC", "VERIFIED")


class OpenInstallationInstallPlanDestination(sgqlc.types.Enum):
    """Install plan destination

    Enumeration Choices:

    * `APPLICATION`: Application (APM) install
    * `CLOUD`: Cloud provider install
    * `HOST`: Host install
    * `KUBERNETES`: Kubsernetes install
    * `UNKNOWN`: Unknown install - special case when the target where
      the install takes place is unknown (such as guided install)
    """

    __schema__ = nerdgraph
    __choices__ = ("APPLICATION", "CLOUD", "HOST", "KUBERNETES", "UNKNOWN")


class OpenInstallationInstallPlanDirectiveMode(sgqlc.types.Enum):
    """Install plan directive mode

    Enumeration Choices:

    * `GUIDED_INSTALL`: Guided Install UI experience
    * `LINK`: Opens an external link
    * `NERDLET`: Opens a stacked Nerdlet to perform an install
      experience
    * `TARGETED_INSTALL`: Targeted Install UI experience
    """

    __schema__ = nerdgraph
    __choices__ = ("GUIDED_INSTALL", "LINK", "NERDLET", "TARGETED_INSTALL")


class OpenInstallationInstallPlanTargetType(sgqlc.types.Enum):
    """Install plan target type

    Enumeration Choices:

    * `AGENT`: Agent install
    * `INTEGRATION`: Integration install
    * `NPM`: Network performance monitoring install
    * `OH_HOST_INTEGRATION`: On host integration install
    * `PIXIE`: Pixie Install
    * `UNKNOWN`: Unknown install - special case when the target where
      the install takes place is unknown (such as guided install)
    """

    __schema__ = nerdgraph
    __choices__ = (
        "AGENT",
        "INTEGRATION",
        "NPM",
        "OH_HOST_INTEGRATION",
        "PIXIE",
        "UNKNOWN",
    )


class OpenInstallationInstallableQuickstartComponentType(sgqlc.types.Enum):
    """Component types of a Quickstart

    Enumeration Choices:

    * `ALERT_CONDITION`: Alert condition component type
    * `DASHBOARD`: Dashboard component type
    """

    __schema__ = nerdgraph
    __choices__ = ("ALERT_CONDITION", "DASHBOARD")


class OpenInstallationJson(sgqlc.types.Scalar):
    """The `JSON` scalar type represents JSON values as specified by
    [ECMA-404](http://www.ecma-
    international.org/publications/files/ECMA-ST/ECMA-404.pdf).
    """

    __schema__ = nerdgraph


class OpenInstallationObservabiiltyPackComponentType(sgqlc.types.Enum):
    """Component types of an Observability Pack

    Enumeration Choices:

    * `ALERT`: Alert component types
    * `DASHBOARD`: Dashboard component type
    * `DOCUMENTATION`: Documentation component type
    * `OBSERVABILITY_PACK`: Observability Pack component type
    * `SYNTHETIC_MONITOR`: Synthetic Monitor component type
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ALERT",
        "DASHBOARD",
        "DOCUMENTATION",
        "OBSERVABILITY_PACK",
        "SYNTHETIC_MONITOR",
    )


class OpenInstallationObservabilityPackAlertType(sgqlc.types.Enum):
    """Type of Alert

    Enumeration Choices:

    * `BASELINE`: Baseline alert
    * `OUTLIER`: Outlier alert
    * `STATIC`: Static alert
    """

    __schema__ = nerdgraph
    __choices__ = ("BASELINE", "OUTLIER", "STATIC")


class OpenInstallationObservabilityPackInstallErrorType(sgqlc.types.Enum):
    """Expected error types that can be returned when attempting to
    install an Observability Pack

    Enumeration Choices:

    * `ALERT_CONDITION_CREATE_ERROR`: Alert condition create error
    * `ALERT_POLICY_CREATE_ERROR`: Alert policy create error
    * `DASHBOARD_CREATE_ERROR`: Dashboard create error
    * `OBSERVABILITY_PACK_NOT_FOUND`: Observability Pack not found
      error
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ALERT_CONDITION_CREATE_ERROR",
        "ALERT_POLICY_CREATE_ERROR",
        "DASHBOARD_CREATE_ERROR",
        "OBSERVABILITY_PACK_NOT_FOUND",
    )


class OpenInstallationObservabilityPackLevel(sgqlc.types.Enum):
    """Level categorization of Observability Pack

    Enumeration Choices:

    * `COMMUNITY`: Community Observability Pack
    * `NEWRELIC`: New Relic Observability Pack
    * `VERIFIED`: Verified Observbility Pack
    """

    __schema__ = nerdgraph
    __choices__ = ("COMMUNITY", "NEWRELIC", "VERIFIED")


class OpenInstallationOperatingSystem(sgqlc.types.Enum):
    """Operating System of target environment

    Enumeration Choices:

    * `DARWIN`: MacOS operating system
    * `LINUX`: Linux-based operating system
    * `WINDOWS`: Windows operating system
    """

    __schema__ = nerdgraph
    __choices__ = ("DARWIN", "LINUX", "WINDOWS")


class OpenInstallationPlatform(sgqlc.types.Enum):
    """Operating System distribution

    Enumeration Choices:

    * `AMAZON`: Amazon Linux operating system
    * `CENTOS`: CentOS operating system
    * `DEBIAN`: Debian operating system
    * `REDHAT`: RedHat Enterprise Linux operating system
    * `SUSE`: SUSE operating system
    * `UBUNTU`: Ubuntu operating system
    """

    __schema__ = nerdgraph
    __choices__ = ("AMAZON", "CENTOS", "DEBIAN", "REDHAT", "SUSE", "UBUNTU")


class OpenInstallationPlatformFamily(sgqlc.types.Enum):
    """Operating System distribution family

    Enumeration Choices:

    * `DEBIAN`: Debian distribution family
    * `RHEL`: RHEL distribution family
    * `SUSE`: openSUSE distribution family
    """

    __schema__ = nerdgraph
    __choices__ = ("DEBIAN", "RHEL", "SUSE")


class OpenInstallationQuickstartAlertType(sgqlc.types.Enum):
    """Type of Alert

    Enumeration Choices:

    * `BASELINE`: Baseline alert
    * `OUTLIER`: Outlier alert
    * `STATIC`: Static alert
    """

    __schema__ = nerdgraph
    __choices__ = ("BASELINE", "OUTLIER", "STATIC")


class OpenInstallationQuickstartComponentType(sgqlc.types.Enum):
    """Component types of a Quickstart

    Enumeration Choices:

    * `ALERT`: Alert component type
    * `ALERT_CONDITION`: Alert condition component type
    * `ALERT_POLICY`: Alert policy component type
    * `DASHBOARD`: Dashboard component type
    * `DOCUMENTATION`: Documentation component type
    * `QUICKSTART`: Quickstart component type
    * `SYNTHETIC_MONITOR`: Synthetic Monitor component type
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ALERT",
        "ALERT_CONDITION",
        "ALERT_POLICY",
        "DASHBOARD",
        "DOCUMENTATION",
        "QUICKSTART",
        "SYNTHETIC_MONITOR",
    )


class OpenInstallationQuickstartInstallErrorType(sgqlc.types.Enum):
    """Expected error types that can be returned when attempting to
    install a Quickstart

    Enumeration Choices:

    * `ALERT_CONDITION_CREATE_ERROR`: Alert condition create error
    * `ALERT_POLICY_CREATE_ERROR`: Alert policy create error
    * `COMPONENT_NOT_FOUND`: Component not found error
    * `DASHBOARD_CREATE_ERROR`: Dashboard create error
    * `QUICKSTART_NOT_FOUND`: Quickstart not found error
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ALERT_CONDITION_CREATE_ERROR",
        "ALERT_POLICY_CREATE_ERROR",
        "COMPONENT_NOT_FOUND",
        "DASHBOARD_CREATE_ERROR",
        "QUICKSTART_NOT_FOUND",
    )


class OpenInstallationQuickstartLevel(sgqlc.types.Enum):
    """Level categorization of Quickstart

    Enumeration Choices:

    * `COMMUNITY`: Community Quickstart
    * `NEWRELIC`: New Relic Quickstart
    * `VERIFIED`: Verified Quickstart
    """

    __schema__ = nerdgraph
    __choices__ = ("COMMUNITY", "NEWRELIC", "VERIFIED")


class OpenInstallationStability(sgqlc.types.Enum):
    """Stability level of recipe

    Enumeration Choices:

    * `DISABLED`: Recipe is disabled
    * `EXPERIMENTAL`: Recipe is experimental
    * `STABLE`: Recipe is stable
    """

    __schema__ = nerdgraph
    __choices__ = ("DISABLED", "EXPERIMENTAL", "STABLE")


class OpenInstallationSuccessLinkType(sgqlc.types.Enum):
    """Success link type

    Enumeration Choices:

    * `EXPLORER`: Explorer link
    * `HOST`: Host entity link
    """

    __schema__ = nerdgraph
    __choices__ = ("EXPLORER", "HOST")


class OpenInstallationTargetType(sgqlc.types.Enum):
    """Installation target type

    Enumeration Choices:

    * `APPLICATION`: APM agent installation
    * `CLOUD`: Cloud provider installation
    * `DOCKER`: Docker container installation
    * `HOST`: Bare metal, virtual machine, or host-based installation
    * `KUBERNETES`: Kubernetes installation
    * `SERVERLESS`: Serverless installation
    """

    __schema__ = nerdgraph
    __choices__ = ("APPLICATION", "CLOUD", "DOCKER", "HOST", "KUBERNETES", "SERVERLESS")


class OrganizationProvisioningUnit(sgqlc.types.Enum):
    """Types of units for entitlements

    Enumeration Choices:

    * `ADDITIONAL_DAYS_OF_RETENTION`: Additional days of data
      retention
    * `APPS`: Mobile unit of measure of the number of mobile
      applications
    * `APP_TRANSACTIONS_IN_MILLIONS`: Proactive Detection unit of
      measure
    * `CHECKS`: Synthetics unit of measure
    * `COMPUTE_UNIT`: APM unit of measure of the number of compute
      units
    * `DATA_RETENTION_IN_DAYS`: The time that we retain data in days
    * `DPM`: Metrics unit of measure
    * `EVENTS_IN_MILLIONS`: Insight events in multiples of millions
    * `GB_INGESTED`: NR1 Data unit of measure
    * `GB_PER_DAY`: Logs unit of measure
    * `GRACE_PERIOD`: Grace period in days before customer is billed
      for users
    * `HOSTS`: APM unit of measure for hosts
    * `INCIDENT_EVENTS`: AI unit of measure
    * `INGESTED_EVENTS`: Serverless unit of measure
    * `MONTHLY_ACTIVE_USERS`: Mobile unit of measure
    * `PAGE_VIEWS`: Browser unit of measure
    * `PROVISIONED_USERS`: NR1 Users unit of measure
    * `SPANS_IN_MILLIONS`: Traces unit of measure
    * `USERS`: Mobile unit of measure of the number of users
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ADDITIONAL_DAYS_OF_RETENTION",
        "APPS",
        "APP_TRANSACTIONS_IN_MILLIONS",
        "CHECKS",
        "COMPUTE_UNIT",
        "DATA_RETENTION_IN_DAYS",
        "DPM",
        "EVENTS_IN_MILLIONS",
        "GB_INGESTED",
        "GB_PER_DAY",
        "GRACE_PERIOD",
        "HOSTS",
        "INCIDENT_EVENTS",
        "INGESTED_EVENTS",
        "MONTHLY_ACTIVE_USERS",
        "PAGE_VIEWS",
        "PROVISIONED_USERS",
        "SPANS_IN_MILLIONS",
        "USERS",
    )


class OrganizationUpdateErrorType(sgqlc.types.Enum):
    """An enum specifying the specific types of errors that may be
    returned.

    Enumeration Choices:

    * `INVALID_RECORD`: Returned when the attributes provided for an
      object are invalid.
    * `NOT_AUTHORIZED`: Returned when the actor has insufficient
      capabilties to fulfill the request.
    """

    __schema__ = nerdgraph
    __choices__ = ("INVALID_RECORD", "NOT_AUTHORIZED")


class PixieLinkPixieProjectErrorType(sgqlc.types.Enum):
    """The errors that can be returned when linking a New Relic account
    and Pixie project

    Enumeration Choices:

    * `ALREADY_LINKED`: There is already a linked Pixie project for
      this New Relic account.
    * `AUTO_CREATION_NOT_SUPPORTED`: Automatic Pixie project creation
      not supported.
    * `INVALID_NEWRELIC_ACCOUNT`: The provided account is not valid.
    * `INVALID_PIXIE_API_KEY`: The provided Pixie API key is not
      valid.
    * `UNLINKING_NOT_SUPPORTED`: Unlinking is not supported.
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ALREADY_LINKED",
        "AUTO_CREATION_NOT_SUPPORTED",
        "INVALID_NEWRELIC_ACCOUNT",
        "INVALID_PIXIE_API_KEY",
        "UNLINKING_NOT_SUPPORTED",
    )


class PixieRecordPixieTosAcceptanceErrorType(sgqlc.types.Enum):
    """The errors that can be returned when recording the Pixie terms of
    service acceptance

    Enumeration Choices:

    * `MISSING_DATA`: Some required data to record the Pixie terms of
      service acceptance is missing
    """

    __schema__ = nerdgraph
    __choices__ = ("MISSING_DATA",)


class ReferenceEntityCreateRepositoryErrorType(sgqlc.types.Enum):
    """List of all potential error types that an entity create operation
    might return.

    Enumeration Choices:

    * `FORBIDDEN`: Forbidden request
    * `INVALID_INPUT`: Invalid input
    """

    __schema__ = nerdgraph
    __choices__ = ("FORBIDDEN", "INVALID_INPUT")


class RegionScope(sgqlc.types.Enum):
    """Enumeration Choices:

    * `GLOBAL`: Do not filter by region
    * `IN_REGION`: Filter by region
    """

    __schema__ = nerdgraph
    __choices__ = ("GLOBAL", "IN_REGION")


class Seconds(sgqlc.types.Scalar):
    """The `Seconds` scalar represents a duration in seconds"""

    __schema__ = nerdgraph


class SecureValue(sgqlc.types.Scalar):
    """The `SecureValue` scalar represents a secure value, ie a password,
    an API key, etc.
    """

    __schema__ = nerdgraph


class SemVer(sgqlc.types.Scalar):
    """The `SemVer` scalar represents a version designation conforming to
    the SemVer specification.
    """

    __schema__ = nerdgraph


class ServiceLevelObjectiveRollingTimeWindowUnit(sgqlc.types.Enum):
    """The rolling time window units.

    Enumeration Choices:

    * `DAY`: Day.
    """

    __schema__ = nerdgraph
    __choices__ = ("DAY",)


class SortBy(sgqlc.types.Enum):
    """The `SortBy` enum is for designating sort order.

    Enumeration Choices:

    * `ASC`: Sort in ascending order.
    * `DESC`: Sort in descending order.
    """

    __schema__ = nerdgraph
    __choices__ = ("ASC", "DESC")


String = sgqlc.types.String


class SyntheticMonitorStatus(sgqlc.types.Enum):
    """Enumeration Choices:

    * `DELETED`None
    * `DISABLED`None
    * `ENABLED`None
    * `FAULTY`None
    * `MUTED`None
    * `PAUSED`None
    """

    __schema__ = nerdgraph
    __choices__ = ("DELETED", "DISABLED", "ENABLED", "FAULTY", "MUTED", "PAUSED")


class SyntheticMonitorType(sgqlc.types.Enum):
    """The types of Synthetic Monitors.

    Enumeration Choices:

    * `BROWSER`None
    * `CERT_CHECK`None
    * `SCRIPT_API`None
    * `SCRIPT_BROWSER`None
    * `SIMPLE`None
    * `STEP_MONITOR`None
    """

    __schema__ = nerdgraph
    __choices__ = (
        "BROWSER",
        "CERT_CHECK",
        "SCRIPT_API",
        "SCRIPT_BROWSER",
        "SIMPLE",
        "STEP_MONITOR",
    )


class SyntheticsMonitorCreateErrorType(sgqlc.types.Enum):
    """Types of errors that can be returned from a create monitor request

    Enumeration Choices:

    * `BAD_REQUEST`: Received a request missing required fields or
      containing invalid data
    * `INTERNAL_SERVER_ERROR`: An unknown error occured while
      processing request to mutate monitor
    * `NOT_FOUND`: Monitor not found for given guid (monitor does not
      exist on account or has already been deleted)
    * `TAGGING_ERROR`: Monitor tags were not udpated.
    * `UNAUTHORIZED`: User does not have authorization to perform
      monitor mutation.
    * `UNKNOWN_ERROR`: An unknown error occurred while processing
      request to create monitor
    """

    __schema__ = nerdgraph
    __choices__ = (
        "BAD_REQUEST",
        "INTERNAL_SERVER_ERROR",
        "NOT_FOUND",
        "TAGGING_ERROR",
        "UNAUTHORIZED",
        "UNKNOWN_ERROR",
    )


class SyntheticsMonitorPeriod(sgqlc.types.Enum):
    """Enum of monitor period types

    Enumeration Choices:

    * `EVERY_10_MINUTES`: 10 minute monitor period
    * `EVERY_12_HOURS`: 12 hour monitor period (720 minutes)
    * `EVERY_15_MINUTES`: 15 minute monitor period
    * `EVERY_30_MINUTES`: 30 minute monitor period
    * `EVERY_5_MINUTES`: 5 minute monitor period
    * `EVERY_6_HOURS`: 6 hour monitor period (360 minutes)
    * `EVERY_DAY`: 1 day monitor period (1440 minutes)
    * `EVERY_HOUR`: 1 hour monitor period (60 minutes)
    * `EVERY_MINUTE`: 1 minute monitor period
    """

    __schema__ = nerdgraph
    __choices__ = (
        "EVERY_10_MINUTES",
        "EVERY_12_HOURS",
        "EVERY_15_MINUTES",
        "EVERY_30_MINUTES",
        "EVERY_5_MINUTES",
        "EVERY_6_HOURS",
        "EVERY_DAY",
        "EVERY_HOUR",
        "EVERY_MINUTE",
    )


class SyntheticsMonitorStatus(sgqlc.types.Enum):
    """Run state of the monitor

    Enumeration Choices:

    * `DISABLED`: Monitor disabled runs status of a monitor
    * `ENABLED`: Enabled status of a monitor
    * `MUTED`: Alerts muted status of a monitor
    """

    __schema__ = nerdgraph
    __choices__ = ("DISABLED", "ENABLED", "MUTED")


class SyntheticsMonitorUpdateErrorType(sgqlc.types.Enum):
    """Types of errors that can be returned from a Monitor mutation
    request

    Enumeration Choices:

    * `BAD_REQUEST`: Received a request missing required fields or
      containing invalid data
    * `INTERNAL_SERVER_ERROR`: An unknown error occured while
      processing request to mutate monitor
    * `NOT_FOUND`: Monitor not found for given guid (monitor does not
      exist on account or has already been deleted)
    * `SCRIPT_ERROR`: An error occurred while updating monitor script
    * `TAGGING_ERROR`: Monitor tags were not udpated.
    * `UNAUTHORIZED`: User does not have authorization to perform
      monitor mutation.
    * `UNKNOWN_ERROR`: An unknown error occurred while processing
      request to update monitor
    """

    __schema__ = nerdgraph
    __choices__ = (
        "BAD_REQUEST",
        "INTERNAL_SERVER_ERROR",
        "NOT_FOUND",
        "SCRIPT_ERROR",
        "TAGGING_ERROR",
        "UNAUTHORIZED",
        "UNKNOWN_ERROR",
    )


class SyntheticsPrivateLocationMutationErrorType(sgqlc.types.Enum):
    """Types of errors that can be returned from a Private Location
    mutation request

    Enumeration Choices:

    * `BAD_REQUEST`: Received a request missing required fields or
      containing invalid data
    * `INTERNAL_SERVER_ERROR`: An unknown error occured while
      processing request to purge specified private location job queue
    * `NOT_FOUND`: Private location not found for key (private
      location does not exist on account or has already been deleted)
    * `UNAUTHORIZED`: User does not have authorization to purge job
      queue for specified private location
    """

    __schema__ = nerdgraph
    __choices__ = ("BAD_REQUEST", "INTERNAL_SERVER_ERROR", "NOT_FOUND", "UNAUTHORIZED")


class SyntheticsStepType(sgqlc.types.Enum):
    """enum of of script step types

    Enumeration Choices:

    * `ASSERT_ELEMENT`: Assert on element accessed by ID, CSS, or
      x-path
    * `ASSERT_MODAL`: Assert on modal exists
    * `ASSERT_TEXT`: Assert on text accessed by ID, CSS, or x-path
    * `ASSERT_TITLE`: Assert on title of page
    * `CLICK_ELEMENT`: Click on an element by ID, CSS, or x-path
    * `DISMISS_MODAL`: Preform actions on a modal to dismiss
    * `DOUBLE_CLICK_ELEMENT`: Double click on an element by ID, CSS,
      or x-path
    * `HOVER_ELEMENT`: Hover over an element by x-path
    * `NAVIGATE`: Navigate to the specified url
    * `SECURE_TEXT_ENTRY`: Input secure credential into element
      accessed by ID, CSS, or x-path
    * `SELECT_ELEMENT`: Select a dropdown element by value, text, ID,
      CSS, or x-path
    * `TEXT_ENTRY`: Input text into element accessed by ID, CSS, or
      x-path
    """

    __schema__ = nerdgraph
    __choices__ = (
        "ASSERT_ELEMENT",
        "ASSERT_MODAL",
        "ASSERT_TEXT",
        "ASSERT_TITLE",
        "CLICK_ELEMENT",
        "DISMISS_MODAL",
        "DOUBLE_CLICK_ELEMENT",
        "HOVER_ELEMENT",
        "NAVIGATE",
        "SECURE_TEXT_ENTRY",
        "SELECT_ELEMENT",
        "TEXT_ENTRY",
    )


class TaggingMutationErrorType(sgqlc.types.Enum):
    """The different types of errors the API can return.

    Enumeration Choices:

    * `CONCURRENT_TASK_EXCEPTION`: Too many concurrent tasks for the
      same GUID are being sent and we cannot process. Please serialize
      your requests for the given GUID.
    * `INVALID_DOMAIN_TYPE`: Domain Type invalid. The decoded domain
      type from the provided GUID is not valid. Please provide a
      correct GUID.
    * `INVALID_ENTITY_GUID`: We could not decode the provided GUID.
      Entity guid needs to be base64 encoded.
    * `INVALID_KEY`: The tag key is not valid. Char length has been
      reached, contains a disallowed character(eg :) or is empty
    * `INVALID_VALUE`: The tag value is not valid. Char length has
      been reached, contains a disallowed character(eg :) or is empty
    * `NOT_FOUND`: The given GUID or tag you're looking for does not
      exist.
    * `NOT_PERMITTED`: You've attempted to do something your
      Domain/EntityType is not permitted to do. Its also possible that
      an api key is required.
    * `TOO_MANY_CHARS_QUERY_FILTER`: One of the query filters exceeds
      the character limit.
    * `TOO_MANY_TAG_KEYS`: The given entity has reached its tag key
      count limit. You will need to delete existing tags for the given
      GUID before continuing.
    * `TOO_MANY_TAG_VALUES`: The given entity has reached its tag
      value count limit. You will need to delete existing values for
      the given GUID before continuing.
    * `UPDATE_WILL_BE_DELAYED`: The changes will be reflected in the
      entity with some delay
    """

    __schema__ = nerdgraph
    __choices__ = (
        "CONCURRENT_TASK_EXCEPTION",
        "INVALID_DOMAIN_TYPE",
        "INVALID_ENTITY_GUID",
        "INVALID_KEY",
        "INVALID_VALUE",
        "NOT_FOUND",
        "NOT_PERMITTED",
        "TOO_MANY_CHARS_QUERY_FILTER",
        "TOO_MANY_TAG_KEYS",
        "TOO_MANY_TAG_VALUES",
        "UPDATE_WILL_BE_DELAYED",
    )


class WhatsNewContentType(sgqlc.types.Enum):
    """Represents the different types of content available when searching
    by news.

    Enumeration Choices:

    * `ANNOUNCEMENT`: News the content of which is type of
      announcement.
    """

    __schema__ = nerdgraph
    __choices__ = ("ANNOUNCEMENT",)


class WorkloadGroupRemainingEntitiesRuleBy(sgqlc.types.Enum):
    """Indicates by which field the remaining entities rule should be
    grouped.

    Enumeration Choices:

    * `ENTITY_TYPE`: Group the remaining entities rule by entity type.
    * `NONE`: Do not apply any grouping to the remaining entities
      rule.
    """

    __schema__ = nerdgraph
    __choices__ = ("ENTITY_TYPE", "NONE")


class WorkloadResultingGroupType(sgqlc.types.Enum):
    """Represents the type of the rule that the resulting group of
    entities belongs to.

    Enumeration Choices:

    * `REGULAR_GROUP`: The rule considers the entities within a
      specific group in the workload.
    * `REMAINING_ENTITIES`: The rule considers all the entities within
      the workload that aren’t evaluated in any other rule.
    """

    __schema__ = nerdgraph
    __choices__ = ("REGULAR_GROUP", "REMAINING_ENTITIES")


class WorkloadRollupStrategy(sgqlc.types.Enum):
    """Represents the rollup strategy that is applied to a group of
    entities.

    Enumeration Choices:

    * `BEST_STATUS_WINS`: The group status matches the less critical
      status of all belonging entities.
    * `WORST_STATUS_WINS`: The group status matches the most critical
      status of all belonging entities.
    """

    __schema__ = nerdgraph
    __choices__ = ("BEST_STATUS_WINS", "WORST_STATUS_WINS")


class WorkloadRuleThresholdType(sgqlc.types.Enum):
    """Represents the type of the threshold defined for a rule.

    Enumeration Choices:

    * `FIXED`: The worst status is rolled up only after a certain
      number of entities within the workload are not operational.
    * `PERCENTAGE`: The worst status is rolled up only after a certain
      percentage of entities within the workload are not operational.
    """

    __schema__ = nerdgraph
    __choices__ = ("FIXED", "PERCENTAGE")


class WorkloadStatusSource(sgqlc.types.Enum):
    """Indicates where the status value derives from.

    Enumeration Choices:

    * `ROLLUP_RULE`: Refers to the result of an automatic rule defined
      for a workload.
    * `STATIC`: Refers to a static status defined for a workload.
    * `UNKNOWN`: Refers to an undetermined status source.
    * `WORKLOAD`: Refers to the override policy that is applied to a
      set of partial results within a workload. Any static status
      always overrides any other status values calculated
      automatically. Otherwise, the worst status of the partial
      results is rolled up.
    """

    __schema__ = nerdgraph
    __choices__ = ("ROLLUP_RULE", "STATIC", "UNKNOWN", "WORKLOAD")


class WorkloadStatusValue(sgqlc.types.Enum):
    """The status of the workload, which is derived from the static and
    the automatic statuses configured. Any static status always
    overrides any other status values calculated automatically.

    Enumeration Choices:

    * `DEGRADED`: The status of the workload is degraded.
    * `DISRUPTED`: The status of the workload is disrupted.
    * `OPERATIONAL`: The status of the workload is operational.
    * `UNKNOWN`: The status of the workload is unknown.
    """

    __schema__ = nerdgraph
    __choices__ = ("DEGRADED", "DISRUPTED", "OPERATIONAL", "UNKNOWN")


class WorkloadStatusValueInput(sgqlc.types.Enum):
    """The status value. Any static status always overrides any other
    status values calculated automatically.

    Enumeration Choices:

    * `DEGRADED`: The status of the workload is degraded.
    * `DISRUPTED`: The status of the workload is disrupted.
    * `OPERATIONAL`: The status of the workload is operational.
    """

    __schema__ = nerdgraph
    __choices__ = ("DEGRADED", "DISRUPTED", "OPERATIONAL")


########################################################################
# Input Objects
########################################################################
class AccountManagementCreateInput(sgqlc.types.Input):
    """Attributes for creating an account."""

    __schema__ = nerdgraph
    __field_names__ = ("name",)
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the account."""


class AccountManagementUpdateInput(sgqlc.types.Input):
    """The attributes for updating an account."""

    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """The ID for the account being updated."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The new account name."""


class AgentApplicationSettingsApmConfigInput(sgqlc.types.Input):
    """Provides fields to set general APM application settings."""

    __schema__ = nerdgraph
    __field_names__ = ("apdex_target", "use_server_side_config")
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")
    """The desired target for the APDEX measurement of this application."""

    use_server_side_config = sgqlc.types.Field(
        Boolean, graphql_name="useServerSideConfig"
    )
    """Sets if installed agents should override local settings with ones
    set here.
    """


class AgentApplicationSettingsBrowserConfigInput(sgqlc.types.Input):
    """Provides fields to set general browser application settings."""

    __schema__ = nerdgraph
    __field_names__ = ("apdex_target",)
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")
    """The desired target for the APDEX measurement of this application."""


class AgentApplicationSettingsErrorCollectorInput(sgqlc.types.Input):
    """The error collector captures information about uncaught exceptions
    and sends them to New Relic for viewing. For more information
    about what these settings do and which ones are applicable for
    your application, please see docs.newrelic.com for more
    information about agent configuration for your language agent.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "enabled",
        "expected_error_classes",
        "expected_error_codes",
        "ignored_error_classes",
        "ignored_error_codes",
    )
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Enable error collector"""

    expected_error_classes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="expectedErrorClasses",
    )
    """Prevents specified exception classes from affecting error rate or
    Apdex score while still reporting the errors to APM.
    """

    expected_error_codes = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AgentApplicationSettingsErrorCollectorHttpStatus)
        ),
        graphql_name="expectedErrorCodes",
    )
    """A comma-separated list comprised of individual and dashed ranges
    of HTTP status codes to be marked as expected and thus prevented
    from affecting error rate or Apdex score.
    """

    ignored_error_classes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="ignoredErrorClasses",
    )
    """Specified exception class names will be ignored and will not
    affect error rate or Apdex score, or be reported to APM.
    """

    ignored_error_codes = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AgentApplicationSettingsErrorCollectorHttpStatus)
        ),
        graphql_name="ignoredErrorCodes",
    )
    """A comma-separated list comprised of individual and dashed ranges
    of HTTP status codes that should not be treated as errors.
    """


class AgentApplicationSettingsSlowSqlInput(sgqlc.types.Input):
    """In APM, when transaction traces are collected, there may be
    additional Slow query data available.
    """

    __schema__ = nerdgraph
    __field_names__ = ("enabled",)
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Whether or not slow_sql is enabled."""


class AgentApplicationSettingsThreadProfilerInput(sgqlc.types.Input):
    """Settings for the thread profiler."""

    __schema__ = nerdgraph
    __field_names__ = ("enabled",)
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Is thread profiling enabled for this application?"""


class AgentApplicationSettingsTracerTypeInput(sgqlc.types.Input):
    """Input object for setting the type of tracing performed."""

    __schema__ = nerdgraph
    __field_names__ = ("value",)
    value = sgqlc.types.Field(AgentApplicationSettingsTracer, graphql_name="value")
    """The type of tracing being done."""


class AgentApplicationSettingsTransactionTracerInput(sgqlc.types.Input):
    """Fields related to transaction traces and data collection for
    traces.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "capture_memcache_keys",
        "enabled",
        "explain_enabled",
        "explain_threshold_type",
        "explain_threshold_value",
        "log_sql",
        "record_sql",
        "stack_trace_threshold",
        "transaction_threshold_type",
        "transaction_threshold_value",
    )
    capture_memcache_keys = sgqlc.types.Field(
        Boolean, graphql_name="captureMemcacheKeys"
    )
    """Enable or disable the capture of memcache keys from transaction
    traces.
    """

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """If true, this enables the Transaction Tracer feature, enabling
    collection of transaction traces.
    """

    explain_enabled = sgqlc.types.Field(Boolean, graphql_name="explainEnabled")
    """If true, enables the collection of explain plans in transaction
    traces. This setting will also apply to explain plans in slow SQL
    traces if slow_sql.explain_enabled is not set separately.
    """

    explain_threshold_type = sgqlc.types.Field(
        AgentApplicationSettingsThresholdTypeEnum, graphql_name="explainThresholdType"
    )
    """Relevant only when explain_enabled is true. Can be set to
    automatic configuration (APDEX_F) or manual (see
    explainThresholdValue).
    """

    explain_threshold_value = sgqlc.types.Field(
        Seconds, graphql_name="explainThresholdValue"
    )
    """Threshold (in seconds) above which the agent will collect explain
    plans. Relevant only when explain_enabled is true and
    explainThresholdType is set to VALUE.
    """

    log_sql = sgqlc.types.Field(Boolean, graphql_name="logSql")
    """Set to true to enable logging of queries to the agent log file
    instead of uploading to New Relic. Queries are logged using the
    record_sql mode.
    """

    record_sql = sgqlc.types.Field(
        AgentApplicationSettingsRecordSqlEnum, graphql_name="recordSql"
    )
    """Obfuscation level for SQL queries reported in transaction trace
    nodes.
    """

    stack_trace_threshold = sgqlc.types.Field(
        Seconds, graphql_name="stackTraceThreshold"
    )
    """Specify a threshold in seconds. The agent includes stack traces in
    transaction trace nodes when the stack trace duration exceeds this
    threshold.
    """

    transaction_threshold_type = sgqlc.types.Field(
        AgentApplicationSettingsThresholdTypeEnum,
        graphql_name="transactionThresholdType",
    )
    """Relevant only when TransactionTracer is enabled. Can be set to
    automatic configuration (APDEX_F) or manual (see
    TransactionThresholdValue).
    """

    transaction_threshold_value = sgqlc.types.Field(
        Seconds, graphql_name="transactionThresholdValue"
    )
    """Threshold (in seconds) that transactions with a duration longer
    than this threshold are eligible for transaction traces.  Relevant
    only when Transaction Tracer is enabled and
    transaction_threshold_type is set to VALUE.
    """


class AgentApplicationSettingsUpdateInput(sgqlc.types.Input):
    """The new settings to use - leave blank any settings you do not wish
    to modify.  While all settings can be specified here some may not
    affect your installed agents; depending the language agent and the
    current version installed. Note: not all settings of your agent
    are available to be set server-side.   Please see
    docs.newrelic.com for more information about the capabilities of
    individual agents.  [Go agent
    configuration](https://docs.newrelic.com/docs/agents/go-
    agent/configuration/go-agent-configuration/)  [Java agent
    configuration](https://docs.newrelic.com/docs/agents/java-
    agent/configuration/java-agent-configuration-config-file/)  [.Net
    agent configuration](https://docs.newrelic.com/docs/agents/net-
    agent/configuration/net-agent-configuration/)  [nodejs agent
    configuration](https://docs.newrelic.com/docs/agents/nodejs-
    agent/installation-configuration/nodejs-agent-configuration/)
    [PHP agent
    configuration](https://docs.newrelic.com/docs/agents/php-
    agent/configuration/php-agent-configuration/)  [Python agent
    configuration](https://docs.newrelic.com/docs/agents/python-
    agent/configuration/python-agent-configuration/)  [Ruby agent
    configuration](https://docs.newrelic.com/docs/agents/ruby-
    agent/configuration/ruby-agent-configuration/)
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "alias",
        "apm_config",
        "browser_config",
        "error_collector",
        "name",
        "slow_sql",
        "thread_profiler",
        "tracer_type",
        "transaction_tracer",
    )
    alias = sgqlc.types.Field(String, graphql_name="alias")
    """The new name for the application"""

    apm_config = sgqlc.types.Field(
        AgentApplicationSettingsApmConfigInput, graphql_name="apmConfig"
    )
    """Provides fields to set general APM application settings."""

    browser_config = sgqlc.types.Field(
        AgentApplicationSettingsBrowserConfigInput, graphql_name="browserConfig"
    )
    """Provides fields to set general Browser application settings."""

    error_collector = sgqlc.types.Field(
        AgentApplicationSettingsErrorCollectorInput, graphql_name="errorCollector"
    )
    """The error collector captures information about uncaught exceptions
    and sends them to New Relic for viewing.
    """

    name = sgqlc.types.Field(String, graphql_name="name")
    """DEPRECATED: Use `alias` to set new name for the application."""

    slow_sql = sgqlc.types.Field(
        AgentApplicationSettingsSlowSqlInput, graphql_name="slowSql"
    )
    """In APM, when transaction traces are collected, there may be
    additional Slow query data available.
    """

    thread_profiler = sgqlc.types.Field(
        AgentApplicationSettingsThreadProfilerInput, graphql_name="threadProfiler"
    )
    """Settings for the thread profiler."""

    tracer_type = sgqlc.types.Field(
        AgentApplicationSettingsTracerTypeInput, graphql_name="tracerType"
    )
    """Input object for setting the type of tracing performed."""

    transaction_tracer = sgqlc.types.Field(
        AgentApplicationSettingsTransactionTracerInput, graphql_name="transactionTracer"
    )
    """Transaction Tracer settings related to APM applications."""


class AgentEnvironmentFilter(sgqlc.types.Input):
    """A filter that can be applied to filter results."""

    __schema__ = nerdgraph
    __field_names__ = ("contains", "does_not_contain", "equals", "starts_with")
    contains = sgqlc.types.Field(String, graphql_name="contains")
    """A string to filter results that includes this string anywhere.
    Case insensitive.
    """

    does_not_contain = sgqlc.types.Field(String, graphql_name="doesNotContain")
    """A string to filter out results that includes this string anywhere.
    Case insensitive.
    """

    equals = sgqlc.types.Field(String, graphql_name="equals")
    """A string to filter results that are exactly as the string
    provided. Case sensitive.
    """

    starts_with = sgqlc.types.Field(String, graphql_name="startsWith")
    """A string to filter results that starts with this string. Case
    insensitive.
    """


class AiDecisionsAllInput(sgqlc.types.Input):
    """Input type for All expression"""

    __schema__ = nerdgraph
    __field_names__ = ("children",)
    children = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiDecisionsRuleExpressionInput"))
        ),
        graphql_name="children",
    )
    """Children expressions."""


class AiDecisionsAndInput(sgqlc.types.Input):
    """Input type for And expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsRuleExpressionInput"), graphql_name="left"
    )
    """Left child expression."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsRuleExpressionInput"), graphql_name="right"
    )
    """Right child expression."""


class AiDecisionsAttributeExistsInput(sgqlc.types.Input):
    """Input type for AttributeExists expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident",)
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""


class AiDecisionsCategoricalClusteringInput(sgqlc.types.Input):
    """Input type for CategoricalClustering expression"""

    __schema__ = nerdgraph
    __field_names__ = ("threshold",)
    threshold = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="threshold")
    """Threshold for comparison."""


class AiDecisionsFixedContainsInput(sgqlc.types.Input):
    """Input type for FixedContains expression"""

    __schema__ = nerdgraph
    __field_names__ = ("container", "value")
    container = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="container"
    )
    """Incident selector to be used in comparison."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedCosineDistanceInput(sgqlc.types.Input):
    """Input type for FixedCosineDistance expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "max_distance", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    max_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="maxDistance"
    )
    """Maximum distance threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedEndsWithInput(sgqlc.types.Input):
    """Input type for FixedEndsWith expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedEqualInput(sgqlc.types.Input):
    """Input type for FixedEqual expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedFuzzyScoreInput(sgqlc.types.Input):
    """Input type for FixedFuzzyScore expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "min_distance", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    min_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="minDistance"
    )
    """Minimum distance threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedFuzzyWuzzyAdaptiveRatioInput(sgqlc.types.Input):
    """Input type for FixedFuzzyWuzzyAdaptiveRatio expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "min_similarity", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    min_similarity = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="minSimilarity"
    )
    """Minimum similarity threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedFuzzyWuzzyPartialRatioInput(sgqlc.types.Input):
    """Input type for FixedFuzzyWuzzyPartialRatio expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "min_similarity", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    min_similarity = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="minSimilarity"
    )
    """Minimum similarity threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedFuzzyWuzzyRatioInput(sgqlc.types.Input):
    """Input type for FixedFuzzyWuzzyRatio expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "min_similarity", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    min_similarity = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="minSimilarity"
    )
    """Minimum similarity threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedFuzzyWuzzyTokenSetRatioInput(sgqlc.types.Input):
    """Input type for FixedFuzzyWuzzyTokenSetRatio expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "min_similarity", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    min_similarity = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="minSimilarity"
    )
    """Minimum similarity threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedGreaterThanInput(sgqlc.types.Input):
    """Input type for FixedGreaterThan expression"""

    __schema__ = nerdgraph
    __field_names__ = ("compared", "incident")
    compared = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="compared")
    """Value to be used in comparison."""

    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""


class AiDecisionsFixedGreaterThanOrEqualInput(sgqlc.types.Input):
    """Input type for FixedGreaterThanOrEqual expression"""

    __schema__ = nerdgraph
    __field_names__ = ("compared", "incident")
    compared = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="compared")
    """Value to be used in comparison."""

    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""


class AiDecisionsFixedHammingDistanceInput(sgqlc.types.Input):
    """Input type for FixedHammingDistance expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "max_distance", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    max_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="maxDistance"
    )
    """Maximum distance threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedJaccardDistanceInput(sgqlc.types.Input):
    """Input type for FixedJaccardDistance expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "max_distance", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    max_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="maxDistance"
    )
    """Maximum distance threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedJaroWinklerInput(sgqlc.types.Input):
    """Input type for FixedJaroWinkler expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "min_distance", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    min_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="minDistance"
    )
    """Minimum distance threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedLessThanInput(sgqlc.types.Input):
    """Input type for FixedLessThan expression"""

    __schema__ = nerdgraph
    __field_names__ = ("compared", "incident")
    compared = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="compared")
    """Value to be used in comparison."""

    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""


class AiDecisionsFixedLessThanOrEqualInput(sgqlc.types.Input):
    """Input type for FixedLessThanOrEqual expression"""

    __schema__ = nerdgraph
    __field_names__ = ("compared", "incident")
    compared = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="compared")
    """Value to be used in comparison."""

    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""


class AiDecisionsFixedLevenshteinInput(sgqlc.types.Input):
    """Input type for FixedLevenshtein expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "max_distance", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    max_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="maxDistance"
    )
    """Maximum distance threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedLongestCommonSubsequenceDistanceInput(sgqlc.types.Input):
    """Input type for FixedLongestCommonSubsequenceDistance expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "max_distance", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    max_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="maxDistance"
    )
    """Maximum distance threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedNumericalEqualInput(sgqlc.types.Input):
    """Input type for FixedNumericalEqual expression"""

    __schema__ = nerdgraph
    __field_names__ = ("compared", "incident")
    compared = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="compared")
    """Value to be used in comparison."""

    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""


class AiDecisionsFixedRegularExpressionInput(sgqlc.types.Input):
    """Input type for FixedRegularExpression expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedSoundExInput(sgqlc.types.Input):
    """Input type for FixedSoundEx expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "min_distance", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    min_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="minDistance"
    )
    """Minimum distance threshold."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsFixedStartsWithInput(sgqlc.types.Input):
    """Input type for FixedStartsWith expression"""

    __schema__ = nerdgraph
    __field_names__ = ("incident", "value")
    incident = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsIncidentObjectInput"), graphql_name="incident"
    )
    """Incident selector to be used in comparison."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsIncidentObjectInput(sgqlc.types.Input):
    """Represents an attribute of an incident."""

    __schema__ = nerdgraph
    __field_names__ = ("attribute", "select")
    attribute = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attribute"
    )
    """Attribute to process of selected incident."""

    select = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentSelect), graphql_name="select"
    )
    """Incident to select."""


class AiDecisionsNotInput(sgqlc.types.Input):
    """Input type for Not expression"""

    __schema__ = nerdgraph
    __field_names__ = ("child",)
    child = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsRuleExpressionInput"), graphql_name="child"
    )
    """Child expression."""


class AiDecisionsOneInput(sgqlc.types.Input):
    """Input type for One expression"""

    __schema__ = nerdgraph
    __field_names__ = ("children",)
    children = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiDecisionsRuleExpressionInput"))
        ),
        graphql_name="children",
    )
    """Children expressions."""


class AiDecisionsOrInput(sgqlc.types.Input):
    """Input type for Or expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsRuleExpressionInput"), graphql_name="left"
    )
    """Left child expression."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsRuleExpressionInput"), graphql_name="right"
    )
    """Right child expression."""


class AiDecisionsOverrideConfigurationInput(sgqlc.types.Input):
    """Configuration for overriding properties of issues created by
    merges.
    """

    __schema__ = nerdgraph
    __field_names__ = ("description", "priority", "title")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Description merged issues should take."""

    priority = sgqlc.types.Field(AiDecisionsIssuePriority, graphql_name="priority")
    """Priority merged issues should take."""

    title = sgqlc.types.Field(String, graphql_name="title")
    """Title merged issues should take."""


class AiDecisionsRelativeCommonPrefixInput(sgqlc.types.Input):
    """Input type for RelativeCommonPrefix expression"""

    __schema__ = nerdgraph
    __field_names__ = ("value",)
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsRelativeContainsInput(sgqlc.types.Input):
    """Input type for RelativeContains expression"""

    __schema__ = nerdgraph
    __field_names__ = ("contained", "container")
    contained = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="contained"
    )
    """Incident selector to be used in comparison."""

    container = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="container"
    )
    """Incident selector to be used in comparison."""


class AiDecisionsRelativeCosineDistanceInput(sgqlc.types.Input):
    """Input type for RelativeCosineDistance expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "max_distance", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    max_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="maxDistance"
    )
    """Maximum distance threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeEndsWithInput(sgqlc.types.Input):
    """Input type for RelativeEndsWith expression"""

    __schema__ = nerdgraph
    __field_names__ = ("contained", "container")
    contained = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="contained"
    )
    """Incident selector to be used in comparison."""

    container = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="container"
    )
    """Incident selector to be used in comparison."""


class AiDecisionsRelativeEqualInput(sgqlc.types.Input):
    """Input type for RelativeEqual expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeFuzzyScoreInput(sgqlc.types.Input):
    """Input type for RelativeFuzzyScore expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "min_distance", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    min_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="minDistance"
    )
    """Minimum distance threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeFuzzyWuzzyAdaptiveRatioInput(sgqlc.types.Input):
    """Input type for RelativeFuzzyWuzzyAdaptiveRatio expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "min_similarity", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    min_similarity = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="minSimilarity"
    )
    """Minimum similarity threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeFuzzyWuzzyPartialRatioInput(sgqlc.types.Input):
    """Input type for RelativeFuzzyWuzzyPartialRatio expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "min_similarity", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    min_similarity = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="minSimilarity"
    )
    """Minimum similarity threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeFuzzyWuzzyRatioInput(sgqlc.types.Input):
    """Input type for RelativeFuzzyWuzzyRatio expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "min_similarity", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    min_similarity = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="minSimilarity"
    )
    """Minimum similarity threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeFuzzyWuzzyTokenSetRatioInput(sgqlc.types.Input):
    """Input type for RelativeFuzzyWuzzyTokenSetRatio expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "min_similarity", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    min_similarity = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="minSimilarity"
    )
    """Minimum similarity threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeGreaterThanInput(sgqlc.types.Input):
    """Input type for RelativeGreaterThan expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeGreaterThanOrEqualInput(sgqlc.types.Input):
    """Input type for RelativeGreaterThanOrEqual expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeHammingDistanceInput(sgqlc.types.Input):
    """Input type for RelativeHammingDistance expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "max_distance", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    max_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="maxDistance"
    )
    """Maximum distance threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeJaccardDistanceInput(sgqlc.types.Input):
    """Input type for RelativeJaccardDistance expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "max_distance", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    max_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="maxDistance"
    )
    """Maximum distance threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeJaroWinklerInput(sgqlc.types.Input):
    """Input type for RelativeJaroWinkler expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "min_distance", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    min_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="minDistance"
    )
    """Minimum distance threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeLessThanInput(sgqlc.types.Input):
    """Input type for RelativeLessThan expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeLessThanOrEqualInput(sgqlc.types.Input):
    """Input type for RelativeLessThanOrEqual expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeLevenshteinInput(sgqlc.types.Input):
    """Input type for RelativeLevenshtein expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "max_distance", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    max_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="maxDistance"
    )
    """Maximum distance threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeLongestCommonSubsequenceDistanceInput(sgqlc.types.Input):
    """Input type for RelativeLongestCommonSubsequenceDistance expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "max_distance", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    max_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="maxDistance"
    )
    """Maximum distance threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeNumericalEqualInput(sgqlc.types.Input):
    """Input type for RelativeNumericalEqual expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeRegularExpressionInput(sgqlc.types.Input):
    """Input type for RelativeRegularExpression expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "right", "value")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value to be used in comparison."""


class AiDecisionsRelativeSoundExInput(sgqlc.types.Input):
    """Input type for RelativeSoundEx expression"""

    __schema__ = nerdgraph
    __field_names__ = ("left", "min_distance", "right")
    left = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="left"
    )
    """Left operand of comparison."""

    min_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="minDistance"
    )
    """Minimum distance threshold."""

    right = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="right"
    )
    """Right operand of comparison."""


class AiDecisionsRelativeStartsWithInput(sgqlc.types.Input):
    """Input type for RelativeStartsWith expression"""

    __schema__ = nerdgraph
    __field_names__ = ("contained", "container")
    contained = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="contained"
    )
    """Incident selector to be used in comparison."""

    container = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentObjectInput), graphql_name="container"
    )
    """Incident selector to be used in comparison."""


class AiDecisionsRelativeTopologicallyDependentInput(sgqlc.types.Input):
    """Input type for RelativeTopologicallyDependent expression"""

    __schema__ = nerdgraph
    __field_names__ = (
        "from_",
        "graph_id",
        "max_hops",
        "required_attributes",
        "required_classes",
        "to",
    )
    from_ = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),
        graphql_name="from",
    )
    """From Vertex Id."""

    graph_id = sgqlc.types.Field(ID, graphql_name="graphId")
    """Graph Id."""

    max_hops = sgqlc.types.Field(Int, graphql_name="maxHops")
    """Maximum number of hops"""

    required_attributes = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="requiredAttributes",
    )
    """Required Vertex Attributes"""

    required_classes = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiDecisionsVertexClass))
        ),
        graphql_name="requiredClasses",
    )
    """Required Vertex Classes"""

    to = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),
        graphql_name="to",
    )
    """To Vertex Id."""


class AiDecisionsRuleBlueprint(sgqlc.types.Input):
    """Blueprint for rule creation."""

    __schema__ = nerdgraph
    __field_names__ = (
        "correlation_window_length",
        "creator",
        "description",
        "min_correlation_threshold",
        "name",
        "override_configuration",
        "rule_expression",
        "rule_type",
        "source",
    )
    correlation_window_length = sgqlc.types.Field(
        Milliseconds, graphql_name="correlationWindowLength"
    )
    """Length of the window in which incidents are compared."""

    creator = sgqlc.types.Field(String, graphql_name="creator")
    """Creator of rule."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of rule."""

    min_correlation_threshold = sgqlc.types.Field(
        Int, graphql_name="minCorrelationThreshold"
    )
    """Number of correlations within a window required to merge issues."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of rule."""

    override_configuration = sgqlc.types.Field(
        AiDecisionsOverrideConfigurationInput, graphql_name="overrideConfiguration"
    )
    """Configuration to allow rule to override issue properties."""

    rule_expression = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsRuleExpressionInput"),
        graphql_name="ruleExpression",
    )
    """Expression to use to compare incidents."""

    rule_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleType), graphql_name="ruleType"
    )
    """Type of rule."""

    source = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleSource), graphql_name="source"
    )
    """Creation source of rule."""


class AiDecisionsRuleExpressionInput(sgqlc.types.Input):
    """Rule expression input"""

    __schema__ = nerdgraph
    __field_names__ = (
        "all",
        "and_",
        "attribute_exists",
        "categorical_clustering",
        "fixed_contains",
        "fixed_cosine_distance",
        "fixed_ends_with",
        "fixed_equal",
        "fixed_fuzzy_score",
        "fixed_fuzzy_wuzzy_adaptive_ratio",
        "fixed_fuzzy_wuzzy_partial_ratio",
        "fixed_fuzzy_wuzzy_ratio",
        "fixed_fuzzy_wuzzy_token_set_ratio",
        "fixed_greater_than",
        "fixed_greater_than_or_equal",
        "fixed_hamming_distance",
        "fixed_jaccard_distance",
        "fixed_jaro_winkler",
        "fixed_less_than",
        "fixed_less_than_or_equal",
        "fixed_levenshtein",
        "fixed_longest_common_subsequence_distance",
        "fixed_numerical_equal",
        "fixed_regular_expression",
        "fixed_sound_ex",
        "fixed_starts_with",
        "not_",
        "one",
        "or_",
        "relative_common_prefix",
        "relative_contains",
        "relative_cosine_distance",
        "relative_ends_with",
        "relative_equal",
        "relative_fuzzy_score",
        "relative_fuzzy_wuzzy_adaptive_ratio",
        "relative_fuzzy_wuzzy_partial_ratio",
        "relative_fuzzy_wuzzy_ratio",
        "relative_fuzzy_wuzzy_token_set_ratio",
        "relative_greater_than",
        "relative_greater_than_or_equal",
        "relative_hamming_distance",
        "relative_jaccard_distance",
        "relative_jaro_winkler",
        "relative_less_than",
        "relative_less_than_or_equal",
        "relative_levenshtein",
        "relative_longest_common_subsequence_distance",
        "relative_numerical_equal",
        "relative_regular_expression",
        "relative_sound_ex",
        "relative_starts_with",
        "relative_topologically_dependent",
        "whole_cosine_distance",
        "whole_jaccard_similarity",
    )
    all = sgqlc.types.Field(AiDecisionsAllInput, graphql_name="all")
    """Input type for All expression"""

    and_ = sgqlc.types.Field(AiDecisionsAndInput, graphql_name="and")
    """Input type for And expression"""

    attribute_exists = sgqlc.types.Field(
        AiDecisionsAttributeExistsInput, graphql_name="attributeExists"
    )
    """Input type for AttributeExists expression"""

    categorical_clustering = sgqlc.types.Field(
        AiDecisionsCategoricalClusteringInput, graphql_name="categoricalClustering"
    )
    """Input type for CategoricalClustering expression"""

    fixed_contains = sgqlc.types.Field(
        AiDecisionsFixedContainsInput, graphql_name="fixedContains"
    )
    """Input type for FixedContains expression"""

    fixed_cosine_distance = sgqlc.types.Field(
        AiDecisionsFixedCosineDistanceInput, graphql_name="fixedCosineDistance"
    )
    """Input type for FixedCosineDistance expression"""

    fixed_ends_with = sgqlc.types.Field(
        AiDecisionsFixedEndsWithInput, graphql_name="fixedEndsWith"
    )
    """Input type for FixedEndsWith expression"""

    fixed_equal = sgqlc.types.Field(
        AiDecisionsFixedEqualInput, graphql_name="fixedEqual"
    )
    """Input type for FixedEqual expression"""

    fixed_fuzzy_score = sgqlc.types.Field(
        AiDecisionsFixedFuzzyScoreInput, graphql_name="fixedFuzzyScore"
    )
    """Input type for FixedFuzzyScore expression"""

    fixed_fuzzy_wuzzy_adaptive_ratio = sgqlc.types.Field(
        AiDecisionsFixedFuzzyWuzzyAdaptiveRatioInput,
        graphql_name="fixedFuzzyWuzzyAdaptiveRatio",
    )
    """Input type for FixedFuzzyWuzzyAdaptiveRatio expression"""

    fixed_fuzzy_wuzzy_partial_ratio = sgqlc.types.Field(
        AiDecisionsFixedFuzzyWuzzyPartialRatioInput,
        graphql_name="fixedFuzzyWuzzyPartialRatio",
    )
    """Input type for FixedFuzzyWuzzyPartialRatio expression"""

    fixed_fuzzy_wuzzy_ratio = sgqlc.types.Field(
        AiDecisionsFixedFuzzyWuzzyRatioInput, graphql_name="fixedFuzzyWuzzyRatio"
    )
    """Input type for FixedFuzzyWuzzyRatio expression"""

    fixed_fuzzy_wuzzy_token_set_ratio = sgqlc.types.Field(
        AiDecisionsFixedFuzzyWuzzyTokenSetRatioInput,
        graphql_name="fixedFuzzyWuzzyTokenSetRatio",
    )
    """Input type for FixedFuzzyWuzzyTokenSetRatio expression"""

    fixed_greater_than = sgqlc.types.Field(
        AiDecisionsFixedGreaterThanInput, graphql_name="fixedGreaterThan"
    )
    """Input type for FixedGreaterThan expression"""

    fixed_greater_than_or_equal = sgqlc.types.Field(
        AiDecisionsFixedGreaterThanOrEqualInput, graphql_name="fixedGreaterThanOrEqual"
    )
    """Input type for FixedGreaterThanOrEqual expression"""

    fixed_hamming_distance = sgqlc.types.Field(
        AiDecisionsFixedHammingDistanceInput, graphql_name="fixedHammingDistance"
    )
    """Input type for FixedHammingDistance expression"""

    fixed_jaccard_distance = sgqlc.types.Field(
        AiDecisionsFixedJaccardDistanceInput, graphql_name="fixedJaccardDistance"
    )
    """Input type for FixedJaccardDistance expression"""

    fixed_jaro_winkler = sgqlc.types.Field(
        AiDecisionsFixedJaroWinklerInput, graphql_name="fixedJaroWinkler"
    )
    """Input type for FixedJaroWinkler expression"""

    fixed_less_than = sgqlc.types.Field(
        AiDecisionsFixedLessThanInput, graphql_name="fixedLessThan"
    )
    """Input type for FixedLessThan expression"""

    fixed_less_than_or_equal = sgqlc.types.Field(
        AiDecisionsFixedLessThanOrEqualInput, graphql_name="fixedLessThanOrEqual"
    )
    """Input type for FixedLessThanOrEqual expression"""

    fixed_levenshtein = sgqlc.types.Field(
        AiDecisionsFixedLevenshteinInput, graphql_name="fixedLevenshtein"
    )
    """Input type for FixedLevenshtein expression"""

    fixed_longest_common_subsequence_distance = sgqlc.types.Field(
        AiDecisionsFixedLongestCommonSubsequenceDistanceInput,
        graphql_name="fixedLongestCommonSubsequenceDistance",
    )
    """Input type for FixedLongestCommonSubsequenceDistance expression"""

    fixed_numerical_equal = sgqlc.types.Field(
        AiDecisionsFixedNumericalEqualInput, graphql_name="fixedNumericalEqual"
    )
    """Input type for FixedNumericalEqual expression"""

    fixed_regular_expression = sgqlc.types.Field(
        AiDecisionsFixedRegularExpressionInput, graphql_name="fixedRegularExpression"
    )
    """Input type for FixedRegularExpression expression"""

    fixed_sound_ex = sgqlc.types.Field(
        AiDecisionsFixedSoundExInput, graphql_name="fixedSoundEx"
    )
    """Input type for FixedSoundEx expression"""

    fixed_starts_with = sgqlc.types.Field(
        AiDecisionsFixedStartsWithInput, graphql_name="fixedStartsWith"
    )
    """Input type for FixedStartsWith expression"""

    not_ = sgqlc.types.Field(AiDecisionsNotInput, graphql_name="not")
    """Input type for Not expression"""

    one = sgqlc.types.Field(AiDecisionsOneInput, graphql_name="one")
    """Input type for One expression"""

    or_ = sgqlc.types.Field(AiDecisionsOrInput, graphql_name="or")
    """Input type for Or expression"""

    relative_common_prefix = sgqlc.types.Field(
        AiDecisionsRelativeCommonPrefixInput, graphql_name="relativeCommonPrefix"
    )
    """Input type for RelativeCommonPrefix expression"""

    relative_contains = sgqlc.types.Field(
        AiDecisionsRelativeContainsInput, graphql_name="relativeContains"
    )
    """Input type for RelativeContains expression"""

    relative_cosine_distance = sgqlc.types.Field(
        AiDecisionsRelativeCosineDistanceInput, graphql_name="relativeCosineDistance"
    )
    """Input type for RelativeCosineDistance expression"""

    relative_ends_with = sgqlc.types.Field(
        AiDecisionsRelativeEndsWithInput, graphql_name="relativeEndsWith"
    )
    """Input type for RelativeEndsWith expression"""

    relative_equal = sgqlc.types.Field(
        AiDecisionsRelativeEqualInput, graphql_name="relativeEqual"
    )
    """Input type for RelativeEqual expression"""

    relative_fuzzy_score = sgqlc.types.Field(
        AiDecisionsRelativeFuzzyScoreInput, graphql_name="relativeFuzzyScore"
    )
    """Input type for RelativeFuzzyScore expression"""

    relative_fuzzy_wuzzy_adaptive_ratio = sgqlc.types.Field(
        AiDecisionsRelativeFuzzyWuzzyAdaptiveRatioInput,
        graphql_name="relativeFuzzyWuzzyAdaptiveRatio",
    )
    """Input type for RelativeFuzzyWuzzyAdaptiveRatio expression"""

    relative_fuzzy_wuzzy_partial_ratio = sgqlc.types.Field(
        AiDecisionsRelativeFuzzyWuzzyPartialRatioInput,
        graphql_name="relativeFuzzyWuzzyPartialRatio",
    )
    """Input type for RelativeFuzzyWuzzyPartialRatio expression"""

    relative_fuzzy_wuzzy_ratio = sgqlc.types.Field(
        AiDecisionsRelativeFuzzyWuzzyRatioInput, graphql_name="relativeFuzzyWuzzyRatio"
    )
    """Input type for RelativeFuzzyWuzzyRatio expression"""

    relative_fuzzy_wuzzy_token_set_ratio = sgqlc.types.Field(
        AiDecisionsRelativeFuzzyWuzzyTokenSetRatioInput,
        graphql_name="relativeFuzzyWuzzyTokenSetRatio",
    )
    """Input type for RelativeFuzzyWuzzyTokenSetRatio expression"""

    relative_greater_than = sgqlc.types.Field(
        AiDecisionsRelativeGreaterThanInput, graphql_name="relativeGreaterThan"
    )
    """Input type for RelativeGreaterThan expression"""

    relative_greater_than_or_equal = sgqlc.types.Field(
        AiDecisionsRelativeGreaterThanOrEqualInput,
        graphql_name="relativeGreaterThanOrEqual",
    )
    """Input type for RelativeGreaterThanOrEqual expression"""

    relative_hamming_distance = sgqlc.types.Field(
        AiDecisionsRelativeHammingDistanceInput, graphql_name="relativeHammingDistance"
    )
    """Input type for RelativeHammingDistance expression"""

    relative_jaccard_distance = sgqlc.types.Field(
        AiDecisionsRelativeJaccardDistanceInput, graphql_name="relativeJaccardDistance"
    )
    """Input type for RelativeJaccardDistance expression"""

    relative_jaro_winkler = sgqlc.types.Field(
        AiDecisionsRelativeJaroWinklerInput, graphql_name="relativeJaroWinkler"
    )
    """Input type for RelativeJaroWinkler expression"""

    relative_less_than = sgqlc.types.Field(
        AiDecisionsRelativeLessThanInput, graphql_name="relativeLessThan"
    )
    """Input type for RelativeLessThan expression"""

    relative_less_than_or_equal = sgqlc.types.Field(
        AiDecisionsRelativeLessThanOrEqualInput, graphql_name="relativeLessThanOrEqual"
    )
    """Input type for RelativeLessThanOrEqual expression"""

    relative_levenshtein = sgqlc.types.Field(
        AiDecisionsRelativeLevenshteinInput, graphql_name="relativeLevenshtein"
    )
    """Input type for RelativeLevenshtein expression"""

    relative_longest_common_subsequence_distance = sgqlc.types.Field(
        AiDecisionsRelativeLongestCommonSubsequenceDistanceInput,
        graphql_name="relativeLongestCommonSubsequenceDistance",
    )
    """Input type for RelativeLongestCommonSubsequenceDistance expression"""

    relative_numerical_equal = sgqlc.types.Field(
        AiDecisionsRelativeNumericalEqualInput, graphql_name="relativeNumericalEqual"
    )
    """Input type for RelativeNumericalEqual expression"""

    relative_regular_expression = sgqlc.types.Field(
        AiDecisionsRelativeRegularExpressionInput,
        graphql_name="relativeRegularExpression",
    )
    """Input type for RelativeRegularExpression expression"""

    relative_sound_ex = sgqlc.types.Field(
        AiDecisionsRelativeSoundExInput, graphql_name="relativeSoundEx"
    )
    """Input type for RelativeSoundEx expression"""

    relative_starts_with = sgqlc.types.Field(
        AiDecisionsRelativeStartsWithInput, graphql_name="relativeStartsWith"
    )
    """Input type for RelativeStartsWith expression"""

    relative_topologically_dependent = sgqlc.types.Field(
        AiDecisionsRelativeTopologicallyDependentInput,
        graphql_name="relativeTopologicallyDependent",
    )
    """Input type for RelativeTopologicallyDependent expression"""

    whole_cosine_distance = sgqlc.types.Field(
        "AiDecisionsWholeCosineDistanceInput", graphql_name="wholeCosineDistance"
    )
    """Input type for WholeCosineDistance expression"""

    whole_jaccard_similarity = sgqlc.types.Field(
        "AiDecisionsWholeJaccardSimilarityInput", graphql_name="wholeJaccardSimilarity"
    )
    """Input type for WholeJaccardSimilarity expression"""


class AiDecisionsSearchBlueprint(sgqlc.types.Input):
    """Blueprint for a search operation"""

    __schema__ = nerdgraph
    __field_names__ = ("expression", "limit", "retention_window_length")
    expression = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleExpressionInput), graphql_name="expression"
    )
    """Expression to use to compare incidents."""

    limit = sgqlc.types.Field(Int, graphql_name="limit")
    """Maximum number of incidents to query for each available incident
    selector
    """

    retention_window_length = sgqlc.types.Field(
        Milliseconds, graphql_name="retentionWindowLength"
    )
    """Duration to consider resources for."""


class AiDecisionsSimulationBlueprint(sgqlc.types.Input):
    """Blueprint for simulation creation."""

    __schema__ = nerdgraph
    __field_names__ = (
        "correlation_window_length",
        "expression",
        "min_correlation_threshold",
        "retention_window_length",
    )
    correlation_window_length = sgqlc.types.Field(
        Milliseconds, graphql_name="correlationWindowLength"
    )
    """Length of the window in which incidents are compared."""

    expression = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleExpressionInput), graphql_name="expression"
    )
    """Expression to use to compare incidents."""

    min_correlation_threshold = sgqlc.types.Field(
        Int, graphql_name="minCorrelationThreshold"
    )
    """Number of correlated incidents within window required to merge
    issues.
    """

    retention_window_length = sgqlc.types.Field(
        Milliseconds, graphql_name="retentionWindowLength"
    )
    """Duration to consider resources for."""


class AiDecisionsSuggestionBlueprint(sgqlc.types.Input):
    """Blueprint for suggestion creation."""

    __schema__ = nerdgraph
    __field_names__ = (
        "correlation_window_length",
        "description",
        "hash",
        "min_correlation_threshold",
        "name",
        "override_configuration",
        "rule_expression",
        "suggester",
        "support",
    )
    correlation_window_length = sgqlc.types.Field(
        Milliseconds, graphql_name="correlationWindowLength"
    )
    """Length of the window in which incidents are compared."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of suggestion."""

    hash = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="hash")
    """Hash of suggestion."""

    min_correlation_threshold = sgqlc.types.Field(
        Int, graphql_name="minCorrelationThreshold"
    )
    """Number of correlations within a window required to merge issues."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of suggestion."""

    override_configuration = sgqlc.types.Field(
        AiDecisionsOverrideConfigurationInput, graphql_name="overrideConfiguration"
    )
    """Configuration to allow rule to override issue properties."""

    rule_expression = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleExpressionInput),
        graphql_name="ruleExpression",
    )
    """Expression to use to compare incidents."""

    suggester = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="suggester"
    )
    """Service/user that created this suggestion."""

    support = sgqlc.types.Field(String, graphql_name="support")
    """Support for suggestion."""


class AiDecisionsWholeCosineDistanceInput(sgqlc.types.Input):
    """Input type for WholeCosineDistance expression"""

    __schema__ = nerdgraph
    __field_names__ = ("max_distance",)
    max_distance = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="maxDistance"
    )
    """Maximum distance threshold."""


class AiDecisionsWholeJaccardSimilarityInput(sgqlc.types.Input):
    """Input type for WholeJaccardSimilarity expression"""

    __schema__ = nerdgraph
    __field_names__ = ("threshold",)
    threshold = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="threshold")
    """Threshold for comparison."""


class AiIssuesFilterIncidents(sgqlc.types.Input):
    """Filter incidents"""

    __schema__ = nerdgraph
    __field_names__ = ("entity_guids", "entity_types", "ids", "priority", "states")
    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="entityGuids",
    )
    """entityGuids"""

    entity_types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="entityTypes"
    )
    """entityTypes"""

    ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name="ids"
    )
    """ids"""

    priority = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="priority"
    )
    """priority"""

    states = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AiIssuesIncidentState)),
        graphql_name="states",
    )
    """states"""


class AiIssuesFilterIncidentsEvents(sgqlc.types.Input):
    """Filter incidents events"""

    __schema__ = nerdgraph
    __field_names__ = ("entity_guids", "entity_types", "ids")
    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="entityGuids",
    )
    """entityGuids"""

    entity_types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="entityTypes"
    )
    """entityTypes"""

    ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name="ids"
    )
    """ids"""


class AiIssuesFilterIssues(sgqlc.types.Input):
    """Filter issues"""

    __schema__ = nerdgraph
    __field_names__ = ("entity_guids", "entity_types", "ids", "priority", "states")
    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="entityGuids",
    )
    """entityGuids"""

    entity_types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="entityTypes"
    )
    """entityTypes"""

    ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name="ids"
    )
    """ids"""

    priority = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="priority"
    )
    """priority"""

    states = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AiIssuesIssueState)),
        graphql_name="states",
    )
    """states"""


class AiIssuesFilterIssuesEvents(sgqlc.types.Input):
    """Filter issues events"""

    __schema__ = nerdgraph
    __field_names__ = ("entity_guids", "entity_types", "ids")
    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="entityGuids",
    )
    """entityGuids"""

    entity_types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="entityTypes"
    )
    """entityTypes"""

    ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name="ids"
    )
    """ids"""


class AiIssuesGracePeriodConfigurationInput(sgqlc.types.Input):
    """Grace periods for issue to be activated per priority"""

    __schema__ = nerdgraph
    __field_names__ = ("critical", "high", "low", "medium")
    critical = sgqlc.types.Field(sgqlc.types.non_null(Seconds), graphql_name="critical")
    """critical"""

    high = sgqlc.types.Field(sgqlc.types.non_null(Seconds), graphql_name="high")
    """high"""

    low = sgqlc.types.Field(sgqlc.types.non_null(Seconds), graphql_name="low")
    """low"""

    medium = sgqlc.types.Field(sgqlc.types.non_null(Seconds), graphql_name="medium")
    """medium"""


class AiNotificationsBasicAuthInput(sgqlc.types.Input):
    """Basic auth input object"""

    __schema__ = nerdgraph
    __field_names__ = ("password", "user")
    password = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="password"
    )
    """password"""

    user = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="user")
    """user"""


class AiNotificationsChannelFilter(sgqlc.types.Input):
    """Filter channel object"""

    __schema__ = nerdgraph
    __field_names__ = (
        "active",
        "destination_id",
        "id",
        "name",
        "product",
        "property",
        "type",
    )
    active = sgqlc.types.Field(Boolean, graphql_name="active")
    """active"""

    destination_id = sgqlc.types.Field(ID, graphql_name="destinationId")
    """destinationId"""

    id = sgqlc.types.Field(ID, graphql_name="id")
    """id"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """name"""

    product = sgqlc.types.Field(AiNotificationsProduct, graphql_name="product")
    """product"""

    property = sgqlc.types.Field(
        "AiNotificationsPropertyFilter", graphql_name="property"
    )
    """property"""

    type = sgqlc.types.Field(AiNotificationsChannelType, graphql_name="type")
    """type"""


class AiNotificationsChannelInput(sgqlc.types.Input):
    """Channel input object"""

    __schema__ = nerdgraph
    __field_names__ = ("destination_id", "name", "product", "properties", "type")
    destination_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="destinationId"
    )
    """destinationId"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """name"""

    product = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsProduct), graphql_name="product"
    )
    """product"""

    properties = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsPropertyInput"))
        ),
        graphql_name="properties",
    )
    """properties"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelType), graphql_name="type"
    )
    """type"""


class AiNotificationsChannelSorter(sgqlc.types.Input):
    """Sort object"""

    __schema__ = nerdgraph
    __field_names__ = ("direction", "field")
    direction = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsSortOrder), graphql_name="direction"
    )
    """direction"""

    field = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelFields), graphql_name="field"
    )
    """field"""


class AiNotificationsChannelUpdate(sgqlc.types.Input):
    """Channel update object"""

    __schema__ = nerdgraph
    __field_names__ = ("active", "name", "properties")
    active = sgqlc.types.Field(Boolean, graphql_name="active")
    """active"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """name"""

    properties = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsPropertyInput")),
        graphql_name="properties",
    )
    """properties"""


class AiNotificationsConstraint(sgqlc.types.Input):
    """List of schema/suggestions constraints"""

    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """key"""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """value"""


class AiNotificationsCredentialsInput(sgqlc.types.Input):
    """Credential input object"""

    __schema__ = nerdgraph
    __field_names__ = ("basic", "oauth2", "token", "type")
    basic = sgqlc.types.Field(AiNotificationsBasicAuthInput, graphql_name="basic")
    """basic"""

    oauth2 = sgqlc.types.Field("AiNotificationsOAuth2AuthInput", graphql_name="oauth2")
    """oauth2"""

    token = sgqlc.types.Field("AiNotificationsTokenAuthInput", graphql_name="token")
    """token"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsAuthType), graphql_name="type"
    )
    """type"""


class AiNotificationsDestinationFilter(sgqlc.types.Input):
    """Filter destination object"""

    __schema__ = nerdgraph
    __field_names__ = (
        "active",
        "auth_type",
        "id",
        "name",
        "property",
        "type",
        "updated_at",
    )
    active = sgqlc.types.Field(Boolean, graphql_name="active")
    """active"""

    auth_type = sgqlc.types.Field(AiNotificationsAuthType, graphql_name="authType")
    """authType"""

    id = sgqlc.types.Field(ID, graphql_name="id")
    """id"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """name"""

    property = sgqlc.types.Field(
        "AiNotificationsPropertyFilter", graphql_name="property"
    )
    """property"""

    type = sgqlc.types.Field(AiNotificationsDestinationType, graphql_name="type")
    """type"""

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")
    """updatedAt"""


class AiNotificationsDestinationInput(sgqlc.types.Input):
    """Destination input object"""

    __schema__ = nerdgraph
    __field_names__ = ("auth", "name", "properties", "type")
    auth = sgqlc.types.Field(AiNotificationsCredentialsInput, graphql_name="auth")
    """auth"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """name"""

    properties = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsPropertyInput"))
        ),
        graphql_name="properties",
    )
    """properties"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationType), graphql_name="type"
    )
    """type"""


class AiNotificationsDestinationSorter(sgqlc.types.Input):
    """Sort object"""

    __schema__ = nerdgraph
    __field_names__ = ("direction", "field")
    direction = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsSortOrder), graphql_name="direction"
    )
    """direction"""

    field = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationFields), graphql_name="field"
    )
    """field"""


class AiNotificationsDestinationUpdate(sgqlc.types.Input):
    """Destination update object"""

    __schema__ = nerdgraph
    __field_names__ = ("active", "auth", "disable_auth", "name", "properties")
    active = sgqlc.types.Field(Boolean, graphql_name="active")
    """active"""

    auth = sgqlc.types.Field(AiNotificationsCredentialsInput, graphql_name="auth")
    """auth"""

    disable_auth = sgqlc.types.Field(Boolean, graphql_name="disableAuth")
    """disableAuth"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """name"""

    properties = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsPropertyInput")),
        graphql_name="properties",
    )
    """properties"""


class AiNotificationsDynamicVariable(sgqlc.types.Input):
    """A list of dynamic variables used by the Channel"""

    __schema__ = nerdgraph
    __field_names__ = ("example_value", "name")
    example_value = sgqlc.types.Field(
        "AiNotificationsExampleValue", graphql_name="exampleValue"
    )
    """exampleValue"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """name"""


class AiNotificationsExampleValue(sgqlc.types.Input):
    """Example properties to be added to the rendering context, for tests"""

    __schema__ = nerdgraph
    __field_names__ = ("example", "type")
    example = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="example")
    """example"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsVariableType), graphql_name="type"
    )
    """type"""


class AiNotificationsOAuth2AuthInput(sgqlc.types.Input):
    """OAuth2 auth input object"""

    __schema__ = nerdgraph
    __field_names__ = (
        "access_token_url",
        "authorization_url",
        "client_id",
        "client_secret",
        "prefix",
        "refresh_interval",
        "refresh_token",
        "refreshable",
        "scope",
        "token",
    )
    access_token_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="accessTokenUrl"
    )
    """accessTokenUrl"""

    authorization_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="authorizationUrl"
    )
    """authorizationUrl"""

    client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="clientId")
    """clientId"""

    client_secret = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="clientSecret"
    )
    """clientSecret"""

    prefix = sgqlc.types.Field(String, graphql_name="prefix")
    """prefix"""

    refresh_interval = sgqlc.types.Field(Int, graphql_name="refreshInterval")
    """refreshInterval"""

    refresh_token = sgqlc.types.Field(SecureValue, graphql_name="refreshToken")
    """refreshToken"""

    refreshable = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="refreshable"
    )
    """refreshable"""

    scope = sgqlc.types.Field(String, graphql_name="scope")
    """scope"""

    token = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="token")
    """token"""


class AiNotificationsPropertyFilter(sgqlc.types.Input):
    """Filter object by property"""

    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """key"""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """value"""


class AiNotificationsPropertyInput(sgqlc.types.Input):
    """Property object"""

    __schema__ = nerdgraph
    __field_names__ = ("display_value", "key", "label", "value")
    display_value = sgqlc.types.Field(String, graphql_name="displayValue")
    """displayValue"""

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """key"""

    label = sgqlc.types.Field(String, graphql_name="label")
    """label"""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """value"""


class AiNotificationsSuggestionFilter(sgqlc.types.Input):
    """Suggestion filter object"""

    __schema__ = nerdgraph
    __field_names__ = ("type", "value")
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsSuggestionFilterType), graphql_name="type"
    )
    """type"""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """value"""


class AiNotificationsTokenAuthInput(sgqlc.types.Input):
    """Token auth input object"""

    __schema__ = nerdgraph
    __field_names__ = ("prefix", "token")
    prefix = sgqlc.types.Field(String, graphql_name="prefix")
    """prefix"""

    token = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="token")
    """token"""


class AiNotificationsVariableFilter(sgqlc.types.Input):
    """Filter variable object"""

    __schema__ = nerdgraph
    __field_names__ = ("active", "key", "label", "name", "product")
    active = sgqlc.types.Field(Boolean, graphql_name="active")
    """active"""

    key = sgqlc.types.Field(String, graphql_name="key")
    """key"""

    label = sgqlc.types.Field(String, graphql_name="label")
    """label"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """name"""

    product = sgqlc.types.Field(AiNotificationsProduct, graphql_name="product")
    """product"""


class AiNotificationsVariableSorter(sgqlc.types.Input):
    """Sort object"""

    __schema__ = nerdgraph
    __field_names__ = ("direction", "field")
    direction = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsSortOrder), graphql_name="direction"
    )
    """direction"""

    field = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsVariableFields), graphql_name="field"
    )
    """field"""


class AiTopologyCollectorAttributeInput(sgqlc.types.Input):
    """A key-value entry."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """Key of entry."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value of entry."""


class AiTopologyCollectorEdgeBlueprint(sgqlc.types.Input):
    """Blueprint for edge creation."""

    __schema__ = nerdgraph
    __field_names__ = ("directed", "from_vertex_name", "to_vertex_name")
    directed = sgqlc.types.Field(Boolean, graphql_name="directed")
    """Whether or not from and to have any semantic meaning."""

    from_vertex_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="fromVertexName"
    )
    """The source vertex name."""

    to_vertex_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="toVertexName"
    )
    """The destination vertex name."""


class AiTopologyCollectorVertexBlueprint(sgqlc.types.Input):
    """Blueprint for vertex creation."""

    __schema__ = nerdgraph
    __field_names__ = ("defining_attributes", "name", "vertex_class")
    defining_attributes = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiTopologyCollectorAttributeInput))
        ),
        graphql_name="definingAttributes",
    )
    """Attributes to define the vertex."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the vertex."""

    vertex_class = sgqlc.types.Field(
        sgqlc.types.non_null(AiTopologyCollectorVertexClass), graphql_name="vertexClass"
    )
    """The class of the vertex."""


class AiWorkflowsCreateWorkflowInput(sgqlc.types.Input):
    """Workflow input object"""

    __schema__ = nerdgraph
    __field_names__ = (
        "destination_configurations",
        "destinations_enabled",
        "enrichments",
        "enrichments_enabled",
        "issues_filter",
        "muting_rules_handling",
        "name",
        "workflow_enabled",
    )
    destination_configurations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null("AiWorkflowsDestinationConfigurationInput")
            )
        ),
        graphql_name="destinationConfigurations",
    )
    """destinationConfigurations"""

    destinations_enabled = sgqlc.types.Field(
        Boolean, graphql_name="destinationsEnabled"
    )
    """destinationsEnabled"""

    enrichments = sgqlc.types.Field(
        "AiWorkflowsEnrichmentsInput", graphql_name="enrichments"
    )
    """enrichments"""

    enrichments_enabled = sgqlc.types.Field(Boolean, graphql_name="enrichmentsEnabled")
    """enrichmentsEnabled"""

    issues_filter = sgqlc.types.Field(
        "AiWorkflowsFilterInput", graphql_name="issuesFilter"
    )
    """issuesFilter"""

    muting_rules_handling = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsMutingRulesHandling),
        graphql_name="mutingRulesHandling",
    )
    """mutingRulesHandling"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """name"""

    workflow_enabled = sgqlc.types.Field(Boolean, graphql_name="workflowEnabled")
    """workflowEnabled"""


class AiWorkflowsDestinationConfigurationInput(sgqlc.types.Input):
    """Destination Configuration input object"""

    __schema__ = nerdgraph
    __field_names__ = ("channel_id",)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="channelId")
    """channelId"""


class AiWorkflowsEnrichmentsInput(sgqlc.types.Input):
    """Enrichment input object"""

    __schema__ = nerdgraph
    __field_names__ = ("nrql",)
    nrql = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsNrqlEnrichmentInput"))
        ),
        graphql_name="nrql",
    )
    """nrql"""


class AiWorkflowsFilterInput(sgqlc.types.Input):
    """Filter input object"""

    __schema__ = nerdgraph
    __field_names__ = ("name", "predicates", "type")
    name = sgqlc.types.Field(String, graphql_name="name")
    """name"""

    predicates = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsPredicateInput"))
        ),
        graphql_name="predicates",
    )
    """predicates"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsFilterType), graphql_name="type"
    )
    """type"""


class AiWorkflowsFilters(sgqlc.types.Input):
    """Filter on the workflow objects"""

    __schema__ = nerdgraph
    __field_names__ = (
        "channel_id",
        "destination_type",
        "enrichment_id",
        "filter_id",
        "id",
        "name",
        "workflow_enabled",
    )
    channel_id = sgqlc.types.Field(ID, graphql_name="channelId")
    """channelId"""

    destination_type = sgqlc.types.Field(
        AiWorkflowsDestinationType, graphql_name="destinationType"
    )
    """destinationType"""

    enrichment_id = sgqlc.types.Field(ID, graphql_name="enrichmentId")
    """enrichmentId"""

    filter_id = sgqlc.types.Field(ID, graphql_name="filterId")
    """filterId"""

    id = sgqlc.types.Field(ID, graphql_name="id")
    """id"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """name"""

    workflow_enabled = sgqlc.types.Field(Boolean, graphql_name="workflowEnabled")
    """workflowEnabled"""


class AiWorkflowsNrqlConfigurationInput(sgqlc.types.Input):
    """NRQL type configuration input object"""

    __schema__ = nerdgraph
    __field_names__ = ("query",)
    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")
    """query"""


class AiWorkflowsNrqlEnrichmentInput(sgqlc.types.Input):
    """NRQL type enrichment input object"""

    __schema__ = nerdgraph
    __field_names__ = ("configuration", "name")
    configuration = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiWorkflowsNrqlConfigurationInput))
        ),
        graphql_name="configuration",
    )
    """configuration"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """name"""


class AiWorkflowsNrqlTestEnrichmentInput(sgqlc.types.Input):
    """NRQL type test enrichment input object"""

    __schema__ = nerdgraph
    __field_names__ = ("configuration", "id", "name")
    configuration = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiWorkflowsNrqlConfigurationInput))
        ),
        graphql_name="configuration",
    )
    """configuration"""

    id = sgqlc.types.Field(ID, graphql_name="id")
    """id"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """name"""


class AiWorkflowsNrqlUpdateEnrichmentInput(sgqlc.types.Input):
    """NRQL type update enrichment input object"""

    __schema__ = nerdgraph
    __field_names__ = ("configuration", "id", "name")
    configuration = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiWorkflowsNrqlConfigurationInput))
        ),
        graphql_name="configuration",
    )
    """configuration"""

    id = sgqlc.types.Field(ID, graphql_name="id")
    """id"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """name"""


class AiWorkflowsPredicateInput(sgqlc.types.Input):
    """PredicateInput input object"""

    __schema__ = nerdgraph
    __field_names__ = ("attribute", "operator", "values")
    attribute = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attribute"
    )
    """attribute"""

    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsOperator), graphql_name="operator"
    )
    """operator"""

    values = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="values",
    )
    """values"""


class AiWorkflowsTestEnrichmentsInput(sgqlc.types.Input):
    """Test Enrichment input object"""

    __schema__ = nerdgraph
    __field_names__ = ("nrql",)
    nrql = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AiWorkflowsNrqlTestEnrichmentInput)
            )
        ),
        graphql_name="nrql",
    )
    """nrql"""


class AiWorkflowsTestWorkflowInput(sgqlc.types.Input):
    """Test Workflow input object"""

    __schema__ = nerdgraph
    __field_names__ = ("destination_configurations", "enrichments", "issues_filter")
    destination_configurations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AiWorkflowsDestinationConfigurationInput)
            )
        ),
        graphql_name="destinationConfigurations",
    )
    """destinationConfigurations"""

    enrichments = sgqlc.types.Field(
        AiWorkflowsTestEnrichmentsInput, graphql_name="enrichments"
    )
    """enrichments"""

    issues_filter = sgqlc.types.Field(
        AiWorkflowsFilterInput, graphql_name="issuesFilter"
    )
    """issuesFilter"""


class AiWorkflowsUpdateEnrichmentsInput(sgqlc.types.Input):
    """Update Enrichment input object"""

    __schema__ = nerdgraph
    __field_names__ = ("nrql",)
    nrql = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AiWorkflowsNrqlUpdateEnrichmentInput)
            )
        ),
        graphql_name="nrql",
    )
    """nrql"""


class AiWorkflowsUpdateWorkflowInput(sgqlc.types.Input):
    """Update Workflow input object"""

    __schema__ = nerdgraph
    __field_names__ = (
        "destination_configurations",
        "destinations_enabled",
        "enrichments",
        "enrichments_enabled",
        "id",
        "issues_filter",
        "muting_rules_handling",
        "name",
        "workflow_enabled",
    )
    destination_configurations = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AiWorkflowsDestinationConfigurationInput)
        ),
        graphql_name="destinationConfigurations",
    )
    """destinationConfigurations"""

    destinations_enabled = sgqlc.types.Field(
        Boolean, graphql_name="destinationsEnabled"
    )
    """destinationsEnabled"""

    enrichments = sgqlc.types.Field(
        AiWorkflowsUpdateEnrichmentsInput, graphql_name="enrichments"
    )
    """enrichments"""

    enrichments_enabled = sgqlc.types.Field(Boolean, graphql_name="enrichmentsEnabled")
    """enrichmentsEnabled"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """id"""

    issues_filter = sgqlc.types.Field(
        "AiWorkflowsUpdatedFilterInput", graphql_name="issuesFilter"
    )
    """issuesFilter"""

    muting_rules_handling = sgqlc.types.Field(
        AiWorkflowsMutingRulesHandling, graphql_name="mutingRulesHandling"
    )
    """mutingRulesHandling"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """name"""

    workflow_enabled = sgqlc.types.Field(Boolean, graphql_name="workflowEnabled")
    """workflowEnabled"""


class AiWorkflowsUpdatedFilterInput(sgqlc.types.Input):
    """Update Filter input object"""

    __schema__ = nerdgraph
    __field_names__ = ("filter_input", "id")
    filter_input = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsFilterInput), graphql_name="filterInput"
    )
    """filterInput"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """id"""


class AlertsEmailNotificationChannelCreateInput(sgqlc.types.Input):
    """The input for creating a new Email notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("emails", "include_json", "name")
    emails = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="emails",
    )
    """List of email recipients."""

    include_json = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="includeJson"
    )
    """Include details about the violation as a JSON attachment."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Notification channel name."""


class AlertsEmailNotificationChannelUpdateInput(sgqlc.types.Input):
    """The input for updating an existing Email notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("emails", "include_json", "name")
    emails = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="emails"
    )
    """List of email recipients."""

    include_json = sgqlc.types.Field(Boolean, graphql_name="includeJson")
    """Include details about the violation as a JSON attachment."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Notification channel name."""


class AlertsMutingRuleConditionGroupInput(sgqlc.types.Input):
    """A group of MutingRuleConditions combined by an operator."""

    __schema__ = nerdgraph
    __field_names__ = ("conditions", "operator")
    conditions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AlertsMutingRuleConditionInput"))
        ),
        graphql_name="conditions",
    )
    """The individual MutingRuleConditions within the group."""

    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsMutingRuleConditionGroupOperator),
        graphql_name="operator",
    )
    """The operator used to combine all the MutingRuleConditions within
    the group.
    """


class AlertsMutingRuleConditionInput(sgqlc.types.Input):
    """A condition which describes how to target a New Relic Alerts
    Violation.
    """

    __schema__ = nerdgraph
    __field_names__ = ("attribute", "operator", "values")
    attribute = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attribute"
    )
    """The attribute on a violation. Expects one of:  * **accountId** -
    The account id * **conditionId** - The alert condition id *
    **conditionName** - The alert condition name *
    **conditionRunbookUrl** - The alert condition's runbook url *
    **conditionType** - The alert condition type, such as `metric` *
    **entity.guid** - The entity GUID * **nrqlEventType** - The NRQL
    event type * **nrqlQuery** - The NRQL query string * **policyId**
    - The alert policy id * **policyName** - The alert policy name *
    **product** - The target product (e.g., `SYNTHETICS`) *
    **tags.<NAME>** - Arbitrary tags associated with some entity
    (e.g., FACET from a NRQL query, for example `tags.appName` or
    `tags.host`) * **targetId** - The ID of the alerts target *
    **targetName** - The name of the alerts target
    """

    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsMutingRuleConditionOperator), graphql_name="operator"
    )
    """The operator used to compare the attribute's value with the
    supplied value(s).
    """

    values = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(String)), graphql_name="values"
    )
    """The value(s) to compare against the attribute's value."""


class AlertsMutingRuleInput(sgqlc.types.Input):
    """Input for creating MutingRules for New Relic Alerts Violations."""

    __schema__ = nerdgraph
    __field_names__ = ("condition", "description", "enabled", "name", "schedule")
    condition = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsMutingRuleConditionGroupInput),
        graphql_name="condition",
    )
    """The condition that defines which violations to target."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the MutingRule."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the MutingRule is enabled"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the MutingRule."""

    schedule = sgqlc.types.Field(
        "AlertsMutingRuleScheduleInput", graphql_name="schedule"
    )
    """The time window when the MutingRule should actively mute
    violations.
    """


class AlertsMutingRuleScheduleInput(sgqlc.types.Input):
    """The time window when the MutingRule should actively mute
    violations.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "end_repeat",
        "end_time",
        "repeat",
        "repeat_count",
        "start_time",
        "time_zone",
        "weekly_repeat_days",
    )
    end_repeat = sgqlc.types.Field(NaiveDateTime, graphql_name="endRepeat")
    """The datetime stamp when the MutingRule schedule should stop
    repeating. This is in local ISO 8601 format without an offset.
    Example: `'2020-07-10T15:00:00'`  Note: Either `endRepeat` or
    `repeatCount` should be used to end a MutingRule schedule. Both
    fields should not be provided together.
    """

    end_time = sgqlc.types.Field(NaiveDateTime, graphql_name="endTime")
    """The datetime stamp representing when the MutingRule should end.
    This is in local ISO 8601 format without an offset.  Example:
    `'2020-07-10T15:00:00'`
    """

    repeat = sgqlc.types.Field(AlertsMutingRuleScheduleRepeat, graphql_name="repeat")
    """The frequency the MutingRule schedule repeats. If the MutingRule
    repeats `WEEKLY`, be sure to set `weeklyRepeatDays`. If the
    MutingRule does not repeat, use `null`.  Example: `DAILY`
    """

    repeat_count = sgqlc.types.Field(Int, graphql_name="repeatCount")
    """The number of times the MutingRule schedule should repeat.  Note:
    Either `repeatCount` or `endRepeat` should be used to end a
    MutingRule schedule. Both fields should not be provided together.
    """

    start_time = sgqlc.types.Field(NaiveDateTime, graphql_name="startTime")
    """The datetime stamp representing when the MutingRule should start.
    This is in local ISO 8601 format without an offset.  Example:
    `'2020-07-08T14:30:00'`
    """

    time_zone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="timeZone")
    """The time zone that applies to the MutingRule schedule.  Example:
    `'America/Los_Angeles'`  See
    https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
    """

    weekly_repeat_days = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AlertsDayOfWeek)),
        graphql_name="weeklyRepeatDays",
    )
    """The day(s) of the week that a MutingRule should repeat when the
    repeat field is set to `WEEKLY`.  Example: `[MONDAY, WEDNESDAY]`
    """


class AlertsMutingRuleScheduleUpdateInput(sgqlc.types.Input):
    """The time window when the MutingRule should actively mute
    violations.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "end_repeat",
        "end_time",
        "repeat",
        "repeat_count",
        "start_time",
        "time_zone",
        "weekly_repeat_days",
    )
    end_repeat = sgqlc.types.Field(NaiveDateTime, graphql_name="endRepeat")
    """The datetime stamp when the MutingRule schedule should stop
    repeating. This is in local ISO 8601 format without an offset.
    Example: `'2020-07-10T15:00:00'`  Note: Either `endRepeat` or
    `repeatCount` should be used to end a MutingRule schedule. Both
    fields should not be provided together.
    """

    end_time = sgqlc.types.Field(NaiveDateTime, graphql_name="endTime")
    """The datetime stamp representing when the MutingRule should end.
    This is in local ISO 8601 format without an offset.  Example:
    `'2020-07-10T15:00:00'`
    """

    repeat = sgqlc.types.Field(AlertsMutingRuleScheduleRepeat, graphql_name="repeat")
    """The frequency the MutingRule schedule repeats. If the MutingRule
    repeats `WEEKLY`, be sure to set `weeklyRepeatDays`. If the
    MutingRule does not repeat, use `null`.  Example: `DAILY`
    """

    repeat_count = sgqlc.types.Field(Int, graphql_name="repeatCount")
    """The number of times the MutingRule schedule should repeat.  Note:
    Either `repeatCount` or `endRepeat` should be used to end a
    MutingRule schedule. Both fields should not be provided together.
    """

    start_time = sgqlc.types.Field(NaiveDateTime, graphql_name="startTime")
    """The datetime stamp representing when the MutingRule should start.
    This is in local ISO 8601 format without an offset.  Example:
    `'2020-07-08T14:30:00'`
    """

    time_zone = sgqlc.types.Field(String, graphql_name="timeZone")
    """The time zone that applies to the MutingRule schedule.  Example:
    `'America/Los_Angeles'`  See
    https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
    """

    weekly_repeat_days = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AlertsDayOfWeek)),
        graphql_name="weeklyRepeatDays",
    )
    """The day(s) of the week that a MutingRule should repeat when the
    repeat field is set to `WEEKLY`.  Example: `[MONDAY, WEDNESDAY]`
    """


class AlertsMutingRuleUpdateInput(sgqlc.types.Input):
    """Input for updating MutingRules for New Relic Alerts Violations."""

    __schema__ = nerdgraph
    __field_names__ = ("condition", "description", "enabled", "name", "schedule")
    condition = sgqlc.types.Field(
        AlertsMutingRuleConditionGroupInput, graphql_name="condition"
    )
    """The condition that defines which violations to target."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the MutingRule."""

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Whether the MutingRule is enabled"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the MutingRule."""

    schedule = sgqlc.types.Field(
        AlertsMutingRuleScheduleUpdateInput, graphql_name="schedule"
    )
    """The time window when the MutingRule should actively mute
    violations.
    """


class AlertsNotificationChannelCreateConfiguration(sgqlc.types.Input):
    """The input configuration for creating a notification channel."""

    __schema__ = nerdgraph
    __field_names__ = (
        "email",
        "ops_genie",
        "pager_duty",
        "slack",
        "victor_ops",
        "webhook",
        "x_matters",
    )
    email = sgqlc.types.Field(
        AlertsEmailNotificationChannelCreateInput, graphql_name="email"
    )
    """The input configuration for creating an Email notification
    channel.
    """

    ops_genie = sgqlc.types.Field(
        "AlertsOpsGenieNotificationChannelCreateInput", graphql_name="opsGenie"
    )
    """The input configuration for creating an OpsGenie notification
    channel.
    """

    pager_duty = sgqlc.types.Field(
        "AlertsPagerDutyNotificationChannelCreateInput", graphql_name="pagerDuty"
    )
    """The input configuration for creating a PagerDuty notification
    channel.
    """

    slack = sgqlc.types.Field(
        "AlertsSlackNotificationChannelCreateInput", graphql_name="slack"
    )
    """The input configuration for creating a Slack notification channel."""

    victor_ops = sgqlc.types.Field(
        "AlertsVictorOpsNotificationChannelCreateInput", graphql_name="victorOps"
    )
    """The input configuration for creating a VictorOps notification
    channel.
    """

    webhook = sgqlc.types.Field(
        "AlertsWebhookNotificationChannelCreateInput", graphql_name="webhook"
    )
    """The input configuration for creating a Webhook notification
    channel.
    """

    x_matters = sgqlc.types.Field(
        "AlertsXMattersNotificationChannelCreateInput", graphql_name="xMatters"
    )
    """The input configuration for creating an xMatters notification
    channel.
    """


class AlertsNotificationChannelUpdateConfiguration(sgqlc.types.Input):
    """The input configuration for updating a notification channel."""

    __schema__ = nerdgraph
    __field_names__ = (
        "email",
        "ops_genie",
        "pager_duty",
        "slack",
        "victor_ops",
        "webhook",
        "x_matters",
    )
    email = sgqlc.types.Field(
        AlertsEmailNotificationChannelUpdateInput, graphql_name="email"
    )
    """The input configuration for updating an Email notification
    channel.
    """

    ops_genie = sgqlc.types.Field(
        "AlertsOpsGenieNotificationChannelUpdateInput", graphql_name="opsGenie"
    )
    """The input configuration for updating an OpsGenie notification
    channel.
    """

    pager_duty = sgqlc.types.Field(
        "AlertsPagerDutyNotificationChannelUpdateInput", graphql_name="pagerDuty"
    )
    """The input configuration for updating a PagerDuty notification
    channel.
    """

    slack = sgqlc.types.Field(
        "AlertsSlackNotificationChannelUpdateInput", graphql_name="slack"
    )
    """The input configuration for updating a Slack notification channel."""

    victor_ops = sgqlc.types.Field(
        "AlertsVictorOpsNotificationChannelUpdateInput", graphql_name="victorOps"
    )
    """The input configuration for updating a VictorOps notification
    channel.
    """

    webhook = sgqlc.types.Field(
        "AlertsWebhookNotificationChannelUpdateInput", graphql_name="webhook"
    )
    """The input configuration for updating a Webhook notification
    channel.
    """

    x_matters = sgqlc.types.Field(
        "AlertsXMattersNotificationChannelUpdateInput", graphql_name="xMatters"
    )
    """The input configuration for updating an xMatters notification
    channel.
    """


class AlertsNrqlConditionBaselineInput(sgqlc.types.Input):
    """Input for creating a baseline NRQL condition."""

    __schema__ = nerdgraph
    __field_names__ = (
        "baseline_direction",
        "description",
        "enabled",
        "expiration",
        "name",
        "nrql",
        "runbook_url",
        "signal",
        "terms",
        "violation_time_limit",
        "violation_time_limit_seconds",
    )
    baseline_direction = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlBaselineDirection),
        graphql_name="baselineDirection",
    )
    """Direction in which the baseline is set on condition."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """The custom violation description."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the NRQL condition is enabled."""

    expiration = sgqlc.types.Field(
        "AlertsNrqlConditionExpirationInput", graphql_name="expiration"
    )
    """Settings for how violations are opened or closed when a signal
    expires.
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the NRQL condition."""

    nrql = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNrqlConditionQueryInput"), graphql_name="nrql"
    )
    """The NRQL query that defines the signal for the condition."""

    runbook_url = sgqlc.types.Field(String, graphql_name="runbookUrl")
    """Runbook URL."""

    signal = sgqlc.types.Field("AlertsNrqlConditionSignalInput", graphql_name="signal")
    """Configuration that defines the signal that the NRQL condition will
    use to evaluate.
    """

    terms = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null("AlertsNrqlDynamicConditionTermsInput")
            )
        ),
        graphql_name="terms",
    )
    """List of critical and warning terms for the condition."""

    violation_time_limit = sgqlc.types.Field(
        AlertsViolationTimeLimit, graphql_name="violationTimeLimit"
    )
    """Deprecated - use violationTimeLimitSeconds for full range of
    values.  Duration after which a violation automatically closes.
    Default is THIRTY_DAYS.
    """

    violation_time_limit_seconds = sgqlc.types.Field(
        Seconds, graphql_name="violationTimeLimitSeconds"
    )
    """Duration after which a violation automatically closes in seconds.
    Accepts values between 300 seconds (5 minutes) and 2592000 seconds
    (30 days).  Default is 3 days (259200 seconds).
    """


class AlertsNrqlConditionExpirationInput(sgqlc.types.Input):
    """Settings for how violations are opened or closed when a signal
    expires.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "close_violations_on_expiration",
        "expiration_duration",
        "open_violation_on_expiration",
    )
    close_violations_on_expiration = sgqlc.types.Field(
        Boolean, graphql_name="closeViolationsOnExpiration"
    )
    """Whether to close all open violations when the signal expires.
    Defaults to true.
    """

    expiration_duration = sgqlc.types.Field(Seconds, graphql_name="expirationDuration")
    """The amount of time (in seconds) to wait before considering if the
    signal has been lost. Max value of 172800 (48 hours).
    """

    open_violation_on_expiration = sgqlc.types.Field(
        Boolean, graphql_name="openViolationOnExpiration"
    )
    """Whether to create a new "lost signal" violation to capture that
    the signal expired. Defaults to false.
    """


class AlertsNrqlConditionOutlierInput(sgqlc.types.Input):
    """Input for creating an outlier NRQL condition."""

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "enabled",
        "expected_groups",
        "expiration",
        "name",
        "nrql",
        "open_violation_on_group_overlap",
        "runbook_url",
        "signal",
        "terms",
        "violation_time_limit",
        "violation_time_limit_seconds",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """The custom violation description."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the NRQL condition is enabled."""

    expected_groups = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="expectedGroups"
    )
    """Number of groups expected in the returned values for the
    condition.
    """

    expiration = sgqlc.types.Field(
        AlertsNrqlConditionExpirationInput, graphql_name="expiration"
    )
    """Settings for how violations are opened or closed when a signal
    expires.
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the NRQL condition."""

    nrql = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNrqlConditionQueryInput"), graphql_name="nrql"
    )
    """The NRQL query that defines the signal for the condition."""

    open_violation_on_group_overlap = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="openViolationOnGroupOverlap"
    )
    """Whether overlapping groups should produce a violation."""

    runbook_url = sgqlc.types.Field(String, graphql_name="runbookUrl")
    """Runbook URL."""

    signal = sgqlc.types.Field("AlertsNrqlConditionSignalInput", graphql_name="signal")
    """Configuration that defines the signal that the NRQL condition will
    use to evaluate.
    """

    terms = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null("AlertsNrqlDynamicConditionTermsInput")
            )
        ),
        graphql_name="terms",
    )
    """List of critical and warning terms for the condition."""

    violation_time_limit = sgqlc.types.Field(
        AlertsViolationTimeLimit, graphql_name="violationTimeLimit"
    )
    """Deprecated - use violationTimeLimitSeconds for full range of
    values.  Duration after which a violation automatically closes.
    Default is THIRTY_DAYS.
    """

    violation_time_limit_seconds = sgqlc.types.Field(
        Seconds, graphql_name="violationTimeLimitSeconds"
    )
    """Duration after which a violation automatically closes in seconds.
    Accepts values between 300 seconds (5 minutes) and 2592000 seconds
    (30 days).  Default is 3 days (259200 seconds).
    """


class AlertsNrqlConditionQueryInput(sgqlc.types.Input):
    """Information for generating the condition NRQL query. The output of
    data from this NRQL query will be compared to the condition terms
    to detect violations.
    """

    __schema__ = nerdgraph
    __field_names__ = ("evaluation_offset", "query")
    evaluation_offset = sgqlc.types.Field(Int, graphql_name="evaluationOffset")
    """Deprecated; superseded by `signal.aggregationMethod` with
    `signal.aggregationDelay` or `signal.aggregationTimer`.  By
    default, we evaluate the NRQL query in one-minute time windows.
    Start time depends on the value you select in the NRQL condition's
    `evaluationOffset`. Evaluation offset cannot be greater than 60
    minutes.  This value is the number of time windows we look back at
    the aggregated.  Example: With an `evaluationOffset` of 3, the
    NRQL time window applied to your query will be:  `SINCE 3 minutes
    ago UNTIL 2 minutes ago`
    """

    query = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="query")
    """NRQL syntax that defines the query."""


class AlertsNrqlConditionSignalInput(sgqlc.types.Input):
    """Configuration that defines the signal that the NRQL condition will
    use to evaluate.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "aggregation_delay",
        "aggregation_method",
        "aggregation_timer",
        "aggregation_window",
        "evaluation_offset",
        "fill_option",
        "fill_value",
        "slide_by",
    )
    aggregation_delay = sgqlc.types.Field(Seconds, graphql_name="aggregationDelay")
    """How long we wait for data that belongs in each aggregation window.
    Depending on your data, a longer delay may increase accuracy but
    delay notifications.  Use `aggregationDelay` with the `EVENT_FLOW`
    and `CADENCE` methods. The maximum delay is **1200 seconds** (20
    minutes) when using `EVENT_FLOW` and **3600 seconds** (60 minutes)
    when using `CADENCE`. In both cases, the minimum delay is **0
    seconds** and the default is **120 seconds**.  When using
    `aggregationDelay`, do **not** use `evaluationOffset`.
    """

    aggregation_method = sgqlc.types.Field(
        AlertsSignalAggregationMethod, graphql_name="aggregationMethod"
    )
    """The method that determines when we consider an aggregation window
    to be complete so that we can evaluate the signal for violations.
    Default is `EVENT_FLOW`.  When using any `aggregationMethod`, do
    **not** use `evaluationOffset`.  When using the
    `aggregationMethod` with `EVENT_TIMER`, use `aggregationTimer`.
    For `EVENT_FLOW` and `CADENCE`, use `aggregationDelay`.
    """

    aggregation_timer = sgqlc.types.Field(Seconds, graphql_name="aggregationTimer")
    """How long we wait after each data point arrives to make sure we've
    processed the whole batch.  Use `aggregationTimer` with the
    `EVENT_TIMER` method. The timer value can range from **5 seconds**
    to **1200 seconds** (20 minutes); the default is **60 seconds**.
    When using `aggregationTimer`, do **not** use `evaluationOffset`.
    """

    aggregation_window = sgqlc.types.Field(Seconds, graphql_name="aggregationWindow")
    """Aggregation window controls the duration of the time window used
    to evaluate the NRQL query, in seconds. The value must be at least
    30 seconds, and no more than 15 minutes (900 seconds). Default is
    60 seconds.
    """

    evaluation_offset = sgqlc.types.Field(Int, graphql_name="evaluationOffset")
    """Deprecated; superseded by `signal.aggregationMethod` with
    `signal.aggregationDelay` or `signal.aggregationTimer`.  By
    default, we evaluate the NRQL query in one-minute time windows.
    The start time depends on the value you select in the NRQL
    condition's `evaluationOffset`. Evaluation offset cannot be
    greater than 60 minutes.  This value is the number of time windows
    we look back at the aggregated data.  Example: With an
    `evaluationOffset` of 3 and a 1 minute aggregation window, the
    NRQL time window applied to your query will be:  `SINCE 3 minutes
    ago UNTIL 2 minutes ago`
    """

    fill_option = sgqlc.types.Field(AlertsFillOption, graphql_name="fillOption")
    """Option that determines the type of value that should be used to
    fill gaps (empty windows). Defaults to STATIC.  Outlier NRQL
    conditions may only use NONE.
    """

    fill_value = sgqlc.types.Field(Float, graphql_name="fillValue")
    """If using the static fill option, this the value used for filling.
    Defaults to 0.
    """

    slide_by = sgqlc.types.Field(Seconds, graphql_name="slideBy")
    """This setting gathers data in overlapping time windows to smooth
    the chart line, making it easier to spot trends.  The `slideBy`
    value is specified in seconds and must be **smaller than** and **a
    factor of** the `aggregationWindow`.  Cannot be used with: -
    Outlier NRQL conditions
    """


class AlertsNrqlConditionStaticInput(sgqlc.types.Input):
    """Input for creating a static NRQL condition."""

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "enabled",
        "expiration",
        "name",
        "nrql",
        "runbook_url",
        "signal",
        "terms",
        "value_function",
        "violation_time_limit",
        "violation_time_limit_seconds",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """The custom violation description."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the NRQL condition is enabled."""

    expiration = sgqlc.types.Field(
        AlertsNrqlConditionExpirationInput, graphql_name="expiration"
    )
    """Settings for how violations are opened or closed when a signal
    expires.
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the NRQL condition."""

    nrql = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionQueryInput), graphql_name="nrql"
    )
    """The NRQL query that defines the signal for the condition."""

    runbook_url = sgqlc.types.Field(String, graphql_name="runbookUrl")
    """Runbook URL."""

    signal = sgqlc.types.Field(AlertsNrqlConditionSignalInput, graphql_name="signal")
    """Configuration that defines the signal that the NRQL condition will
    use to evaluate.
    """

    terms = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AlertsNrqlConditionTermsInput"))
        ),
        graphql_name="terms",
    )
    """List of critical and warning terms for the condition."""

    value_function = sgqlc.types.Field(
        AlertsNrqlStaticConditionValueFunction, graphql_name="valueFunction"
    )
    """Deprecated - use `signal.slideBy` instead.  Function used to
    aggregate the NRQL query value(s) for comparison to the
    `terms.threshold`. When the result of this aggregate surpasses the
    `terms.threshold`, a violation is opened.
    """

    violation_time_limit = sgqlc.types.Field(
        AlertsViolationTimeLimit, graphql_name="violationTimeLimit"
    )
    """Deprecated - use violationTimeLimitSeconds for full range of
    values.  Duration after which a violation automatically closes.
    Default is THIRTY_DAYS.
    """

    violation_time_limit_seconds = sgqlc.types.Field(
        Seconds, graphql_name="violationTimeLimitSeconds"
    )
    """Duration after which a violation automatically closes in seconds.
    Accepts values between 300 seconds (5 minutes) and 2592000 seconds
    (30 days).  Default is 3 days (259200 seconds).
    """


class AlertsNrqlConditionTermsInput(sgqlc.types.Input):
    """NRQL condition terms determine when a violation will be opened."""

    __schema__ = nerdgraph
    __field_names__ = (
        "operator",
        "priority",
        "threshold",
        "threshold_duration",
        "threshold_occurrences",
    )
    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionTermsOperator), graphql_name="operator"
    )
    """Operator used to compare against the threshold."""

    priority = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionPriority), graphql_name="priority"
    )
    """Priority determines whether notifications will be sent for
    violations or not.
    """

    threshold = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="threshold")
    """Value that triggers a violation."""

    threshold_duration = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="thresholdDuration"
    )
    """The duration, in seconds, that the threshold must violate for in
    order to create a violation. This value must be within 60-7200
    seconds and must be a multiple of the aggregation window. (Default
    aggregation window duration is 60 seconds.)
    """

    threshold_occurrences = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionThresholdOccurrences),
        graphql_name="thresholdOccurrences",
    )
    """How many data points must be in violation for the specified
    thresholdDuration.
    """


class AlertsNrqlConditionUpdateBaselineInput(sgqlc.types.Input):
    """Input for updating a baseline NRQL condition."""

    __schema__ = nerdgraph
    __field_names__ = (
        "baseline_direction",
        "description",
        "enabled",
        "expiration",
        "name",
        "nrql",
        "runbook_url",
        "signal",
        "terms",
        "violation_time_limit",
        "violation_time_limit_seconds",
    )
    baseline_direction = sgqlc.types.Field(
        AlertsNrqlBaselineDirection, graphql_name="baselineDirection"
    )
    """Direction in which the baseline is set on condition."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """The custom violation description."""

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Whether the NRQL condition is enabled."""

    expiration = sgqlc.types.Field(
        AlertsNrqlConditionExpirationInput, graphql_name="expiration"
    )
    """Settings for how violations are opened or closed when a signal
    expires.
    """

    name = sgqlc.types.Field(String, graphql_name="name")
    """Name of the NRQL condition."""

    nrql = sgqlc.types.Field("AlertsNrqlConditionUpdateQueryInput", graphql_name="nrql")
    """The NRQL query that defines the signal for the condition."""

    runbook_url = sgqlc.types.Field(String, graphql_name="runbookUrl")
    """Runbook URL."""

    signal = sgqlc.types.Field(AlertsNrqlConditionSignalInput, graphql_name="signal")
    """Configuration that defines the signal that the NRQL condition will
    use to evaluate.
    """

    terms = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("AlertsNrqlDynamicConditionTermsInput")
        ),
        graphql_name="terms",
    )
    """List of critical and warning terms for the condition."""

    violation_time_limit = sgqlc.types.Field(
        AlertsViolationTimeLimit, graphql_name="violationTimeLimit"
    )
    """Deprecated - use violationTimeLimitSeconds for full range of
    values.  Duration after which a violation automatically closes.
    Default is THIRTY_DAYS.
    """

    violation_time_limit_seconds = sgqlc.types.Field(
        Seconds, graphql_name="violationTimeLimitSeconds"
    )
    """Duration after which a violation automatically closes in seconds.
    Accepts values between 300 seconds (5 minutes) and 2592000 seconds
    (30 days).  Default is 3 days (259200 seconds).
    """


class AlertsNrqlConditionUpdateOutlierInput(sgqlc.types.Input):
    """Input for updating an outlier NRQL condition."""

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "enabled",
        "expected_groups",
        "expiration",
        "name",
        "nrql",
        "open_violation_on_group_overlap",
        "runbook_url",
        "signal",
        "terms",
        "violation_time_limit",
        "violation_time_limit_seconds",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """The custom violation description."""

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Whether the NRQL condition is enabled."""

    expected_groups = sgqlc.types.Field(Int, graphql_name="expectedGroups")
    """Number of groups expected in the returned values for the
    condition.
    """

    expiration = sgqlc.types.Field(
        AlertsNrqlConditionExpirationInput, graphql_name="expiration"
    )
    """Settings for how violations are opened or closed when a signal
    expires.
    """

    name = sgqlc.types.Field(String, graphql_name="name")
    """Name of the NRQL condition."""

    nrql = sgqlc.types.Field("AlertsNrqlConditionUpdateQueryInput", graphql_name="nrql")
    """The NRQL query that defines the signal for the condition."""

    open_violation_on_group_overlap = sgqlc.types.Field(
        Boolean, graphql_name="openViolationOnGroupOverlap"
    )
    """Whether overlapping groups should produce a violation."""

    runbook_url = sgqlc.types.Field(String, graphql_name="runbookUrl")
    """Runbook URL."""

    signal = sgqlc.types.Field(AlertsNrqlConditionSignalInput, graphql_name="signal")
    """Configuration that defines the signal that the NRQL condition will
    use to evaluate.
    """

    terms = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("AlertsNrqlDynamicConditionTermsInput")
        ),
        graphql_name="terms",
    )
    """List of critical and warning terms for the condition."""

    violation_time_limit = sgqlc.types.Field(
        AlertsViolationTimeLimit, graphql_name="violationTimeLimit"
    )
    """Deprecated - use violationTimeLimitSeconds for full range of
    values.  Duration after which a violation automatically closes.
    Default is THIRTY_DAYS.
    """

    violation_time_limit_seconds = sgqlc.types.Field(
        Seconds, graphql_name="violationTimeLimitSeconds"
    )
    """Duration after which a violation automatically closes in seconds.
    Accepts values between 300 seconds (5 minutes) and 2592000 seconds
    (30 days).  Default is 3 days (259200 seconds).
    """


class AlertsNrqlConditionUpdateQueryInput(sgqlc.types.Input):
    """Information for generating the condition NRQL query. Output from
    this NRQL query will be compared to the condition terms to detect
    violations.
    """

    __schema__ = nerdgraph
    __field_names__ = ("evaluation_offset", "query")
    evaluation_offset = sgqlc.types.Field(Int, graphql_name="evaluationOffset")
    """Deprecated; superseded by `signal.aggregationMethod` with
    `signal.aggregationDelay` or `signal.aggregationTimer`.  By
    default, we evaluate the NRQL query in one-minute time windows.
    Start time depends on the value you select in the NRQL condition's
    `evaluationOffset`. Evaluation offset cannot be greater than 60
    minutes.  This value is the number of time windows we look back at
    the aggregated data.  Example: With an `evaluationOffset` of 3,
    the NRQL time window applied to your query will be:  `SINCE 3
    minutes ago UNTIL 2 minutes ago`
    """

    query = sgqlc.types.Field(String, graphql_name="query")
    """NRQL syntax that defines the query."""


class AlertsNrqlConditionUpdateStaticInput(sgqlc.types.Input):
    """Input for updating a static NRQL condition."""

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "enabled",
        "expiration",
        "name",
        "nrql",
        "runbook_url",
        "signal",
        "terms",
        "value_function",
        "violation_time_limit",
        "violation_time_limit_seconds",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """The custom violation description."""

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Whether the NRQL condition is enabled."""

    expiration = sgqlc.types.Field(
        AlertsNrqlConditionExpirationInput, graphql_name="expiration"
    )
    """Settings for how violations are opened or closed when a signal
    expires.
    """

    name = sgqlc.types.Field(String, graphql_name="name")
    """Name of the NRQL condition."""

    nrql = sgqlc.types.Field(AlertsNrqlConditionUpdateQueryInput, graphql_name="nrql")
    """The NRQL query that defines the signal for the condition."""

    runbook_url = sgqlc.types.Field(String, graphql_name="runbookUrl")
    """Runbook URL."""

    signal = sgqlc.types.Field(AlertsNrqlConditionSignalInput, graphql_name="signal")
    """Configuration that defines the signal that the NRQL condition will
    use to evaluate.
    """

    terms = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AlertsNrqlConditionTermsInput)),
        graphql_name="terms",
    )
    """List of critical and warning terms for the condition."""

    value_function = sgqlc.types.Field(
        AlertsNrqlStaticConditionValueFunction, graphql_name="valueFunction"
    )
    """Deprecated - use `signal.slideBy` instead.  Function used to
    aggregate the NRQL query value(s) for comparison to the
    `terms.threshold`. When the result of this aggregate surpasses the
    `terms.threshold`, a violation is opened.
    """

    violation_time_limit = sgqlc.types.Field(
        AlertsViolationTimeLimit, graphql_name="violationTimeLimit"
    )
    """Deprecated - use violationTimeLimitSeconds for full range of
    values.  Duration after which a violation automatically closes.
    Default is THIRTY_DAYS.
    """

    violation_time_limit_seconds = sgqlc.types.Field(
        Seconds, graphql_name="violationTimeLimitSeconds"
    )
    """Duration after which a violation automatically closes in seconds.
    Accepts values between 300 seconds (5 minutes) and 2592000 seconds
    (30 days).  Default is 3 days (259200 seconds).
    """


class AlertsNrqlConditionsSearchCriteriaInput(sgqlc.types.Input):
    """Search criteria for returning specific NRQL conditions."""

    __schema__ = nerdgraph
    __field_names__ = (
        "name",
        "name_like",
        "policy_id",
        "query",
        "query_like",
        "terms_operator",
    )
    name = sgqlc.types.Field(String, graphql_name="name")
    """Exact name of the NRQL condition."""

    name_like = sgqlc.types.Field(String, graphql_name="nameLike")
    """String to partially match a NRQL condition name."""

    policy_id = sgqlc.types.Field(ID, graphql_name="policyId")
    """Policy ID associated with the NRQL condition."""

    query = sgqlc.types.Field(String, graphql_name="query")
    """Exact NRQL query used in the NRQL condition."""

    query_like = sgqlc.types.Field(String, graphql_name="queryLike")
    """String to partially match the NRQL query used in the NRQL
    condition.
    """

    terms_operator = sgqlc.types.Field(
        AlertsNrqlConditionTermsOperator, graphql_name="termsOperator"
    )
    """Terms operator to match while searching for NRQL conditions."""


class AlertsNrqlDynamicConditionTermsInput(sgqlc.types.Input):
    """NRQL condition terms determine when a violation will be opened."""

    __schema__ = nerdgraph
    __field_names__ = (
        "operator",
        "priority",
        "threshold",
        "threshold_duration",
        "threshold_occurrences",
    )
    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlDynamicConditionTermsOperator),
        graphql_name="operator",
    )
    """Operator used to compare against the threshold."""

    priority = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionPriority), graphql_name="priority"
    )
    """Priority determines whether notifications will be sent for
    violations or not.
    """

    threshold = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="threshold")
    """Value that triggers a violation."""

    threshold_duration = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="thresholdDuration"
    )
    """The duration, in seconds, that the threshold must violate in order
    to create a violation. Value must be within 120-3600 seconds and a
    multiple of the aggregation window for baseline and outlier
    conditions. (Default aggregation window duration is 60 seconds.)
    """

    threshold_occurrences = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionThresholdOccurrences),
        graphql_name="thresholdOccurrences",
    )
    """How many data points must be in violation for the specified
    threshold duration.
    """


class AlertsOpsGenieNotificationChannelCreateInput(sgqlc.types.Input):
    """The input for creating a new OpsGenie notification channel."""

    __schema__ = nerdgraph
    __field_names__ = (
        "api_key",
        "data_center_region",
        "name",
        "recipients",
        "tags",
        "teams",
    )
    api_key = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="apiKey"
    )
    """API key."""

    data_center_region = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsOpsGenieDataCenterRegion),
        graphql_name="dataCenterRegion",
    )
    """OpsGenie data center region."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Notification channel name."""

    recipients = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="recipients"
    )
    """List of email recipients."""

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="tags"
    )
    """Tags."""

    teams = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="teams"
    )
    """Teams."""


class AlertsOpsGenieNotificationChannelUpdateInput(sgqlc.types.Input):
    """The input for updating an existing OpsGenie notification channel."""

    __schema__ = nerdgraph
    __field_names__ = (
        "api_key",
        "data_center_region",
        "name",
        "recipients",
        "tags",
        "teams",
    )
    api_key = sgqlc.types.Field(SecureValue, graphql_name="apiKey")
    """API key."""

    data_center_region = sgqlc.types.Field(
        AlertsOpsGenieDataCenterRegion, graphql_name="dataCenterRegion"
    )
    """OpsGenie data center region."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Notification channel name."""

    recipients = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="recipients"
    )
    """List of email recipients."""

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="tags"
    )
    """Tags."""

    teams = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="teams"
    )
    """Teams."""


class AlertsPagerDutyNotificationChannelCreateInput(sgqlc.types.Input):
    """The input for creating a new PagerDuty notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("api_key", "name")
    api_key = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="apiKey"
    )
    """API key."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Notification channel name."""


class AlertsPagerDutyNotificationChannelUpdateInput(sgqlc.types.Input):
    """The input for updating an existing PagerDuty notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("api_key", "name")
    api_key = sgqlc.types.Field(SecureValue, graphql_name="apiKey")
    """API key."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Notification channel name."""


class AlertsPoliciesSearchCriteriaInput(sgqlc.types.Input):
    """Search criteria for returning specific policies."""

    __schema__ = nerdgraph
    __field_names__ = ("ids", "name", "name_like")
    ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name="ids"
    )
    """The list of policy ids to return."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Exact name of the policy."""

    name_like = sgqlc.types.Field(String, graphql_name="nameLike")
    """String to partially match a policy name."""


class AlertsPolicyInput(sgqlc.types.Input):
    """Container for conditions with associated notifications channels."""

    __schema__ = nerdgraph
    __field_names__ = ("incident_preference", "name")
    incident_preference = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsIncidentPreference),
        graphql_name="incidentPreference",
    )
    """Determines how incidents are created for critical violations of
    the conditions contained in the policy.
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Description of the policy."""


class AlertsPolicyUpdateInput(sgqlc.types.Input):
    """Policy fields to be updated."""

    __schema__ = nerdgraph
    __field_names__ = ("incident_preference", "name")
    incident_preference = sgqlc.types.Field(
        AlertsIncidentPreference, graphql_name="incidentPreference"
    )
    """Determines how incidents are created for critical violations of
    the conditions contained in the policy.
    """

    name = sgqlc.types.Field(String, graphql_name="name")
    """Description of the policy."""


class AlertsSlackNotificationChannelCreateInput(sgqlc.types.Input):
    """The input for creating a new Slack notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("name", "team_channel", "url")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Notification channel name."""

    team_channel = sgqlc.types.Field(String, graphql_name="teamChannel")
    """Slack channel name."""

    url = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="url")
    """Slack channel URL."""


class AlertsSlackNotificationChannelUpdateInput(sgqlc.types.Input):
    """The input for updating an existing Slack notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("name", "team_channel", "url")
    name = sgqlc.types.Field(String, graphql_name="name")
    """Notification channel name."""

    team_channel = sgqlc.types.Field(String, graphql_name="teamChannel")
    """Slack channel name."""

    url = sgqlc.types.Field(SecureValue, graphql_name="url")
    """Slack channel URL."""


class AlertsVictorOpsNotificationChannelCreateInput(sgqlc.types.Input):
    """The input for creating a new VictorOps notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "name", "route_key")
    key = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="key")
    """Key."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Notification channel name."""

    route_key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="routeKey")
    """Route key."""


class AlertsVictorOpsNotificationChannelUpdateInput(sgqlc.types.Input):
    """The input for updating an existing VictorOps notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "name", "route_key")
    key = sgqlc.types.Field(SecureValue, graphql_name="key")
    """Key."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Notification channel name."""

    route_key = sgqlc.types.Field(String, graphql_name="routeKey")
    """Route key."""


class AlertsWebhookBasicAuthMutationInput(sgqlc.types.Input):
    """Webhook basic auth"""

    __schema__ = nerdgraph
    __field_names__ = ("password", "username")
    password = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="password"
    )
    """Password"""

    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="username")
    """Username"""


class AlertsWebhookCustomHeaderMutationInput(sgqlc.types.Input):
    """Webhook header"""

    __schema__ = nerdgraph
    __field_names__ = ("name", "value")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Header name"""

    value = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="value")
    """Header value"""


class AlertsWebhookNotificationChannelCreateInput(sgqlc.types.Input):
    """The input for creating a new Webhook notification channel."""

    __schema__ = nerdgraph
    __field_names__ = (
        "base_url",
        "basic_auth",
        "custom_http_headers",
        "custom_payload_body",
        "custom_payload_type",
        "name",
    )
    base_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="baseUrl")
    """Base URL."""

    basic_auth = sgqlc.types.Field(
        AlertsWebhookBasicAuthMutationInput, graphql_name="basicAuth"
    )
    """Basic auth."""

    custom_http_headers = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AlertsWebhookCustomHeaderMutationInput)
        ),
        graphql_name="customHttpHeaders",
    )
    """Custom HTTP headers."""

    custom_payload_body = sgqlc.types.Field(String, graphql_name="customPayloadBody")
    """Custom payload body."""

    custom_payload_type = sgqlc.types.Field(
        AlertsWebhookCustomPayloadType, graphql_name="customPayloadType"
    )
    """Custom payload type."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Notification channel name."""


class AlertsWebhookNotificationChannelUpdateInput(sgqlc.types.Input):
    """The input for updating an existing Webhook notification channel."""

    __schema__ = nerdgraph
    __field_names__ = (
        "base_url",
        "basic_auth",
        "custom_http_headers",
        "custom_payload_body",
        "custom_payload_type",
        "name",
    )
    base_url = sgqlc.types.Field(String, graphql_name="baseUrl")
    """Base URL."""

    basic_auth = sgqlc.types.Field(
        AlertsWebhookBasicAuthMutationInput, graphql_name="basicAuth"
    )
    """Basic auth."""

    custom_http_headers = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AlertsWebhookCustomHeaderMutationInput)
        ),
        graphql_name="customHttpHeaders",
    )
    """Custom HTTP headers."""

    custom_payload_body = sgqlc.types.Field(String, graphql_name="customPayloadBody")
    """Custom payload body."""

    custom_payload_type = sgqlc.types.Field(
        AlertsWebhookCustomPayloadType, graphql_name="customPayloadType"
    )
    """Custom payload type."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Notification channel name."""


class AlertsXMattersNotificationChannelCreateInput(sgqlc.types.Input):
    """The input for creating a new xMatters notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("integration_url", "name")
    integration_url = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="integrationUrl"
    )
    """Integration URL."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Notification channel name."""


class AlertsXMattersNotificationChannelUpdateInput(sgqlc.types.Input):
    """The input for updating an existing xMatters notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("integration_url", "name")
    integration_url = sgqlc.types.Field(SecureValue, graphql_name="integrationUrl")
    """Integration URL."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Notification channel name."""


class ApiAccessCreateIngestKeyInput(sgqlc.types.Input):
    """The input for any ingest keys you want to create. Each ingest key
    must have a type that communicates what kind of data it is for.
    You can optionally add a name or notes to your key, which can be
    updated later.
    """

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "ingest_type", "name", "notes")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account ID indicating which account you want to make the key
    for. This cannot be updated once created.
    """

    ingest_type = sgqlc.types.Field(
        sgqlc.types.non_null(ApiAccessIngestKeyType), graphql_name="ingestType"
    )
    """The type of ingest key you want to create. This cannot be updated
    once created.
    """

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the key. This can be updated later."""

    notes = sgqlc.types.Field(String, graphql_name="notes")
    """Any notes about this ingest key. This can be updated later."""


class ApiAccessCreateInput(sgqlc.types.Input):
    """The input object to create one or more keys."""

    __schema__ = nerdgraph
    __field_names__ = ("ingest", "user")
    ingest = sgqlc.types.Field(
        sgqlc.types.list_of(ApiAccessCreateIngestKeyInput), graphql_name="ingest"
    )
    """Ingest keys are used by agents to report data about your
    applications to New Relic. Each ingest key input entered here must
    have a type that communicates what kind of data it is for. You can
    optionally add a name or notes to your key, which can be updated
    later.
    """

    user = sgqlc.types.Field(
        sgqlc.types.list_of("ApiAccessCreateUserKeyInput"), graphql_name="user"
    )
    """Create user keys. You can optionally add a name or notes to your
    key, which can be updated later.
    """


class ApiAccessCreateUserKeyInput(sgqlc.types.Input):
    """The input for any ingest keys you want to create. Each ingest key
    must have a type that communicates what kind of data it is for.
    You can optionally add a name or notes to your key, which can be
    updated later.
    """

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "name", "notes", "user_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account ID indicating which account you want to make the key
    for. This cannot be updated once created.
    """

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the key. This can be updated later."""

    notes = sgqlc.types.Field(String, graphql_name="notes")
    """Any notes about this ingest key. This can be updated later."""

    user_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="userId")
    """The user ID indicating which user you want to make the key for.
    This cannot be updated once created.
    """


class ApiAccessDeleteInput(sgqlc.types.Input):
    """The input to delete keys."""

    __schema__ = nerdgraph
    __field_names__ = ("ingest_key_ids", "user_key_ids")
    ingest_key_ids = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="ingestKeyIds"
    )
    """A list of the ingest key `id`s that you want to delete."""

    user_key_ids = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="userKeyIds"
    )
    """A list of the user key `id`s that you want to delete."""


class ApiAccessKeySearchQuery(sgqlc.types.Input):
    """Parameters by which to filter the search."""

    __schema__ = nerdgraph
    __field_names__ = ("scope", "types")
    scope = sgqlc.types.Field("ApiAccessKeySearchScope", graphql_name="scope")
    """Criteria by which to narrow the scope of keys to be returned."""

    types = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(ApiAccessKeyType)),
        graphql_name="types",
    )
    """A list of key types to be included in the search. If no types are
    provided, all types will be returned by default.
    """


class ApiAccessKeySearchScope(sgqlc.types.Input):
    """The scope of keys to be returned. Note that some filters only
    apply to certain key types.
    """

    __schema__ = nerdgraph
    __field_names__ = ("account_ids", "ingest_types", "user_ids")
    account_ids = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name="accountIds")
    """A list of key account IDs."""

    ingest_types = sgqlc.types.Field(
        sgqlc.types.list_of(ApiAccessIngestKeyType), graphql_name="ingestTypes"
    )
    """The ingest type of the key. Only applies to ingest keys, and does
    not affect user key filtering.
    """

    user_ids = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name="userIds")
    """A list of key user ids. Only applies to user keys, and does not
    affect ingest key filtering.
    """


class ApiAccessUpdateIngestKeyInput(sgqlc.types.Input):
    """The `id` and data to update one or more keys."""

    __schema__ = nerdgraph
    __field_names__ = ("key_id", "name", "notes")
    key_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="keyId")
    """The `id` of the key you want to update."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name you want to assign to the key."""

    notes = sgqlc.types.Field(String, graphql_name="notes")
    """The notes you want to assign to the key."""


class ApiAccessUpdateInput(sgqlc.types.Input):
    """The `id` and data to update one or more keys."""

    __schema__ = nerdgraph
    __field_names__ = ("ingest", "user")
    ingest = sgqlc.types.Field(
        sgqlc.types.list_of(ApiAccessUpdateIngestKeyInput), graphql_name="ingest"
    )
    """A list of the configurations of each ingest key you want to
    update.
    """

    user = sgqlc.types.Field(
        sgqlc.types.list_of("ApiAccessUpdateUserKeyInput"), graphql_name="user"
    )
    """A list of the configurations of each user key you want to update."""


class ApiAccessUpdateUserKeyInput(sgqlc.types.Input):
    """The `id` and data to update one or more keys."""

    __schema__ = nerdgraph
    __field_names__ = ("key_id", "name", "notes")
    key_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="keyId")
    """The `id` of the key you want to update."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name you want to assign to the key."""

    notes = sgqlc.types.Field(String, graphql_name="notes")
    """The notes you want to assign to the key."""


class ApmApplicationEntitySettings(sgqlc.types.Input):
    """The ApmApplicationEntity's settings to update."""

    __schema__ = nerdgraph
    __field_names__ = ("apdex_target",)
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")
    """The ApmApplicationEntity's apdex target. For documentation on
    using apdex effectively, visit [our docs about
    apdex](https://docs.newrelic.com/docs/apm/new-relic-
    apm/apdex/apdex-measure-user-satisfaction).
    """


class AuthorizationManagementAccountAccessGrant(sgqlc.types.Input):
    """The Account and Role a Group should have access to"""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "role_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The Account ID the Role will grant access to"""

    role_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="roleId")
    """The Role ID that will define the access"""


class AuthorizationManagementGrantAccess(sgqlc.types.Input):
    """The input object representing the access to grant for the group"""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_access_grants",
        "group_id",
        "organization_access_grants",
    )
    account_access_grants = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AuthorizationManagementAccountAccessGrant)
        ),
        graphql_name="accountAccessGrants",
    )
    """The Role and the Account the Group should have access to"""

    group_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="groupId")
    """The Group ID that will have access granted"""

    organization_access_grants = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("AuthorizationManagementOrganizationAccessGrant")
        ),
        graphql_name="organizationAccessGrants",
    )
    """The Role and the Organization the Group should have access to"""


class AuthorizationManagementOrganizationAccessGrant(sgqlc.types.Input):
    """The Organization Role a Group should have access to"""

    __schema__ = nerdgraph
    __field_names__ = ("role_id",)
    role_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="roleId")
    """The Role ID that will define the Organization access"""


class AuthorizationManagementRevokeAccess(sgqlc.types.Input):
    """The input object representing the access to revoke for the group"""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_access_grants",
        "group_id",
        "organization_access_grants",
    )
    account_access_grants = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AuthorizationManagementAccountAccessGrant)
        ),
        graphql_name="accountAccessGrants",
    )
    """The Role and the Account the Group should no longer have access to"""

    group_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="groupId")
    """The Group ID that will have access revoked"""

    organization_access_grants = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AuthorizationManagementOrganizationAccessGrant)
        ),
        graphql_name="organizationAccessGrants",
    )
    """The Role and the Organization the Group should no longer have
    access to
    """


class CloudAlbIntegrationInput(sgqlc.types.Input):
    """Elastic Load Balancing - Application Load Balancer (ALB)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "load_balancer_prefixes",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    load_balancer_prefixes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="loadBalancerPrefixes"
    )
    """Specify each name or prefix for the LBs that you want to monitor.
    Filter values are case-sensitive.
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudApigatewayIntegrationInput(sgqlc.types.Input):
    """Amazon API Gateway"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "stage_prefixes",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    stage_prefixes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="stagePrefixes"
    )
    """Specify each name or prefix for the Stages that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudAutoscalingIntegrationInput(sgqlc.types.Input):
    """AWS Auto Scaling"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsAppsyncIntegrationInput(sgqlc.types.Input):
    """AppSync"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsAthenaIntegrationInput(sgqlc.types.Input):
    """Athena"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsCognitoIntegrationInput(sgqlc.types.Input):
    """Cognito"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsConnectIntegrationInput(sgqlc.types.Input):
    """Connect"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsDirectconnectIntegrationInput(sgqlc.types.Input):
    """Direct Connect"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsDisableIntegrationsInput(sgqlc.types.Input):
    """List of integrations"""

    __schema__ = nerdgraph
    __field_names__ = (
        "alb",
        "apigateway",
        "autoscaling",
        "aws_appsync",
        "aws_athena",
        "aws_cognito",
        "aws_connect",
        "aws_directconnect",
        "aws_docdb",
        "aws_fsx",
        "aws_glue",
        "aws_kinesisanalytics",
        "aws_mediaconvert",
        "aws_mediapackagevod",
        "aws_metadata",
        "aws_mq",
        "aws_msk",
        "aws_neptune",
        "aws_qldb",
        "aws_route53resolver",
        "aws_states",
        "aws_tags_global",
        "aws_transitgateway",
        "aws_waf",
        "aws_wafv2",
        "aws_xray",
        "billing",
        "cloudfront",
        "cloudtrail",
        "dynamodb",
        "ebs",
        "ec2",
        "ecs",
        "efs",
        "elasticache",
        "elasticbeanstalk",
        "elasticsearch",
        "elb",
        "emr",
        "health",
        "iam",
        "iot",
        "kinesis",
        "kinesis_firehose",
        "lambda_",
        "rds",
        "redshift",
        "route53",
        "s3",
        "ses",
        "sns",
        "sqs",
        "trustedadvisor",
        "vpc",
    )
    alb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="alb"
    )
    """ALB/NLB integration"""

    apigateway = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="apigateway",
    )
    """API Gateway integration"""

    autoscaling = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="autoscaling",
    )
    """AutoScaling integration"""

    aws_appsync = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsAppsync",
    )
    """AppSync integration"""

    aws_athena = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsAthena",
    )
    """Athena integration"""

    aws_cognito = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsCognito",
    )
    """Cognito integration"""

    aws_connect = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsConnect",
    )
    """Connect integration"""

    aws_directconnect = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsDirectconnect",
    )
    """Direct Connect integration"""

    aws_docdb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsDocdb",
    )
    """DocumentDB integration"""

    aws_fsx = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsFsx",
    )
    """FSx integration"""

    aws_glue = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsGlue",
    )
    """Glue integration"""

    aws_kinesisanalytics = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsKinesisanalytics",
    )
    """Kinesis Data Analytics integration"""

    aws_mediaconvert = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsMediaconvert",
    )
    """Elemental MediaConvert integration"""

    aws_mediapackagevod = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsMediapackagevod",
    )
    """MediaPackage VOD integration"""

    aws_metadata = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsMetadata",
    )
    """Fetch Metadata for AWS integrations integration"""

    aws_mq = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="awsMq"
    )
    """MQ integration"""

    aws_msk = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsMsk",
    )
    """Managed Kafka integration"""

    aws_neptune = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsNeptune",
    )
    """Neptune integration"""

    aws_qldb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsQldb",
    )
    """QLDB integration"""

    aws_route53resolver = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsRoute53resolver",
    )
    """Route53 Resolver integration"""

    aws_states = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsStates",
    )
    """Step Functions integration"""

    aws_tags_global = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsTagsGlobal",
    )
    """Fetch tags for all integrations integration"""

    aws_transitgateway = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsTransitgateway",
    )
    """Transit Gateway integration"""

    aws_waf = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsWaf",
    )
    """WAF integration"""

    aws_wafv2 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsWafv2",
    )
    """WAFV2 integration"""

    aws_xray = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsXray",
    )
    """X-Ray integration"""

    billing = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="billing",
    )
    """Billing integration"""

    cloudfront = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="cloudfront",
    )
    """CloudFront integration"""

    cloudtrail = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="cloudtrail",
    )
    """CloudTrail integration"""

    dynamodb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="dynamodb",
    )
    """DynamoDB integration"""

    ebs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="ebs"
    )
    """EBS integration"""

    ec2 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="ec2"
    )
    """EC2 integration"""

    ecs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="ecs"
    )
    """ECS integration"""

    efs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="efs"
    )
    """EFS integration"""

    elasticache = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="elasticache",
    )
    """ElastiCache integration"""

    elasticbeanstalk = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="elasticbeanstalk",
    )
    """Elastic Beanstalk integration"""

    elasticsearch = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="elasticsearch",
    )
    """Elasticsearch Service integration"""

    elb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="elb"
    )
    """ELB (Classic) integration"""

    emr = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="emr"
    )
    """EMR integration"""

    health = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="health",
    )
    """Health integration"""

    iam = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="iam"
    )
    """IAM integration"""

    iot = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="iot"
    )
    """IoT integration"""

    kinesis = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="kinesis",
    )
    """Kinesis Streams integration"""

    kinesis_firehose = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="kinesisFirehose",
    )
    """Kinesis Firehose integration"""

    lambda_ = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="lambda",
    )
    """Lambda integration"""

    rds = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="rds"
    )
    """RDS integration"""

    redshift = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="redshift",
    )
    """Redshift integration"""

    route53 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="route53",
    )
    """Route 53 integration"""

    s3 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="s3"
    )
    """S3 integration"""

    ses = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="ses"
    )
    """SES integration"""

    sns = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="sns"
    )
    """SNS integration"""

    sqs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="sqs"
    )
    """SQS integration"""

    trustedadvisor = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="trustedadvisor",
    )
    """Trusted Advisor integration"""

    vpc = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="vpc"
    )
    """VPC integration"""


class CloudAwsDocdbIntegrationInput(sgqlc.types.Input):
    """DocumentDB"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsFsxIntegrationInput(sgqlc.types.Input):
    """FSx"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsGlueIntegrationInput(sgqlc.types.Input):
    """Glue"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsGovcloudDisableIntegrationsInput(sgqlc.types.Input):
    """List of integrations"""

    __schema__ = nerdgraph
    __field_names__ = (
        "alb",
        "apigateway",
        "autoscaling",
        "aws_directconnect",
        "aws_states",
        "cloudtrail",
        "dynamodb",
        "ebs",
        "ec2",
        "elasticsearch",
        "elb",
        "emr",
        "iam",
        "lambda_",
        "rds",
        "redshift",
        "route53",
        "s3",
        "sns",
        "sqs",
    )
    alb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="alb"
    )
    """ALB/NLB integration"""

    apigateway = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="apigateway",
    )
    """API Gateway integration"""

    autoscaling = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="autoscaling",
    )
    """AutoScaling integration"""

    aws_directconnect = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsDirectconnect",
    )
    """Direct Connect integration"""

    aws_states = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="awsStates",
    )
    """Step Functions integration"""

    cloudtrail = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="cloudtrail",
    )
    """CloudTrail integration"""

    dynamodb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="dynamodb",
    )
    """DynamoDB integration"""

    ebs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="ebs"
    )
    """EBS integration"""

    ec2 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="ec2"
    )
    """EC2 integration"""

    elasticsearch = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="elasticsearch",
    )
    """Elasticsearch Service integration"""

    elb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="elb"
    )
    """ELB (Classic) integration"""

    emr = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="emr"
    )
    """EMR integration"""

    iam = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="iam"
    )
    """IAM integration"""

    lambda_ = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="lambda",
    )
    """Lambda integration"""

    rds = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="rds"
    )
    """RDS integration"""

    redshift = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="redshift",
    )
    """Redshift integration"""

    route53 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="route53",
    )
    """Route 53 integration"""

    s3 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="s3"
    )
    """S3 integration"""

    sns = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="sns"
    )
    """SNS integration"""

    sqs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"), graphql_name="sqs"
    )
    """SQS integration"""


class CloudAwsGovcloudIntegrationsInput(sgqlc.types.Input):
    """List of integrations"""

    __schema__ = nerdgraph
    __field_names__ = (
        "alb",
        "apigateway",
        "autoscaling",
        "aws_directconnect",
        "aws_states",
        "cloudtrail",
        "dynamodb",
        "ebs",
        "ec2",
        "elasticsearch",
        "elb",
        "emr",
        "iam",
        "lambda_",
        "rds",
        "redshift",
        "route53",
        "s3",
        "sns",
        "sqs",
    )
    alb = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAlbIntegrationInput), graphql_name="alb"
    )
    """ALB/NLB integration"""

    apigateway = sgqlc.types.Field(
        sgqlc.types.list_of(CloudApigatewayIntegrationInput), graphql_name="apigateway"
    )
    """API Gateway integration"""

    autoscaling = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAutoscalingIntegrationInput),
        graphql_name="autoscaling",
    )
    """AutoScaling integration"""

    aws_directconnect = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAwsDirectconnectIntegrationInput),
        graphql_name="awsDirectconnect",
    )
    """Direct Connect integration"""

    aws_states = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsStatesIntegrationInput"), graphql_name="awsStates"
    )
    """Step Functions integration"""

    cloudtrail = sgqlc.types.Field(
        sgqlc.types.list_of("CloudCloudtrailIntegrationInput"),
        graphql_name="cloudtrail",
    )
    """CloudTrail integration"""

    dynamodb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDynamodbIntegrationInput"), graphql_name="dynamodb"
    )
    """DynamoDB integration"""

    ebs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudEbsIntegrationInput"), graphql_name="ebs"
    )
    """EBS integration"""

    ec2 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudEc2IntegrationInput"), graphql_name="ec2"
    )
    """EC2 integration"""

    elasticsearch = sgqlc.types.Field(
        sgqlc.types.list_of("CloudElasticsearchIntegrationInput"),
        graphql_name="elasticsearch",
    )
    """Elasticsearch Service integration"""

    elb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudElbIntegrationInput"), graphql_name="elb"
    )
    """ELB (Classic) integration"""

    emr = sgqlc.types.Field(
        sgqlc.types.list_of("CloudEmrIntegrationInput"), graphql_name="emr"
    )
    """EMR integration"""

    iam = sgqlc.types.Field(
        sgqlc.types.list_of("CloudIamIntegrationInput"), graphql_name="iam"
    )
    """IAM integration"""

    lambda_ = sgqlc.types.Field(
        sgqlc.types.list_of("CloudLambdaIntegrationInput"), graphql_name="lambda"
    )
    """Lambda integration"""

    rds = sgqlc.types.Field(
        sgqlc.types.list_of("CloudRdsIntegrationInput"), graphql_name="rds"
    )
    """RDS integration"""

    redshift = sgqlc.types.Field(
        sgqlc.types.list_of("CloudRedshiftIntegrationInput"), graphql_name="redshift"
    )
    """Redshift integration"""

    route53 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudRoute53IntegrationInput"), graphql_name="route53"
    )
    """Route 53 integration"""

    s3 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudS3IntegrationInput"), graphql_name="s3"
    )
    """S3 integration"""

    sns = sgqlc.types.Field(
        sgqlc.types.list_of("CloudSnsIntegrationInput"), graphql_name="sns"
    )
    """SNS integration"""

    sqs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudSqsIntegrationInput"), graphql_name="sqs"
    )
    """SQS integration"""


class CloudAwsGovcloudLinkAccountInput(sgqlc.types.Input):
    """Information required to link an AWS GovCloud account to a NewRelic
    account.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "access_key_id",
        "aws_account_id",
        "metric_collection_mode",
        "name",
        "secret_access_key",
    )
    access_key_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="accessKeyId"
    )
    """The key used to make requests to AWS service APIs"""

    aws_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="awsAccountId"
    )
    """The AWS account id"""

    metric_collection_mode = sgqlc.types.Field(
        CloudMetricCollectionMode, graphql_name="metricCollectionMode"
    )
    """How metrics will be collected."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The linked account name."""

    secret_access_key = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="secretAccessKey"
    )
    """The secret key used to make requests to AWS service APIs"""


class CloudAwsIntegrationsInput(sgqlc.types.Input):
    """List of integrations"""

    __schema__ = nerdgraph
    __field_names__ = (
        "alb",
        "apigateway",
        "autoscaling",
        "aws_appsync",
        "aws_athena",
        "aws_cognito",
        "aws_connect",
        "aws_directconnect",
        "aws_docdb",
        "aws_fsx",
        "aws_glue",
        "aws_kinesisanalytics",
        "aws_mediaconvert",
        "aws_mediapackagevod",
        "aws_metadata",
        "aws_mq",
        "aws_msk",
        "aws_neptune",
        "aws_qldb",
        "aws_route53resolver",
        "aws_states",
        "aws_tags_global",
        "aws_transitgateway",
        "aws_waf",
        "aws_wafv2",
        "aws_xray",
        "billing",
        "cloudfront",
        "cloudtrail",
        "dynamodb",
        "ebs",
        "ec2",
        "ecs",
        "efs",
        "elasticache",
        "elasticbeanstalk",
        "elasticsearch",
        "elb",
        "emr",
        "health",
        "iam",
        "iot",
        "kinesis",
        "kinesis_firehose",
        "lambda_",
        "rds",
        "redshift",
        "route53",
        "s3",
        "ses",
        "sns",
        "sqs",
        "trustedadvisor",
        "vpc",
    )
    alb = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAlbIntegrationInput), graphql_name="alb"
    )
    """ALB/NLB integration"""

    apigateway = sgqlc.types.Field(
        sgqlc.types.list_of(CloudApigatewayIntegrationInput), graphql_name="apigateway"
    )
    """API Gateway integration"""

    autoscaling = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAutoscalingIntegrationInput),
        graphql_name="autoscaling",
    )
    """AutoScaling integration"""

    aws_appsync = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAwsAppsyncIntegrationInput), graphql_name="awsAppsync"
    )
    """AppSync integration"""

    aws_athena = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAwsAthenaIntegrationInput), graphql_name="awsAthena"
    )
    """Athena integration"""

    aws_cognito = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAwsCognitoIntegrationInput), graphql_name="awsCognito"
    )
    """Cognito integration"""

    aws_connect = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAwsConnectIntegrationInput), graphql_name="awsConnect"
    )
    """Connect integration"""

    aws_directconnect = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAwsDirectconnectIntegrationInput),
        graphql_name="awsDirectconnect",
    )
    """Direct Connect integration"""

    aws_docdb = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAwsDocdbIntegrationInput), graphql_name="awsDocdb"
    )
    """DocumentDB integration"""

    aws_fsx = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAwsFsxIntegrationInput), graphql_name="awsFsx"
    )
    """FSx integration"""

    aws_glue = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAwsGlueIntegrationInput), graphql_name="awsGlue"
    )
    """Glue integration"""

    aws_kinesisanalytics = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsKinesisanalyticsIntegrationInput"),
        graphql_name="awsKinesisanalytics",
    )
    """Kinesis Data Analytics integration"""

    aws_mediaconvert = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsMediaconvertIntegrationInput"),
        graphql_name="awsMediaconvert",
    )
    """Elemental MediaConvert integration"""

    aws_mediapackagevod = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsMediapackagevodIntegrationInput"),
        graphql_name="awsMediapackagevod",
    )
    """MediaPackage VOD integration"""

    aws_metadata = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsMetadataIntegrationInput"),
        graphql_name="awsMetadata",
    )
    """Fetch Metadata for AWS integrations integration"""

    aws_mq = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsMqIntegrationInput"), graphql_name="awsMq"
    )
    """MQ integration"""

    aws_msk = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsMskIntegrationInput"), graphql_name="awsMsk"
    )
    """Managed Kafka integration"""

    aws_neptune = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsNeptuneIntegrationInput"),
        graphql_name="awsNeptune",
    )
    """Neptune integration"""

    aws_qldb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsQldbIntegrationInput"), graphql_name="awsQldb"
    )
    """QLDB integration"""

    aws_route53resolver = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsRoute53resolverIntegrationInput"),
        graphql_name="awsRoute53resolver",
    )
    """Route53 Resolver integration"""

    aws_states = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsStatesIntegrationInput"), graphql_name="awsStates"
    )
    """Step Functions integration"""

    aws_tags_global = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsTagsGlobalIntegrationInput"),
        graphql_name="awsTagsGlobal",
    )
    """Fetch tags for all integrations integration"""

    aws_transitgateway = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsTransitgatewayIntegrationInput"),
        graphql_name="awsTransitgateway",
    )
    """Transit Gateway integration"""

    aws_waf = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsWafIntegrationInput"), graphql_name="awsWaf"
    )
    """WAF integration"""

    aws_wafv2 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsWafv2IntegrationInput"), graphql_name="awsWafv2"
    )
    """WAFV2 integration"""

    aws_xray = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAwsXrayIntegrationInput"), graphql_name="awsXray"
    )
    """X-Ray integration"""

    billing = sgqlc.types.Field(
        sgqlc.types.list_of("CloudBillingIntegrationInput"), graphql_name="billing"
    )
    """Billing integration"""

    cloudfront = sgqlc.types.Field(
        sgqlc.types.list_of("CloudCloudfrontIntegrationInput"),
        graphql_name="cloudfront",
    )
    """CloudFront integration"""

    cloudtrail = sgqlc.types.Field(
        sgqlc.types.list_of("CloudCloudtrailIntegrationInput"),
        graphql_name="cloudtrail",
    )
    """CloudTrail integration"""

    dynamodb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDynamodbIntegrationInput"), graphql_name="dynamodb"
    )
    """DynamoDB integration"""

    ebs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudEbsIntegrationInput"), graphql_name="ebs"
    )
    """EBS integration"""

    ec2 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudEc2IntegrationInput"), graphql_name="ec2"
    )
    """EC2 integration"""

    ecs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudEcsIntegrationInput"), graphql_name="ecs"
    )
    """ECS integration"""

    efs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudEfsIntegrationInput"), graphql_name="efs"
    )
    """EFS integration"""

    elasticache = sgqlc.types.Field(
        sgqlc.types.list_of("CloudElasticacheIntegrationInput"),
        graphql_name="elasticache",
    )
    """ElastiCache integration"""

    elasticbeanstalk = sgqlc.types.Field(
        sgqlc.types.list_of("CloudElasticbeanstalkIntegrationInput"),
        graphql_name="elasticbeanstalk",
    )
    """Elastic Beanstalk integration"""

    elasticsearch = sgqlc.types.Field(
        sgqlc.types.list_of("CloudElasticsearchIntegrationInput"),
        graphql_name="elasticsearch",
    )
    """Elasticsearch Service integration"""

    elb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudElbIntegrationInput"), graphql_name="elb"
    )
    """ELB (Classic) integration"""

    emr = sgqlc.types.Field(
        sgqlc.types.list_of("CloudEmrIntegrationInput"), graphql_name="emr"
    )
    """EMR integration"""

    health = sgqlc.types.Field(
        sgqlc.types.list_of("CloudHealthIntegrationInput"), graphql_name="health"
    )
    """Health integration"""

    iam = sgqlc.types.Field(
        sgqlc.types.list_of("CloudIamIntegrationInput"), graphql_name="iam"
    )
    """IAM integration"""

    iot = sgqlc.types.Field(
        sgqlc.types.list_of("CloudIotIntegrationInput"), graphql_name="iot"
    )
    """IoT integration"""

    kinesis = sgqlc.types.Field(
        sgqlc.types.list_of("CloudKinesisIntegrationInput"), graphql_name="kinesis"
    )
    """Kinesis Streams integration"""

    kinesis_firehose = sgqlc.types.Field(
        sgqlc.types.list_of("CloudKinesisFirehoseIntegrationInput"),
        graphql_name="kinesisFirehose",
    )
    """Kinesis Firehose integration"""

    lambda_ = sgqlc.types.Field(
        sgqlc.types.list_of("CloudLambdaIntegrationInput"), graphql_name="lambda"
    )
    """Lambda integration"""

    rds = sgqlc.types.Field(
        sgqlc.types.list_of("CloudRdsIntegrationInput"), graphql_name="rds"
    )
    """RDS integration"""

    redshift = sgqlc.types.Field(
        sgqlc.types.list_of("CloudRedshiftIntegrationInput"), graphql_name="redshift"
    )
    """Redshift integration"""

    route53 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudRoute53IntegrationInput"), graphql_name="route53"
    )
    """Route 53 integration"""

    s3 = sgqlc.types.Field(
        sgqlc.types.list_of("CloudS3IntegrationInput"), graphql_name="s3"
    )
    """S3 integration"""

    ses = sgqlc.types.Field(
        sgqlc.types.list_of("CloudSesIntegrationInput"), graphql_name="ses"
    )
    """SES integration"""

    sns = sgqlc.types.Field(
        sgqlc.types.list_of("CloudSnsIntegrationInput"), graphql_name="sns"
    )
    """SNS integration"""

    sqs = sgqlc.types.Field(
        sgqlc.types.list_of("CloudSqsIntegrationInput"), graphql_name="sqs"
    )
    """SQS integration"""

    trustedadvisor = sgqlc.types.Field(
        sgqlc.types.list_of("CloudTrustedadvisorIntegrationInput"),
        graphql_name="trustedadvisor",
    )
    """Trusted Advisor integration"""

    vpc = sgqlc.types.Field(
        sgqlc.types.list_of("CloudVpcIntegrationInput"), graphql_name="vpc"
    )
    """VPC integration"""


class CloudAwsKinesisanalyticsIntegrationInput(sgqlc.types.Input):
    """Kinesis Data Analytics"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsLinkAccountInput(sgqlc.types.Input):
    """Information required to link a AWS account to a NewRelic account."""

    __schema__ = nerdgraph
    __field_names__ = ("arn", "metric_collection_mode", "name")
    arn = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="arn")
    """The AWS role ARN (used to fetch data)."""

    metric_collection_mode = sgqlc.types.Field(
        CloudMetricCollectionMode, graphql_name="metricCollectionMode"
    )
    """How metrics will be collected."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The linked account name."""


class CloudAwsMediaconvertIntegrationInput(sgqlc.types.Input):
    """Elemental MediaConvert"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsMediapackagevodIntegrationInput(sgqlc.types.Input):
    """MediaPackage VOD"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsMetadataIntegrationInput(sgqlc.types.Input):
    """Fetch Metadata for AWS integrations"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsMqIntegrationInput(sgqlc.types.Input):
    """MQ"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsMskIntegrationInput(sgqlc.types.Input):
    """Managed Kafka"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsNeptuneIntegrationInput(sgqlc.types.Input):
    """Neptune"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsQldbIntegrationInput(sgqlc.types.Input):
    """QLDB"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsRoute53resolverIntegrationInput(sgqlc.types.Input):
    """Route53 Resolver"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsStatesIntegrationInput(sgqlc.types.Input):
    """Step Functions"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsTagsGlobalIntegrationInput(sgqlc.types.Input):
    """Fetch tags for all integrations"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsTransitgatewayIntegrationInput(sgqlc.types.Input):
    """Transit Gateway"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsWafIntegrationInput(sgqlc.types.Input):
    """WAF"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsWafv2IntegrationInput(sgqlc.types.Input):
    """WAFV2"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsXrayIntegrationInput(sgqlc.types.Input):
    """X-Ray"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAzureApimanagementIntegrationInput(sgqlc.types.Input):
    """Api Management"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureAppgatewayIntegrationInput(sgqlc.types.Input):
    """App Gateway"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureAppserviceIntegrationInput(sgqlc.types.Input):
    """Azure App Service"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureContainersIntegrationInput(sgqlc.types.Input):
    """Containers"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureCosmosdbIntegrationInput(sgqlc.types.Input):
    """Azure Cosmos DB"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureCostmanagementIntegrationInput(sgqlc.types.Input):
    """Cost Management"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_keys",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_keys = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="tagKeys")
    """Specify if additional cost data per tag should be collected. This
    field is case sensitive.
    """


class CloudAzureDatafactoryIntegrationInput(sgqlc.types.Input):
    """Data Factory"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureDisableIntegrationsInput(sgqlc.types.Input):
    """List of integrations"""

    __schema__ = nerdgraph
    __field_names__ = (
        "azure_apimanagement",
        "azure_appgateway",
        "azure_appservice",
        "azure_containers",
        "azure_cosmosdb",
        "azure_costmanagement",
        "azure_datafactory",
        "azure_eventhub",
        "azure_expressroute",
        "azure_firewalls",
        "azure_frontdoor",
        "azure_functions",
        "azure_keyvault",
        "azure_loadbalancer",
        "azure_logicapps",
        "azure_machinelearning",
        "azure_mariadb",
        "azure_mysql",
        "azure_postgresql",
        "azure_powerbidedicated",
        "azure_rediscache",
        "azure_servicebus",
        "azure_servicefabric",
        "azure_sql",
        "azure_sqlmanaged",
        "azure_storage",
        "azure_virtualmachine",
        "azure_virtualnetworks",
        "azure_vms",
        "azure_vpngateways",
    )
    azure_apimanagement = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureApimanagement",
    )
    """Api Management integration"""

    azure_appgateway = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureAppgateway",
    )
    """App Gateway integration"""

    azure_appservice = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureAppservice",
    )
    """App Service integration"""

    azure_containers = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureContainers",
    )
    """Containers integration"""

    azure_cosmosdb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureCosmosdb",
    )
    """Cosmos DB integration"""

    azure_costmanagement = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureCostmanagement",
    )
    """Cost Management integration"""

    azure_datafactory = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureDatafactory",
    )
    """Data Factory integration"""

    azure_eventhub = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureEventhub",
    )
    """Event Hub integration"""

    azure_expressroute = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureExpressroute",
    )
    """Express Route integration"""

    azure_firewalls = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureFirewalls",
    )
    """Firewalls integration"""

    azure_frontdoor = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureFrontdoor",
    )
    """Front Door integration"""

    azure_functions = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureFunctions",
    )
    """Functions integration"""

    azure_keyvault = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureKeyvault",
    )
    """Key Vault integration"""

    azure_loadbalancer = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureLoadbalancer",
    )
    """Load Balancer integration"""

    azure_logicapps = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureLogicapps",
    )
    """Logic Apps integration"""

    azure_machinelearning = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureMachinelearning",
    )
    """Machine Learning integration"""

    azure_mariadb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureMariadb",
    )
    """Database for MariaDB integration"""

    azure_mysql = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureMysql",
    )
    """Database for MySQL integration"""

    azure_postgresql = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azurePostgresql",
    )
    """Database for PostgreSQL integration"""

    azure_powerbidedicated = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azurePowerbidedicated",
    )
    """Power BI Dedicated integration"""

    azure_rediscache = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureRediscache",
    )
    """Redis Cache integration"""

    azure_servicebus = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureServicebus",
    )
    """Service Bus integration"""

    azure_servicefabric = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureServicefabric",
    )
    """Service Fabric integration"""

    azure_sql = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureSql",
    )
    """SQL Database integration"""

    azure_sqlmanaged = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureSqlmanaged",
    )
    """SQL Managed Instances integration"""

    azure_storage = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureStorage",
    )
    """Storage integration"""

    azure_virtualmachine = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureVirtualmachine",
    )
    """Virtual machine scale sets integration"""

    azure_virtualnetworks = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureVirtualnetworks",
    )
    """Virtual Network integration"""

    azure_vms = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureVms",
    )
    """Virtual Machines integration"""

    azure_vpngateways = sgqlc.types.Field(
        sgqlc.types.list_of("CloudDisableAccountIntegrationInput"),
        graphql_name="azureVpngateways",
    )
    """VPN Gateways integration"""


class CloudAzureEventhubIntegrationInput(sgqlc.types.Input):
    """Event Hub"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureExpressrouteIntegrationInput(sgqlc.types.Input):
    """Express Route"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureFirewallsIntegrationInput(sgqlc.types.Input):
    """Firewalls"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureFrontdoorIntegrationInput(sgqlc.types.Input):
    """Front Door"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureFunctionsIntegrationInput(sgqlc.types.Input):
    """Azure Functions"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureIntegrationsInput(sgqlc.types.Input):
    """List of integrations"""

    __schema__ = nerdgraph
    __field_names__ = (
        "azure_apimanagement",
        "azure_appgateway",
        "azure_appservice",
        "azure_containers",
        "azure_cosmosdb",
        "azure_costmanagement",
        "azure_datafactory",
        "azure_eventhub",
        "azure_expressroute",
        "azure_firewalls",
        "azure_frontdoor",
        "azure_functions",
        "azure_keyvault",
        "azure_loadbalancer",
        "azure_logicapps",
        "azure_machinelearning",
        "azure_mariadb",
        "azure_mysql",
        "azure_postgresql",
        "azure_powerbidedicated",
        "azure_rediscache",
        "azure_servicebus",
        "azure_servicefabric",
        "azure_sql",
        "azure_sqlmanaged",
        "azure_storage",
        "azure_virtualmachine",
        "azure_virtualnetworks",
        "azure_vms",
        "azure_vpngateways",
    )
    azure_apimanagement = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureApimanagementIntegrationInput),
        graphql_name="azureApimanagement",
    )
    """Api Management integration"""

    azure_appgateway = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureAppgatewayIntegrationInput),
        graphql_name="azureAppgateway",
    )
    """App Gateway integration"""

    azure_appservice = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureAppserviceIntegrationInput),
        graphql_name="azureAppservice",
    )
    """App Service integration"""

    azure_containers = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureContainersIntegrationInput),
        graphql_name="azureContainers",
    )
    """Containers integration"""

    azure_cosmosdb = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureCosmosdbIntegrationInput),
        graphql_name="azureCosmosdb",
    )
    """Cosmos DB integration"""

    azure_costmanagement = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureCostmanagementIntegrationInput),
        graphql_name="azureCostmanagement",
    )
    """Cost Management integration"""

    azure_datafactory = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureDatafactoryIntegrationInput),
        graphql_name="azureDatafactory",
    )
    """Data Factory integration"""

    azure_eventhub = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureEventhubIntegrationInput),
        graphql_name="azureEventhub",
    )
    """Event Hub integration"""

    azure_expressroute = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureExpressrouteIntegrationInput),
        graphql_name="azureExpressroute",
    )
    """Express Route integration"""

    azure_firewalls = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureFirewallsIntegrationInput),
        graphql_name="azureFirewalls",
    )
    """Firewalls integration"""

    azure_frontdoor = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureFrontdoorIntegrationInput),
        graphql_name="azureFrontdoor",
    )
    """Front Door integration"""

    azure_functions = sgqlc.types.Field(
        sgqlc.types.list_of(CloudAzureFunctionsIntegrationInput),
        graphql_name="azureFunctions",
    )
    """Functions integration"""

    azure_keyvault = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureKeyvaultIntegrationInput"),
        graphql_name="azureKeyvault",
    )
    """Key Vault integration"""

    azure_loadbalancer = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureLoadbalancerIntegrationInput"),
        graphql_name="azureLoadbalancer",
    )
    """Load Balancer integration"""

    azure_logicapps = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureLogicappsIntegrationInput"),
        graphql_name="azureLogicapps",
    )
    """Logic Apps integration"""

    azure_machinelearning = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureMachinelearningIntegrationInput"),
        graphql_name="azureMachinelearning",
    )
    """Machine Learning integration"""

    azure_mariadb = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureMariadbIntegrationInput"),
        graphql_name="azureMariadb",
    )
    """Database for MariaDB integration"""

    azure_mysql = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureMysqlIntegrationInput"),
        graphql_name="azureMysql",
    )
    """Database for MySQL integration"""

    azure_postgresql = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzurePostgresqlIntegrationInput"),
        graphql_name="azurePostgresql",
    )
    """Database for PostgreSQL integration"""

    azure_powerbidedicated = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzurePowerbidedicatedIntegrationInput"),
        graphql_name="azurePowerbidedicated",
    )
    """Power BI Dedicated integration"""

    azure_rediscache = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureRediscacheIntegrationInput"),
        graphql_name="azureRediscache",
    )
    """Redis Cache integration"""

    azure_servicebus = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureServicebusIntegrationInput"),
        graphql_name="azureServicebus",
    )
    """Service Bus integration"""

    azure_servicefabric = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureServicefabricIntegrationInput"),
        graphql_name="azureServicefabric",
    )
    """Service Fabric integration"""

    azure_sql = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureSqlIntegrationInput"), graphql_name="azureSql"
    )
    """SQL Database integration"""

    azure_sqlmanaged = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureSqlmanagedIntegrationInput"),
        graphql_name="azureSqlmanaged",
    )
    """SQL Managed Instances integration"""

    azure_storage = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureStorageIntegrationInput"),
        graphql_name="azureStorage",
    )
    """Storage integration"""

    azure_virtualmachine = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureVirtualmachineIntegrationInput"),
        graphql_name="azureVirtualmachine",
    )
    """Virtual machine scale sets integration"""

    azure_virtualnetworks = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureVirtualnetworksIntegrationInput"),
        graphql_name="azureVirtualnetworks",
    )
    """Virtual Network integration"""

    azure_vms = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureVmsIntegrationInput"), graphql_name="azureVms"
    )
    """Virtual Machines integration"""

    azure_vpngateways = sgqlc.types.Field(
        sgqlc.types.list_of("CloudAzureVpngatewaysIntegrationInput"),
        graphql_name="azureVpngateways",
    )
    """VPN Gateways integration"""


class CloudAzureKeyvaultIntegrationInput(sgqlc.types.Input):
    """Key Vault"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureLinkAccountInput(sgqlc.types.Input):
    """Information required to link a Azure account to a NewRelic
    account.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "application_id",
        "client_secret",
        "name",
        "subscription_id",
        "tenant_id",
    )
    application_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="applicationId"
    )
    """The Azure account application identifier (used to fetch data)."""

    client_secret = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="clientSecret"
    )
    """The Azure account application secret key."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The linked account name."""

    subscription_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="subscriptionId"
    )
    """The Azure account subscription identifier."""

    tenant_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="tenantId")
    """The Azure account tenant identifier."""


class CloudAzureLoadbalancerIntegrationInput(sgqlc.types.Input):
    """Azure Load Balancer"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureLogicappsIntegrationInput(sgqlc.types.Input):
    """Logic Apps"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureMachinelearningIntegrationInput(sgqlc.types.Input):
    """Machine Learning"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureMariadbIntegrationInput(sgqlc.types.Input):
    """Database for MariaDB"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureMysqlIntegrationInput(sgqlc.types.Input):
    """Database for MySQL"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzurePostgresqlIntegrationInput(sgqlc.types.Input):
    """Database for PostgreSQL"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzurePowerbidedicatedIntegrationInput(sgqlc.types.Input):
    """Power BI Dedicated"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureRediscacheIntegrationInput(sgqlc.types.Input):
    """Azure Redis Cache"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureServicebusIntegrationInput(sgqlc.types.Input):
    """Azure Service Bus"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureServicefabricIntegrationInput(sgqlc.types.Input):
    """Service Fabric"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureSqlIntegrationInput(sgqlc.types.Input):
    """Azure SQL Database"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureSqlmanagedIntegrationInput(sgqlc.types.Input):
    """SQL Managed Instances"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureStorageIntegrationInput(sgqlc.types.Input):
    """Azure Storage"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureVirtualmachineIntegrationInput(sgqlc.types.Input):
    """Virtual machine scale sets"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureVirtualnetworksIntegrationInput(sgqlc.types.Input):
    """Azure Virtual Network"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureVmsIntegrationInput(sgqlc.types.Input):
    """Azure Virtual Machines"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureVpngatewaysIntegrationInput(sgqlc.types.Input):
    """VPN Gateways"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudBillingIntegrationInput(sgqlc.types.Input):
    """AWS Billing"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudCloudfrontIntegrationInput(sgqlc.types.Input):
    """Amazon CloudFront"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_lambdas_at_edge",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    fetch_lambdas_at_edge = sgqlc.types.Field(
        Boolean, graphql_name="fetchLambdasAtEdge"
    )
    """Specify if Lambdas@Edge should be monitored. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudCloudtrailIntegrationInput(sgqlc.types.Input):
    """AWS CloudTrail"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudDisableAccountIntegrationInput(sgqlc.types.Input):
    """Information required to disable a cloud service integration from a
    linked account.
    """

    __schema__ = nerdgraph
    __field_names__ = ("linked_account_id",)
    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier"""


class CloudDisableIntegrationsInput(sgqlc.types.Input):
    """List of providers"""

    __schema__ = nerdgraph
    __field_names__ = ("aws", "aws_govcloud", "azure", "gcp")
    aws = sgqlc.types.Field(CloudAwsDisableIntegrationsInput, graphql_name="aws")
    """Aws provider"""

    aws_govcloud = sgqlc.types.Field(
        CloudAwsGovcloudDisableIntegrationsInput, graphql_name="awsGovcloud"
    )
    """AwsGovcloud provider"""

    azure = sgqlc.types.Field(CloudAzureDisableIntegrationsInput, graphql_name="azure")
    """Azure provider"""

    gcp = sgqlc.types.Field("CloudGcpDisableIntegrationsInput", graphql_name="gcp")
    """Gcp provider"""


class CloudDynamodbIntegrationInput(sgqlc.types.Input):
    """Amazon DynamoDB"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudEbsIntegrationInput(sgqlc.types.Input):
    """Amazon Elastic Block Store (EBS)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudEc2IntegrationInput(sgqlc.types.Input):
    """Amazon Elastic Compute Cloud (EC2)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_ip_addresses",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_ip_addresses = sgqlc.types.Field(Boolean, graphql_name="fetchIpAddresses")
    """Specify if IP addresses of ec2 instance should be collected"""

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudEcsIntegrationInput(sgqlc.types.Input):
    """Amazon Elastic Container Service (ECS)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudEfsIntegrationInput(sgqlc.types.Input):
    """Amazon Elastic File System (EFS)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudElasticacheIntegrationInput(sgqlc.types.Input):
    """Amazon ElastiCache"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudElasticbeanstalkIntegrationInput(sgqlc.types.Input):
    """AWS Elastic Beanstalk"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudElasticsearchIntegrationInput(sgqlc.types.Input):
    """Amazon Elasticsearch Service"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_nodes",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_nodes = sgqlc.types.Field(Boolean, graphql_name="fetchNodes")
    """Specify if metrics should be collected for nodes. Turning it on
    will increase the number of API calls made to CloudWatch.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudElbIntegrationInput(sgqlc.types.Input):
    """Elastic Load Balancing - Classic Load Balancer (ELB)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudEmrIntegrationInput(sgqlc.types.Input):
    """Amazon Elastic MapReduce (EMR)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags and the extended inventory should be collected.
    May affect total data collection time and contribute to the Cloud
    provider API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudGcpAppengineIntegrationInput(sgqlc.types.Input):
    """Google App Engine"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpBigqueryIntegrationInput(sgqlc.types.Input):
    """BigQuery"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if labels and the extended inventory should be collected.
    May affect total data collection time and contribute to the Cloud
    provider API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpBigtableIntegrationInput(sgqlc.types.Input):
    """Bigtable"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpComposerIntegrationInput(sgqlc.types.Input):
    """Composer"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpDataflowIntegrationInput(sgqlc.types.Input):
    """Dataflow"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpDataprocIntegrationInput(sgqlc.types.Input):
    """Dataproc"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpDatastoreIntegrationInput(sgqlc.types.Input):
    """Datastore"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpDisableIntegrationsInput(sgqlc.types.Input):
    """List of integrations"""

    __schema__ = nerdgraph
    __field_names__ = (
        "gcp_appengine",
        "gcp_bigquery",
        "gcp_bigtable",
        "gcp_composer",
        "gcp_dataflow",
        "gcp_dataproc",
        "gcp_datastore",
        "gcp_firebasedatabase",
        "gcp_firebasehosting",
        "gcp_firebasestorage",
        "gcp_firestore",
        "gcp_functions",
        "gcp_interconnect",
        "gcp_kubernetes",
        "gcp_loadbalancing",
        "gcp_memcache",
        "gcp_pubsub",
        "gcp_redis",
        "gcp_router",
        "gcp_run",
        "gcp_spanner",
        "gcp_sql",
        "gcp_storage",
        "gcp_vms",
        "gcp_vpcaccess",
    )
    gcp_appengine = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpAppengine",
    )
    """App Engine integration"""

    gcp_bigquery = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpBigquery",
    )
    """BigQuery integration"""

    gcp_bigtable = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpBigtable",
    )
    """Bigtable integration"""

    gcp_composer = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpComposer",
    )
    """Composer integration"""

    gcp_dataflow = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpDataflow",
    )
    """Dataflow integration"""

    gcp_dataproc = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpDataproc",
    )
    """Dataproc integration"""

    gcp_datastore = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpDatastore",
    )
    """Datastore integration"""

    gcp_firebasedatabase = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpFirebasedatabase",
    )
    """Firebase Database integration"""

    gcp_firebasehosting = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpFirebasehosting",
    )
    """Firebase Hosting integration"""

    gcp_firebasestorage = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpFirebasestorage",
    )
    """Firebase Storage integration"""

    gcp_firestore = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpFirestore",
    )
    """Firestore integration"""

    gcp_functions = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpFunctions",
    )
    """Cloud Functions integration"""

    gcp_interconnect = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpInterconnect",
    )
    """Interconnect integration"""

    gcp_kubernetes = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpKubernetes",
    )
    """Kubernetes Engine integration"""

    gcp_loadbalancing = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpLoadbalancing",
    )
    """Cloud Load Balancing integration"""

    gcp_memcache = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpMemcache",
    )
    """Memcache integration"""

    gcp_pubsub = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpPubsub",
    )
    """Cloud Pub/Sub integration"""

    gcp_redis = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpRedis",
    )
    """Redis integration"""

    gcp_router = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpRouter",
    )
    """Router integration"""

    gcp_run = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput), graphql_name="gcpRun"
    )
    """Run integration"""

    gcp_spanner = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpSpanner",
    )
    """Cloud Spanner integration"""

    gcp_sql = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput), graphql_name="gcpSql"
    )
    """Cloud SQL integration"""

    gcp_storage = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpStorage",
    )
    """Cloud Storage integration"""

    gcp_vms = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput), graphql_name="gcpVms"
    )
    """Compute Engine integration"""

    gcp_vpcaccess = sgqlc.types.Field(
        sgqlc.types.list_of(CloudDisableAccountIntegrationInput),
        graphql_name="gcpVpcaccess",
    )
    """VPC Access integration"""


class CloudGcpFirebasedatabaseIntegrationInput(sgqlc.types.Input):
    """Firebase Database"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpFirebasehostingIntegrationInput(sgqlc.types.Input):
    """Firebase Hosting"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpFirebasestorageIntegrationInput(sgqlc.types.Input):
    """Firebase Storage"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpFirestoreIntegrationInput(sgqlc.types.Input):
    """Firestore"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpFunctionsIntegrationInput(sgqlc.types.Input):
    """Google Cloud Functions"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpIntegrationsInput(sgqlc.types.Input):
    """List of integrations"""

    __schema__ = nerdgraph
    __field_names__ = (
        "gcp_appengine",
        "gcp_bigquery",
        "gcp_bigtable",
        "gcp_composer",
        "gcp_dataflow",
        "gcp_dataproc",
        "gcp_datastore",
        "gcp_firebasedatabase",
        "gcp_firebasehosting",
        "gcp_firebasestorage",
        "gcp_firestore",
        "gcp_functions",
        "gcp_interconnect",
        "gcp_kubernetes",
        "gcp_loadbalancing",
        "gcp_memcache",
        "gcp_pubsub",
        "gcp_redis",
        "gcp_router",
        "gcp_run",
        "gcp_spanner",
        "gcp_sql",
        "gcp_storage",
        "gcp_vms",
        "gcp_vpcaccess",
    )
    gcp_appengine = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpAppengineIntegrationInput),
        graphql_name="gcpAppengine",
    )
    """App Engine integration"""

    gcp_bigquery = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpBigqueryIntegrationInput),
        graphql_name="gcpBigquery",
    )
    """BigQuery integration"""

    gcp_bigtable = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpBigtableIntegrationInput),
        graphql_name="gcpBigtable",
    )
    """Bigtable integration"""

    gcp_composer = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpComposerIntegrationInput),
        graphql_name="gcpComposer",
    )
    """Composer integration"""

    gcp_dataflow = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpDataflowIntegrationInput),
        graphql_name="gcpDataflow",
    )
    """Dataflow integration"""

    gcp_dataproc = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpDataprocIntegrationInput),
        graphql_name="gcpDataproc",
    )
    """Dataproc integration"""

    gcp_datastore = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpDatastoreIntegrationInput),
        graphql_name="gcpDatastore",
    )
    """Datastore integration"""

    gcp_firebasedatabase = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpFirebasedatabaseIntegrationInput),
        graphql_name="gcpFirebasedatabase",
    )
    """Firebase Database integration"""

    gcp_firebasehosting = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpFirebasehostingIntegrationInput),
        graphql_name="gcpFirebasehosting",
    )
    """Firebase Hosting integration"""

    gcp_firebasestorage = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpFirebasestorageIntegrationInput),
        graphql_name="gcpFirebasestorage",
    )
    """Firebase Storage integration"""

    gcp_firestore = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpFirestoreIntegrationInput),
        graphql_name="gcpFirestore",
    )
    """Firestore integration"""

    gcp_functions = sgqlc.types.Field(
        sgqlc.types.list_of(CloudGcpFunctionsIntegrationInput),
        graphql_name="gcpFunctions",
    )
    """Cloud Functions integration"""

    gcp_interconnect = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpInterconnectIntegrationInput"),
        graphql_name="gcpInterconnect",
    )
    """Interconnect integration"""

    gcp_kubernetes = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpKubernetesIntegrationInput"),
        graphql_name="gcpKubernetes",
    )
    """Kubernetes Engine integration"""

    gcp_loadbalancing = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpLoadbalancingIntegrationInput"),
        graphql_name="gcpLoadbalancing",
    )
    """Cloud Load Balancing integration"""

    gcp_memcache = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpMemcacheIntegrationInput"),
        graphql_name="gcpMemcache",
    )
    """Memcache integration"""

    gcp_pubsub = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpPubsubIntegrationInput"), graphql_name="gcpPubsub"
    )
    """Cloud Pub/Sub integration"""

    gcp_redis = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpRedisIntegrationInput"), graphql_name="gcpRedis"
    )
    """Redis integration"""

    gcp_router = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpRouterIntegrationInput"), graphql_name="gcpRouter"
    )
    """Router integration"""

    gcp_run = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpRunIntegrationInput"), graphql_name="gcpRun"
    )
    """Run integration"""

    gcp_spanner = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpSpannerIntegrationInput"),
        graphql_name="gcpSpanner",
    )
    """Cloud Spanner integration"""

    gcp_sql = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpSqlIntegrationInput"), graphql_name="gcpSql"
    )
    """Cloud SQL integration"""

    gcp_storage = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpStorageIntegrationInput"),
        graphql_name="gcpStorage",
    )
    """Cloud Storage integration"""

    gcp_vms = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpVmsIntegrationInput"), graphql_name="gcpVms"
    )
    """Compute Engine integration"""

    gcp_vpcaccess = sgqlc.types.Field(
        sgqlc.types.list_of("CloudGcpVpcaccessIntegrationInput"),
        graphql_name="gcpVpcaccess",
    )
    """VPC Access integration"""


class CloudGcpInterconnectIntegrationInput(sgqlc.types.Input):
    """Interconnect"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpKubernetesIntegrationInput(sgqlc.types.Input):
    """Google Kubernetes Engine"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpLinkAccountInput(sgqlc.types.Input):
    """Information required to link a GCP account to a NewRelic account."""

    __schema__ = nerdgraph
    __field_names__ = ("name", "project_id")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The linked account name."""

    project_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="projectId"
    )
    """The GCP project identifier."""


class CloudGcpLoadbalancingIntegrationInput(sgqlc.types.Input):
    """Google Cloud Load Balancing"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpMemcacheIntegrationInput(sgqlc.types.Input):
    """Memcache"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpPubsubIntegrationInput(sgqlc.types.Input):
    """Cloud Pub/Sub"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if labels and the extended inventory should be collected.
    May affect total data collection time and contribute to the Cloud
    provider API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpRedisIntegrationInput(sgqlc.types.Input):
    """Redis"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpRouterIntegrationInput(sgqlc.types.Input):
    """Router"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpRunIntegrationInput(sgqlc.types.Input):
    """Run"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpSpannerIntegrationInput(sgqlc.types.Input):
    """Cloud Spanner"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if labels and the extended inventory should be collected.
    May affect total data collection time and contribute to the Cloud
    provider API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpSqlIntegrationInput(sgqlc.types.Input):
    """Google Cloud SQL"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpStorageIntegrationInput(sgqlc.types.Input):
    """Google Cloud Storage"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if labels and the extended inventory should be collected.
    May affect total data collection time and contribute to the Cloud
    provider API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpVmsIntegrationInput(sgqlc.types.Input):
    """Google Compute Engine"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpVpcaccessIntegrationInput(sgqlc.types.Input):
    """VPC Access"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudHealthIntegrationInput(sgqlc.types.Input):
    """AWS Health"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudIamIntegrationInput(sgqlc.types.Input):
    """AWS Identity and Access Management (IAM)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudIntegrationsInput(sgqlc.types.Input):
    """List of providers"""

    __schema__ = nerdgraph
    __field_names__ = ("aws", "aws_govcloud", "azure", "gcp")
    aws = sgqlc.types.Field(CloudAwsIntegrationsInput, graphql_name="aws")
    """Aws provider"""

    aws_govcloud = sgqlc.types.Field(
        CloudAwsGovcloudIntegrationsInput, graphql_name="awsGovcloud"
    )
    """AwsGovcloud provider"""

    azure = sgqlc.types.Field(CloudAzureIntegrationsInput, graphql_name="azure")
    """Azure provider"""

    gcp = sgqlc.types.Field(CloudGcpIntegrationsInput, graphql_name="gcp")
    """Gcp provider"""


class CloudIotIntegrationInput(sgqlc.types.Input):
    """AWS IoT"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudKinesisFirehoseIntegrationInput(sgqlc.types.Input):
    """Amazon Kinesis Data Firehose"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudKinesisIntegrationInput(sgqlc.types.Input):
    """Amazon Kinesis Data Streams"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_shards",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_shards = sgqlc.types.Field(Boolean, graphql_name="fetchShards")
    """Specify if Shards should be monitored. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudLambdaIntegrationInput(sgqlc.types.Input):
    """AWS Lambda"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudLinkCloudAccountsInput(sgqlc.types.Input):
    """Specific Cloud provider information required to link the Cloud
    provider account to a NewRelic account.
    """

    __schema__ = nerdgraph
    __field_names__ = ("aws", "aws_govcloud", "azure", "gcp")
    aws = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(CloudAwsLinkAccountInput)),
        graphql_name="aws",
    )
    """Aws provider"""

    aws_govcloud = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(CloudAwsGovcloudLinkAccountInput)),
        graphql_name="awsGovcloud",
    )
    """AwsGovcloud provider"""

    azure = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(CloudAzureLinkAccountInput)),
        graphql_name="azure",
    )
    """Azure provider"""

    gcp = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(CloudGcpLinkAccountInput)),
        graphql_name="gcp",
    )
    """Gcp provider"""


class CloudRdsIntegrationInput(sgqlc.types.Input):
    """Amazon Relation Database Service (RDS)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudRedshiftIntegrationInput(sgqlc.types.Input):
    """Amazon Redshift"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudRenameAccountsInput(sgqlc.types.Input):
    """Information required when operating on a Linked Account."""

    __schema__ = nerdgraph
    __field_names__ = ("linked_account_id", "name")
    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The linked account new name."""


class CloudRoute53IntegrationInput(sgqlc.types.Input):
    """Amazon Route 53"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_extended_inventory",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudS3IntegrationInput(sgqlc.types.Input):
    """Amazon Simple Storage Service (S3)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudSesIntegrationInput(sgqlc.types.Input):
    """Amazon Simple Email Service (SES)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudSnsIntegrationInput(sgqlc.types.Input):
    """Amazon Simple Notification Service (SNS)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudSqsIntegrationInput(sgqlc.types.Input):
    """Amazon Simple Queue Service (SQS)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "queue_prefixes",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    queue_prefixes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="queuePrefixes"
    )
    """Specify each name or prefix for the Queues that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudTrustedadvisorIntegrationInput(sgqlc.types.Input):
    """Trusted Advisor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudUnlinkAccountsInput(sgqlc.types.Input):
    """Information required to unlink (remove) a linked account."""

    __schema__ = nerdgraph
    __field_names__ = ("linked_account_id",)
    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""


class CloudVpcIntegrationInput(sgqlc.types.Input):
    """Amazon Virtual Private Cloud (VPC)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_nat_gateway",
        "fetch_vpn",
        "inventory_polling_interval",
        "linked_account_id",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_nat_gateway = sgqlc.types.Field(Boolean, graphql_name="fetchNatGateway")
    """Specify if NAT gateway should be monitored. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    fetch_vpn = sgqlc.types.Field(Boolean, graphql_name="fetchVpn")
    """Specify if VPN should be monitored. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )
    """The linked account identifier."""

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class DashboardAreaWidgetConfigurationInput(sgqlc.types.Input):
    """Configuration for visualization type 'viz.area'"""

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("DashboardWidgetNrqlQueryInput")),
        graphql_name="nrqlQueries",
    )
    """NRQL queries."""


class DashboardBarWidgetConfigurationInput(sgqlc.types.Input):
    """Configuration for visualization type 'viz.bar'. Learn more about [
    bar](https://docs.newrelic.com/docs/apis/nerdgraph/examples/create
    -widgets-dashboards-api/#bar) widget.
    """

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("DashboardWidgetNrqlQueryInput")),
        graphql_name="nrqlQueries",
    )
    """NRQL queries."""


class DashboardBillboardWidgetConfigurationInput(sgqlc.types.Input):
    """Configuration for visualization type 'viz.billboard'. Learn more
    about [billboard](https://docs.newrelic.com/docs/apis/nerdgraph/ex
    amples/create-widgets-dashboards-api/#billboard) widget.
    """

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries", "thresholds")
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("DashboardWidgetNrqlQueryInput")),
        graphql_name="nrqlQueries",
    )
    """NRQL queries."""

    thresholds = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("DashboardBillboardWidgetThresholdInput")
        ),
        graphql_name="thresholds",
    )
    """Array of thresholds to categorize the results of the query in
    different groups.
    """


class DashboardBillboardWidgetThresholdInput(sgqlc.types.Input):
    """Billboard widget threshold input."""

    __schema__ = nerdgraph
    __field_names__ = ("alert_severity", "value")
    alert_severity = sgqlc.types.Field(
        DashboardAlertSeverity, graphql_name="alertSeverity"
    )
    """Severity of the alert."""

    value = sgqlc.types.Field(Float, graphql_name="value")
    """Value of the alert."""


class DashboardInput(sgqlc.types.Input):
    """Dashboard input."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "name", "pages", "permissions")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Brief text describing the dashboard."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the dashboard."""

    pages = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("DashboardPageInput"))
        ),
        graphql_name="pages",
    )
    """A nested block of all pages belonging to the dashboard."""

    permissions = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardPermissions), graphql_name="permissions"
    )
    """Permissions to set level of visibility & editing."""


class DashboardLineWidgetConfigurationInput(sgqlc.types.Input):
    """Configuration for visualization type 'viz.line'. Learn more about
    [line](https://docs.newrelic.com/docs/apis/nerdgraph/examples/crea
    te-widgets-dashboards-api/#line) widget.
    """

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("DashboardWidgetNrqlQueryInput")),
        graphql_name="nrqlQueries",
    )
    """NRQL queries."""


class DashboardLiveUrlsFilterInput(sgqlc.types.Input):
    """Live URLs input."""

    __schema__ = nerdgraph
    __field_names__ = ("type", "uuid")
    type = sgqlc.types.Field(DashboardLiveUrlType, graphql_name="type")
    """Live URL type."""

    uuid = sgqlc.types.Field(ID, graphql_name="uuid")
    """The unique identifier of a public live URL."""


class DashboardMarkdownWidgetConfigurationInput(sgqlc.types.Input):
    """Configuration for visualization type 'viz.markdown'. Learn more
    about [markdown](https://docs.newrelic.com/docs/apis/nerdgraph/exa
    mples/create-widgets-dashboards-api/#markdown) widget.
    """

    __schema__ = nerdgraph
    __field_names__ = ("text",)
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="text")
    """Markdown content of the widget."""


class DashboardPageInput(sgqlc.types.Input):
    """Page input."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "guid", "name", "widgets")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Brief text describing the page."""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """Unique entity identifier of the Page to be updated. When null, it
    means a new Page will be created.
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the page."""

    widgets = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("DashboardWidgetInput"))
        ),
        graphql_name="widgets",
    )
    """A nested block of all widgets belonging to the page."""


class DashboardPieWidgetConfigurationInput(sgqlc.types.Input):
    """Configuration for visualization type 'viz.pie'.  Learn more about
    [pie](https://docs.newrelic.com/docs/apis/nerdgraph/examples/creat
    e-widgets-dashboards-api/#pie) widget.
    """

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("DashboardWidgetNrqlQueryInput")),
        graphql_name="nrqlQueries",
    )
    """NRQL queries."""


class DashboardSnapshotUrlInput(sgqlc.types.Input):
    """Parameters that affect the data and the rendering of the
    dashboards returned by the snapshot url mutation.
    """

    __schema__ = nerdgraph
    __field_names__ = ("time_window",)
    time_window = sgqlc.types.Field(
        "DashboardSnapshotUrlTimeWindowInput", graphql_name="timeWindow"
    )
    """Period of time from which the data to be displayed on the
    dashboard will be obtained.
    """


class DashboardSnapshotUrlTimeWindowInput(sgqlc.types.Input):
    """Period of time from which the data to be displayed on the
    dashboard will be obtained.
    """

    __schema__ = nerdgraph
    __field_names__ = ("begin_time", "duration", "end_time")
    begin_time = sgqlc.types.Field(EpochMilliseconds, graphql_name="beginTime")
    """The starting time of the time window. If specified, an endTime or
    a duration must also be specified.
    """

    duration = sgqlc.types.Field(Milliseconds, graphql_name="duration")
    """The duration of the time window."""

    end_time = sgqlc.types.Field(EpochMilliseconds, graphql_name="endTime")
    """The end time of the time window. If specified, a beginTime or a
    duration must also be specified.
    """


class DashboardTableWidgetConfigurationInput(sgqlc.types.Input):
    """Configuration for visualization type 'viz.table'.  Learn more
    about [table](https://docs.newrelic.com/docs/apis/nerdgraph/exampl
    es/create-widgets-dashboards-api/#table) widget.
    """

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("DashboardWidgetNrqlQueryInput")),
        graphql_name="nrqlQueries",
    )
    """NRQL queries."""


class DashboardUpdatePageInput(sgqlc.types.Input):
    """Page input used when updating an individual page."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "name", "widgets")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Page description."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Page name."""

    widgets = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("DashboardWidgetInput"))
        ),
        graphql_name="widgets",
    )
    """Page widgets."""


class DashboardUpdateWidgetInput(sgqlc.types.Input):
    """Input type used when updating widgets."""

    __schema__ = nerdgraph
    __field_names__ = (
        "configuration",
        "id",
        "layout",
        "linked_entity_guids",
        "raw_configuration",
        "title",
        "visualization",
    )
    configuration = sgqlc.types.Field(
        "DashboardWidgetConfigurationInput", graphql_name="configuration"
    )
    """Typed widgets are area, bar, billboard, line, markdown, pie, and
    table. Check our [docs](https://docs.newrelic.com/docs/apis/nerdgr
    aph/examples/create-widgets-dashboards-api/#widget-typed) for more
    info.
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of the widget to be updated."""

    layout = sgqlc.types.Field("DashboardWidgetLayoutInput", graphql_name="layout")
    """The widget's position and size in the dashboard."""

    linked_entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="linkedEntityGuids",
    )
    """Entities related to the widget. Currently only supports one
    Dashboard entity guid, but may allow other cases in the future.
    """

    raw_configuration = sgqlc.types.Field(
        DashboardWidgetRawConfiguration, graphql_name="rawConfiguration"
    )
    """Untyped widgets are all other widgets, such as bullet, histogram,
    inventory, etc. Check our [docs](https://docs.newrelic.com/docs/ap
    is/nerdgraph/examples/create-widgets-dashboards-api/#widget-
    untyped) for more info.
    """

    title = sgqlc.types.Field(String, graphql_name="title")
    """A title for the widget."""

    visualization = sgqlc.types.Field(
        "DashboardWidgetVisualizationInput", graphql_name="visualization"
    )
    """Specifies how this widget will be visualized. If null, the
    WidgetConfigurationInput will be used to determine the
    visualization.
    """


class DashboardWidgetConfigurationInput(sgqlc.types.Input):
    """Typed configuration for known visualizations. At most one may be
    populated.
    """

    __schema__ = nerdgraph
    __field_names__ = ("area", "bar", "billboard", "line", "markdown", "pie", "table")
    area = sgqlc.types.Field(DashboardAreaWidgetConfigurationInput, graphql_name="area")
    """Configuration for visualization type 'viz.area' """

    bar = sgqlc.types.Field(DashboardBarWidgetConfigurationInput, graphql_name="bar")
    """Configuration for visualization type 'viz.bar' """

    billboard = sgqlc.types.Field(
        DashboardBillboardWidgetConfigurationInput, graphql_name="billboard"
    )
    """Configuration for visualization type 'viz.billboard' """

    line = sgqlc.types.Field(DashboardLineWidgetConfigurationInput, graphql_name="line")
    """Configuration for visualization type 'viz.line' """

    markdown = sgqlc.types.Field(
        DashboardMarkdownWidgetConfigurationInput, graphql_name="markdown"
    )
    """Configuration for visualization type 'viz.markdown' """

    pie = sgqlc.types.Field(DashboardPieWidgetConfigurationInput, graphql_name="pie")
    """Configuration for visualization type 'viz.pie' """

    table = sgqlc.types.Field(
        DashboardTableWidgetConfigurationInput, graphql_name="table"
    )
    """Configuration for visualization type 'viz.table' """


class DashboardWidgetInput(sgqlc.types.Input):
    """Widget input."""

    __schema__ = nerdgraph
    __field_names__ = (
        "configuration",
        "id",
        "layout",
        "linked_entity_guids",
        "raw_configuration",
        "title",
        "visualization",
    )
    configuration = sgqlc.types.Field(
        DashboardWidgetConfigurationInput, graphql_name="configuration"
    )
    """Typed widgets are area, bar, billboard, line, markdown, pie, and
    table. Check our [docs](https://docs.newrelic.com/docs/apis/nerdgr
    aph/examples/create-widgets-dashboards-api/#widget-typed) for more
    info.
    """

    id = sgqlc.types.Field(ID, graphql_name="id")
    """ID of the widget. If null, a new widget will be created and added
    to a dashboard.
    """

    layout = sgqlc.types.Field("DashboardWidgetLayoutInput", graphql_name="layout")
    """The widget's position and size in the dashboard."""

    linked_entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="linkedEntityGuids",
    )
    """Entities related to the widget. Currently only supports one
    Dashboard entity guid, but may allow other cases in the future.
    """

    raw_configuration = sgqlc.types.Field(
        DashboardWidgetRawConfiguration, graphql_name="rawConfiguration"
    )
    """Untyped widgets are all other widgets, such as bullet, histogram,
    inventory, etc. Check our [docs](https://docs.newrelic.com/docs/ap
    is/nerdgraph/examples/create-widgets-dashboards-api/#widget-
    untyped) for more info.
    """

    title = sgqlc.types.Field(String, graphql_name="title")
    """A title for the widget."""

    visualization = sgqlc.types.Field(
        "DashboardWidgetVisualizationInput", graphql_name="visualization"
    )
    """Specifies how this widget will be visualized. If null, the
    WidgetConfigurationInput will be used to determine the
    visualization.
    """


class DashboardWidgetLayoutInput(sgqlc.types.Input):
    """Widget layout input."""

    __schema__ = nerdgraph
    __field_names__ = ("column", "height", "row", "width")
    column = sgqlc.types.Field(Int, graphql_name="column")
    """Column position of widget from top left, starting at 1."""

    height = sgqlc.types.Field(Int, graphql_name="height")
    """Height of the widget. Valid values are 1 to 12 inclusive. Defaults
    to 3.
    """

    row = sgqlc.types.Field(Int, graphql_name="row")
    """Row position of widget from top left, starting at 1."""

    width = sgqlc.types.Field(Int, graphql_name="width")
    """Width of the widget. Valid values are 1 to 12 inclusive. Defaults
    to 4.
    """


class DashboardWidgetNrqlQueryInput(sgqlc.types.Input):
    """NRQL query used by a widget."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "query")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """New Relic account ID to issue the query against."""

    query = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="query")
    """NRQL formatted query."""


class DashboardWidgetVisualizationInput(sgqlc.types.Input):
    """Visualization configuration."""

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(String, graphql_name="id")
    """This field can either have a known type like `viz.area` or
    `<nerdpack-id>.<visualization-id>` in the case of [custom
    visualizations](https://developer.newrelic.com/explore-
    docs/custom-viz/build-visualization/). Check out [docs](https://do
    cs.newrelic.com/docs/apis/nerdgraph/examples/create-widgets-
    dashboards-api/#widget-schema) for more info.
    """


class DataManagementAccountFeatureSettingInput(sgqlc.types.Input):
    """Input object to add and change a feature setting toggle for an
    account
    """

    __schema__ = nerdgraph
    __field_names__ = ("enabled", "feature_setting", "locked")
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Enabled state for the feature setting"""

    feature_setting = sgqlc.types.Field(
        "DataManagementFeatureSettingLookup", graphql_name="featureSetting"
    )
    """Feature setting lookup"""

    locked = sgqlc.types.Field(Boolean, graphql_name="locked")
    """When locked is true, children inherit parent's enabled state"""


class DataManagementFeatureSettingLookup(sgqlc.types.Input):
    """Input object to lookup a feature setting"""

    __schema__ = nerdgraph
    __field_names__ = ("key",)
    key = sgqlc.types.Field(String, graphql_name="key")
    """Key of the feature setting"""


class DataManagementRuleInput(sgqlc.types.Input):
    """Input rule type for bulk rule creation"""

    __schema__ = nerdgraph
    __field_names__ = ("namespace", "retention_in_days")
    namespace = sgqlc.types.Field(String, graphql_name="namespace")
    """The namespace the event retention rule applies to"""

    retention_in_days = sgqlc.types.Field(Int, graphql_name="retentionInDays")
    """Length of time for event data retention (in days)"""


class DateTimeWindowInput(sgqlc.types.Input):
    """Represents a date time window input."""

    __schema__ = nerdgraph
    __field_names__ = ("end_time", "start_time")
    end_time = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name="endTime")
    """The end date and time expressed as an ISO8601 formatted string"""

    start_time = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="startTime"
    )
    """The start date and time expressed as an ISO8601 formatted string"""


class DomainTypeInput(sgqlc.types.Input):
    """Input for getting details about an entity type"""

    __schema__ = nerdgraph
    __field_names__ = ("domain", "type")
    domain = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="domain")
    """The domain of the entity.  The domain must be a value matching
    /[A-Z][A-Z0-9_]{2,14}/.
    """

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")
    """The type of the entity.  The type must be a value matching
    /[A-Z][A-Z0-9_]{2,49}/.  Some examples are APPLICATION, HOST or
    CONTAINER.
    """


class EdgeCreateSpanAttributeRuleInput(sgqlc.types.Input):
    """Data required to create a span attribute trace filter rule."""

    __schema__ = nerdgraph
    __field_names__ = ("action", "key", "key_operator", "value", "value_operator")
    action = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeTraceFilterAction), graphql_name="action"
    )
    """The action that this trace filter rule takes if it matches the
    provided attribute name and value
    """

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """Name of the attribute to match on"""

    key_operator = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeSpanAttributeKeyOperator), graphql_name="keyOperator"
    )
    """Type of match to apply to the attribute name (EQUALS, LIKE). Key
    match type is required.
    """

    value = sgqlc.types.Field(String, graphql_name="value")
    """Value of the attribute to match on. Value is required unless the
    `SpanAttributeValueOperator` is set to `IS_NOT_NULL`
    """

    value_operator = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeSpanAttributeValueOperator),
        graphql_name="valueOperator",
    )
    """Type of match to apply to the attribute value (EQUALS, LIKE,
    IS_NOT_NULL).
    """


class EdgeCreateTraceFilterRulesInput(sgqlc.types.Input):
    """Input for creating multiple trace filter rules"""

    __schema__ = nerdgraph
    __field_names__ = ("span_attribute_rules",)
    span_attribute_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EdgeCreateSpanAttributeRuleInput)),
        graphql_name="spanAttributeRules",
    )
    """One or more `CreateSpanAttributeRuleInput` that describe the span
    attribute trace filter rule(s) to be created.
    """


class EdgeCreateTraceObserverInput(sgqlc.types.Input):
    """Data required to create a trace observer."""

    __schema__ = nerdgraph
    __field_names__ = ("compliance_types", "monitoring", "name", "provider_region")
    compliance_types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EdgeComplianceTypeCode)),
        graphql_name="complianceTypes",
    )
    """Optional list of compliance types (e.g., FedRAMP) applied to this
    trace observer.
    """

    monitoring = sgqlc.types.Field(Boolean, graphql_name="monitoring")
    """When set to `true` a trace observer will write trace metrics to
    the current account.
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the trace observer."""

    provider_region = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeProviderRegion), graphql_name="providerRegion"
    )
    """Provider and region where the trace observer must run. Currently,
    only AWS regions are supported.
    """


class EdgeDataSourceGroupInput(sgqlc.types.Input):
    """Data required to change the data source group."""

    __schema__ = nerdgraph
    __field_names__ = ("guids", "update_type")
    guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)), graphql_name="guids"
    )
    """The entity guids representing the entities you would like to
    update.
    """

    update_type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeDataSourceGroupUpdateType), graphql_name="updateType"
    )
    """The type of update that should be performed with the supplied
    entity guids.
    """


class EdgeDeleteTraceFilterRulesInput(sgqlc.types.Input):
    """Input for deleting multiple trace filter rules by id"""

    __schema__ = nerdgraph
    __field_names__ = ("span_attribute_rule_ids",)
    span_attribute_rule_ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Int)),
        graphql_name="spanAttributeRuleIds",
    )
    """One or more SpanAttributeRule id(s) to be deleted."""


class EdgeDeleteTraceObserverInput(sgqlc.types.Input):
    """Data required to delete a trace observer."""

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """Globally unique identifier of the trace observer being deleted."""


class EdgeRandomTraceFilterInput(sgqlc.types.Input):
    """Data required to change the random trace filter configuration."""

    __schema__ = nerdgraph
    __field_names__ = ("percent_kept",)
    percent_kept = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="percentKept"
    )
    """The percentage of randomly selected traces to keep. Acceptable
    values are between 0.0001 and 100.
    """


class EdgeUpdateTraceObserverInput(sgqlc.types.Input):
    """Data required to update a trace observer."""

    __schema__ = nerdgraph
    __field_names__ = (
        "data_source_group_config",
        "id",
        "monitoring",
        "name",
        "random_trace_filter_config",
    )
    data_source_group_config = sgqlc.types.Field(
        EdgeDataSourceGroupInput, graphql_name="dataSourceGroupConfig"
    )
    """When set, allows updating the data source group."""

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """Globally unique identifier of the trace observer being updated."""

    monitoring = sgqlc.types.Field(Boolean, graphql_name="monitoring")
    """When set to `true` a trace observer will write trace metrics to
    the current account.
    """

    name = sgqlc.types.Field(String, graphql_name="name")
    """Name of the trace observer."""

    random_trace_filter_config = sgqlc.types.Field(
        EdgeRandomTraceFilterInput, graphql_name="randomTraceFilterConfig"
    )
    """When set, allows changing the random trace filter configuration."""


class EntityGoldenContextInput(sgqlc.types.Input):
    """Input type used to define the context for the golden metrics."""

    __schema__ = nerdgraph
    __field_names__ = ("account", "guid")
    account = sgqlc.types.Field(Int, graphql_name="account")
    """Account context."""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """Collection guid context."""


class EntityGoldenMetricInput(sgqlc.types.Input):
    """Input type for the metrics."""

    __schema__ = nerdgraph
    __field_names__ = ("event_id", "facet", "from_", "name", "select", "title", "where")
    event_id = sgqlc.types.Field(String, graphql_name="eventId")
    """The field that is used identifies the entities. Default:
    entity.guid
    """

    facet = sgqlc.types.Field(String, graphql_name="facet")
    """The field to FACET by. Default: entity.name"""

    from_ = sgqlc.types.Field(String, graphql_name="from")
    """The FROM clause of the query. Default: Metric"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the metric"""

    select = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="select")
    """The SELECT clause of the query."""

    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="title")
    """The title of the metric"""

    where = sgqlc.types.Field(String, graphql_name="where")
    """If a complementary WHERE clause is given this field will contain
    it.
    """


class EntityGoldenNrqlTimeWindowInput(sgqlc.types.Input):
    """Time range to apply to the golden metric NRQL query"""

    __schema__ = nerdgraph
    __field_names__ = ("since", "until")
    since = sgqlc.types.Field(Nrql, graphql_name="since")
    """Start time."""

    until = sgqlc.types.Field(Nrql, graphql_name="until")
    """End time."""


class EntityGoldenTagInput(sgqlc.types.Input):
    """An input that represents a golden tag"""

    __schema__ = nerdgraph
    __field_names__ = ("key",)
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """The golden tag key."""


class EntityRelationshipEdgeFilter(sgqlc.types.Input):
    """EntityRelationship edge filter."""

    __schema__ = nerdgraph
    __field_names__ = ("direction", "entity_domain_types", "relationship_types")
    direction = sgqlc.types.Field(
        EntityRelationshipEdgeDirection, graphql_name="direction"
    )
    """Filter by direction of relationship."""

    entity_domain_types = sgqlc.types.Field(
        "EntityRelationshipEntityDomainTypeFilter", graphql_name="entityDomainTypes"
    )
    """Filter on entity domain-types."""

    relationship_types = sgqlc.types.Field(
        "EntityRelationshipEdgeTypeFilter", graphql_name="relationshipTypes"
    )
    """Filter on relationship types."""


class EntityRelationshipEdgeTypeFilter(sgqlc.types.Input):
    """Filter on relationship types."""

    __schema__ = nerdgraph
    __field_names__ = ("exclude", "include")
    exclude = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityRelationshipEdgeType)),
        graphql_name="exclude",
    )
    """Filter the relationships to those that are not of specific
    relationship types.
    """

    include = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityRelationshipEdgeType)),
        graphql_name="include",
    )
    """Filter the relationships to those of specific relationship types."""


class EntityRelationshipEntityDomainTypeFilter(sgqlc.types.Input):
    """Filter on entity domain-types."""

    __schema__ = nerdgraph
    __field_names__ = ("exclude", "include")
    exclude = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(DomainTypeInput)),
        graphql_name="exclude",
    )
    """Filter the relationships to those between entities that are not of
    specific domain-types.
    """

    include = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(DomainTypeInput)),
        graphql_name="include",
    )
    """Filter the relationships to those between entities of specific
    domain-types.
    """


class EntityRelationshipFilter(sgqlc.types.Input):
    """Relationship filter"""

    __schema__ = nerdgraph
    __field_names__ = ("entity_type", "infrastructure_integration_type")
    entity_type = sgqlc.types.Field(
        sgqlc.types.list_of(EntityType), graphql_name="entityType"
    )
    """Filter the relationships to those that contain a specific entity
    type.
    """

    infrastructure_integration_type = sgqlc.types.Field(
        sgqlc.types.list_of(EntityInfrastructureIntegrationType),
        graphql_name="infrastructureIntegrationType",
    )
    """Filter the relationships to those that contain a specific
    Infrastructure integration entity type
    """


class EntitySearchOptions(sgqlc.types.Input):
    """Additional entity search options."""

    __schema__ = nerdgraph
    __field_names__ = ("case_sensitive_tag_matching", "limit")
    case_sensitive_tag_matching = sgqlc.types.Field(
        Boolean, graphql_name="caseSensitiveTagMatching"
    )
    """Whether or not matching on tag keys and values should be case-
    sensitive.
    """

    limit = sgqlc.types.Field(Int, graphql_name="limit")
    """A limit to apply to the number of entities returned. Note: this
    option can only _lower_ the default limits.
    """


class EntitySearchQueryBuilder(sgqlc.types.Input):
    """An object that can be used to discover and create the entity
    search query argument.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "alert_severity",
        "alertable",
        "domain",
        "infrastructure_integration_type",
        "name",
        "reporting",
        "tags",
        "type",
    )
    alert_severity = sgqlc.types.Field(
        EntityAlertSeverity, graphql_name="alertSeverity"
    )
    """The alerting severity of the entity."""

    alertable = sgqlc.types.Field(Boolean, graphql_name="alertable")
    """The alertable status of the entity"""

    domain = sgqlc.types.Field(EntitySearchQueryBuilderDomain, graphql_name="domain")
    """The entity domain. This is not a complete list of entity domains
    available; it is a way to explore the most popular domains.
    """

    infrastructure_integration_type = sgqlc.types.Field(
        EntityInfrastructureIntegrationType,
        graphql_name="infrastructureIntegrationType",
    )
    """**WARNING! This argument is deprecated and will not be updated
    with new infrastructure integration types.** If you want to query
    for a type not in this list, use the `query` argument instead of
    `queryBuilder`. To see the query string that is generated by your
    `queryBuilder` search, ask for the `query` field in the result
    object. You can then use this to build a query supplied to the
    `query` argument and remove your `queryBuilder`.  The
    Infrastructure integration type. This should be used in place of
    the `type` field to search for Infrastructure integration specific
    types.
    """

    name = sgqlc.types.Field(String, graphql_name="name")
    """The entity name."""

    reporting = sgqlc.types.Field(Boolean, graphql_name="reporting")
    """The reporting status of the entity."""

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("EntitySearchQueryBuilderTag")),
        graphql_name="tags",
    )
    """A list of tags applied to the entity."""

    type = sgqlc.types.Field(EntitySearchQueryBuilderType, graphql_name="type")
    """The entity type.  This is not a complete list of entity types
    available; it is a way to explore the most popular types.  If you
    are querying for Infrastructure integration types, use the
    `infrastructureIntegrationType` field instead of `type`.
    """


class EntitySearchQueryBuilderTag(sgqlc.types.Input):
    """An entity tag."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """The tag key. You can search using a `tags.` prefix or omit it and
    receive the same results.  Examples: `tags.environment`,
    `environment`.
    """

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """The tag value."""


class ErrorsInboxAssignErrorGroupInput(sgqlc.types.Input):
    """Input for assignment mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("user_email", "user_id")
    user_email = sgqlc.types.Field(String, graphql_name="userEmail")
    """Email address of the user that will be assigned."""

    user_id = sgqlc.types.Field(Int, graphql_name="userId")
    """Id of the user that will be assigned."""


class ErrorsInboxAssignmentSearchFilterInput(sgqlc.types.Input):
    """Input type for assignment search filter"""

    __schema__ = nerdgraph
    __field_names__ = ("user_email", "user_id")
    user_email = sgqlc.types.Field(String, graphql_name="userEmail")
    """Filter by assigned user email."""

    user_id = sgqlc.types.Field(Int, graphql_name="userId")
    """Filter by assigned user id"""


class ErrorsInboxErrorEventInput(sgqlc.types.Input):
    """Input for error events."""

    __schema__ = nerdgraph
    __field_names__ = ("entity_guid", "message", "name")
    entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="entityGuid"
    )
    """Guid of entity that generated the event."""

    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """Error event message."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Error event name."""


class ErrorsInboxErrorGroupSearchFilterInput(sgqlc.types.Input):
    """Set of filters for scoping error group searches"""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_ids",
        "application_versions",
        "assignment",
        "ids",
        "is_assigned",
        "states",
    )
    account_ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name="accountIds"
    )
    """Filter error groups by account ID"""

    application_versions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="applicationVersions",
    )
    """Filter error groups by the version of the application"""

    assignment = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(ErrorsInboxAssignmentSearchFilterInput)
        ),
        graphql_name="assignment",
    )
    """Filter error groups by assignment"""

    ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name="ids"
    )
    """Filter error groups by id"""

    is_assigned = sgqlc.types.Field(Boolean, graphql_name="isAssigned")
    """Filter error groups by assignment status"""

    states = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ErrorsInboxErrorGroupState)),
        graphql_name="states",
    )
    """Filter error groups by error group states"""


class ErrorsInboxResourceFilterInput(sgqlc.types.Input):
    """Criteria for the resource filter"""

    __schema__ = nerdgraph
    __field_names__ = ("types",)
    types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ErrorsInboxResourceType)),
        graphql_name="types",
    )
    """Types of resources to include in the query"""


class EventsToMetricsCreateRuleInput(sgqlc.types.Input):
    """Details needed to create an events to metrics conversion rule."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "description", "name", "nrql")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account where the events exist and the metrics will be put."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Provides additional information about the rule."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the rule. This must be unique within a given account."""

    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")
    """Explains how to create one or more metrics from events."""


class EventsToMetricsDeleteRuleInput(sgqlc.types.Input):
    """Identifying information about the events to metrics rule you want
    to delete.
    """

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "rule_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """A submitted account id."""

    rule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="ruleId")
    """A submitted rule id."""


class EventsToMetricsUpdateRuleInput(sgqlc.types.Input):
    """Identifying information about the events to metrics rule you want
    to update.
    """

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "enabled", "rule_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """A submitted account id."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Changes the state of the rule as being enabled or disabled."""

    rule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="ruleId")
    """A submitted rule id."""


class InstallationInstallStatusInput(sgqlc.types.Input):
    """An object that contains the overall installation status to be
    created.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "cli_version",
        "enabled_proxy",
        "error",
        "host_name",
        "install_id",
        "install_library_version",
        "is_unsupported",
        "kernel_arch",
        "kernel_version",
        "log_file_path",
        "os",
        "platform",
        "platform_family",
        "platform_version",
        "redirect_url",
        "state",
        "targeted_install",
        "timestamp",
    )
    cli_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="cliVersion"
    )
    """The version of the newrelic-cli that was used for a given
    installation attempt.
    """

    enabled_proxy = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="enabledProxy"
    )
    """Whether or not the installation is using a proxy."""

    error = sgqlc.types.Field(
        sgqlc.types.non_null("InstallationStatusErrorInput"), graphql_name="error"
    )
    """The error for a given installation attempt."""

    host_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="hostName")
    """The host name of the customer's machine."""

    install_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="installId")
    """The unique ID that corresponds to an install status."""

    install_library_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="installLibraryVersion"
    )
    """The version of the open-install-library that is being used."""

    is_unsupported = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isUnsupported"
    )
    """Whether or not the installation is supported on the host machine."""

    kernel_arch = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="kernelArch"
    )
    """The kernel architecture of the customer's machine."""

    kernel_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="kernelVersion"
    )
    """The kernel version of the customer's machine."""

    log_file_path = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="logFilePath"
    )
    """The path to the log file on the customer's host."""

    os = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="os")
    """The OS of the customer's machine."""

    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="platform")
    """The platform name provided by the open-install-library."""

    platform_family = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="platformFamily"
    )
    """The platform family name provided by the open-install-library."""

    platform_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="platformVersion"
    )
    """The platform version provided by the open-install-library."""

    redirect_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="redirectUrl"
    )
    """A URL generated by the newrelic-cli that redirects to the
    appropriate entity once an installation is complete.
    """

    state = sgqlc.types.Field(
        sgqlc.types.non_null(InstallationInstallStateType), graphql_name="state"
    )
    """The state of the installation."""

    targeted_install = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="targetedInstall"
    )
    """Whether or not the installation is a targeted install."""

    timestamp = sgqlc.types.Field(EpochSeconds, graphql_name="timestamp")
    """The timestamp for when the install event occurred."""


class InstallationRecipeStatus(sgqlc.types.Input):
    """An object that represents a recipe status."""

    __schema__ = nerdgraph
    __field_names__ = (
        "cli_version",
        "complete",
        "display_name",
        "entity_guid",
        "error",
        "host_name",
        "install_id",
        "install_library_version",
        "kernel_arch",
        "kernel_version",
        "log_file_path",
        "metadata",
        "name",
        "os",
        "platform",
        "platform_family",
        "platform_version",
        "redirect_url",
        "status",
        "targeted_install",
        "task_path",
        "validation_duration_milliseconds",
    )
    cli_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="cliVersion"
    )
    """The version of the newrelic-cli that was used for a given recipe."""

    complete = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="complete")
    """Whether or not the recipe has been installed and all steps have
    been completed.
    """

    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )
    """The display name for a given recipe."""

    entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="entityGuid"
    )
    """The entity Guid for a given recipe."""

    error = sgqlc.types.Field(
        sgqlc.types.non_null("InstallationStatusErrorInput"), graphql_name="error"
    )
    """The error returned for a given recipe."""

    host_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="hostName")
    """The host name of the customer's machine."""

    install_id = sgqlc.types.Field(ID, graphql_name="installId")
    """The unique ID that corresponds to an install event."""

    install_library_version = sgqlc.types.Field(
        SemVer, graphql_name="installLibraryVersion"
    )
    """The version of the open-install-library that is being used."""

    kernel_arch = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="kernelArch"
    )
    """The kernel architecture of the customer's machine."""

    kernel_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="kernelVersion"
    )
    """The kernel version of the customer's machine."""

    log_file_path = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="logFilePath"
    )
    """The path to the log file on the customer's host."""

    metadata = sgqlc.types.Field(InstallationRawMetadata, graphql_name="metadata")
    """Additional key:value data related to an error or related to the
    environment where the installation ocurred.
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The unique name for a given recipe."""

    os = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="os")
    """The OS of the customer's machine."""

    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="platform")
    """The platform name provided by the open-install-library."""

    platform_family = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="platformFamily"
    )
    """The platform family name provided by the open-install-library."""

    platform_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="platformVersion"
    )
    """The platform version provided by the open-install-library."""

    redirect_url = sgqlc.types.Field(String, graphql_name="redirectUrl")
    """The redirect URL created by the CLI used for redirecting to a
    particular entity.
    """

    status = sgqlc.types.Field(
        sgqlc.types.non_null(InstallationRecipeStatusType), graphql_name="status"
    )
    """The status for a given recipe."""

    targeted_install = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="targetedInstall"
    )
    """Whether or not the recipe being installed is a targeted install."""

    task_path = sgqlc.types.Field(String, graphql_name="taskPath")
    """The path to the installation task as defined in the open-install-
    library.
    """

    validation_duration_milliseconds = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds),
        graphql_name="validationDurationMilliseconds",
    )
    """The number of milliseconds it took to validate the recipe."""


class InstallationStatusErrorInput(sgqlc.types.Input):
    """An object that represents a status error whenever an recipe has
    failed to install.
    """

    __schema__ = nerdgraph
    __field_names__ = ("details", "message")
    details = sgqlc.types.Field(String, graphql_name="details")
    """Error details, if any."""

    message = sgqlc.types.Field(String, graphql_name="message")
    """The actual error message."""


class LogConfigurationsCreateDataPartitionRuleInput(sgqlc.types.Input):
    """A new data partition rule."""

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "enabled",
        "matching_criteria",
        "retention_policy",
        "target_data_partition",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the data partition rule."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether or not this data partition rule is enabled."""

    matching_criteria = sgqlc.types.Field(
        sgqlc.types.non_null("LogConfigurationsDataPartitionRuleMatchingCriteriaInput"),
        graphql_name="matchingCriteria",
    )
    """The matching criteria of the data partition rule."""

    retention_policy = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsDataPartitionRuleRetentionPolicyType),
        graphql_name="retentionPolicy",
    )
    """The retention policy of the data partition data."""

    target_data_partition = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsLogDataPartitionName),
        graphql_name="targetDataPartition",
    )
    """The name of the data partition where logs will be allocated once
    the rule is enabled.
    """


class LogConfigurationsCreateObfuscationActionInput(sgqlc.types.Input):
    """Input for creating an obfuscation action on a rule being created."""

    __schema__ = nerdgraph
    __field_names__ = ("attributes", "expression_id", "method")
    attributes = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="attributes",
    )
    """Attribute names for action. An empty list applies the action to
    all the attributes.
    """

    expression_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="expressionId"
    )
    """Expression Id for action."""

    method = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsObfuscationMethod), graphql_name="method"
    )
    """Obfuscation method to use."""


class LogConfigurationsCreateObfuscationExpressionInput(sgqlc.types.Input):
    """Input for creating an obfuscation expression."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "name", "regex")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of expression."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of expression."""

    regex = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="regex")
    """Regex of expression."""


class LogConfigurationsCreateObfuscationRuleInput(sgqlc.types.Input):
    """Input for creating an obfuscation rule."""

    __schema__ = nerdgraph
    __field_names__ = ("actions", "description", "enabled", "filter", "name")
    actions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(LogConfigurationsCreateObfuscationActionInput)
            )
        ),
        graphql_name="actions",
    )
    """Actions for the rule. The actions will be applied in the order
    specified by this list.
    """

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of rule."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the rule should be applied or not to incoming data."""

    filter = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="filter")
    """NRQL for determining whether a given log record should have
    obfuscation actions applied.
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of rule."""


class LogConfigurationsDataPartitionRuleMatchingCriteriaInput(sgqlc.types.Input):
    """The data partition rule matching criteria."""

    __schema__ = nerdgraph
    __field_names__ = ("attribute_name", "matching_expression", "matching_method")
    attribute_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attributeName"
    )
    """The attribute name against which this matching condition will be
    evaluated.
    """

    matching_expression = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="matchingExpression"
    )
    """The matching expression of the data partition rule definition."""

    matching_method = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsDataPartitionRuleMatchingOperator),
        graphql_name="matchingMethod",
    )
    """The matching method of the data partition rule definition."""


class LogConfigurationsParsingRuleConfiguration(sgqlc.types.Input):
    """A new parsing rule."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "enabled", "grok", "lucene", "nrql")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """A description of what this parsing rule represents."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether or not this rule is enabled."""

    grok = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="grok")
    """The Grok of what to parse."""

    lucene = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="lucene")
    """The Lucene to match events to the parsing rule."""

    nrql = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="nrql")
    """The NRQL to match events to the parsing rule."""


class LogConfigurationsPipelineConfigurationInput(sgqlc.types.Input):
    """The pipeline configuration for an account."""

    __schema__ = nerdgraph
    __field_names__ = (
        "enrichment_disabled",
        "json_parsing_disabled",
        "obfuscation_disabled",
        "parsing_disabled",
        "patterns_enabled",
        "recursive_json_parsing_disabled",
        "transformation_disabled",
    )
    enrichment_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="enrichmentDisabled"
    )
    """Whether or not enrichment is disabled."""

    json_parsing_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="jsonParsingDisabled"
    )
    """Whether or not JSON parsing is disabled."""

    obfuscation_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="obfuscationDisabled"
    )
    """Whether or not obfuscation is disabled."""

    parsing_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="parsingDisabled"
    )
    """Whether or not parsing is disabled."""

    patterns_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="patternsEnabled"
    )
    """Whether or not patterns are enabled."""

    recursive_json_parsing_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="recursiveJsonParsingDisabled"
    )
    """Whether or not recursive JSON parsing is disabled."""

    transformation_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="transformationDisabled"
    )
    """Whether or not transformation is disabled."""


class LogConfigurationsUpdateDataPartitionRuleInput(sgqlc.types.Input):
    """An object for updating an existing data partition rule."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "enabled", "id", "matching_criteria")
    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the data partition rule."""

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Whether or not this data partition rule is enabled."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Unique data partition rule identifier."""

    matching_criteria = sgqlc.types.Field(
        LogConfigurationsDataPartitionRuleMatchingCriteriaInput,
        graphql_name="matchingCriteria",
    )
    """The criteria of the data partition rule."""


class LogConfigurationsUpdateObfuscationActionInput(sgqlc.types.Input):
    """Input for creating an obfuscation action on a rule being updated."""

    __schema__ = nerdgraph
    __field_names__ = ("attributes", "expression_id", "method")
    attributes = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="attributes",
    )
    """Attribute names for action. An empty list applies the action to
    all the attributes.
    """

    expression_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="expressionId"
    )
    """Expression Id for action."""

    method = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsObfuscationMethod), graphql_name="method"
    )
    """Obfuscation method to use."""


class LogConfigurationsUpdateObfuscationExpressionInput(sgqlc.types.Input):
    """Input for updating an obfuscation expression. Null fields are left
    untouched by mutation.
    """

    __schema__ = nerdgraph
    __field_names__ = ("description", "id", "name", "regex")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of expression."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Expression Id."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Name of expression."""

    regex = sgqlc.types.Field(String, graphql_name="regex")
    """Regex of expression."""


class LogConfigurationsUpdateObfuscationRuleInput(sgqlc.types.Input):
    """Input for updating an obfuscation rule. Null fields are left
    untouched by mutation.
    """

    __schema__ = nerdgraph
    __field_names__ = ("actions", "description", "enabled", "filter", "id", "name")
    actions = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(LogConfigurationsUpdateObfuscationActionInput)
        ),
        graphql_name="actions",
    )
    """Actions for the rule. When non-null, this list of actions is used
    to replace the existing list of actions of the rule. The actions
    will be applied in the order specified by this list.
    """

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of rule."""

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Whether the rule should be applied or not to incoming data."""

    filter = sgqlc.types.Field(Nrql, graphql_name="filter")
    """NRQL for determining whether a given log record should have
    obfuscation actions applied.
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Rule Id."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Name of rule."""


class MetricNormalizationCreateRuleInput(sgqlc.types.Input):
    """Input object used to represent the rule to be created"""

    __schema__ = nerdgraph
    __field_names__ = (
        "action",
        "application_guid",
        "enabled",
        "eval_order",
        "match_expression",
        "notes",
        "replacement",
        "terminate_chain",
    )
    action = sgqlc.types.Field(
        sgqlc.types.non_null(MetricNormalizationCustomerRuleAction),
        graphql_name="action",
    )
    """Customer rule action."""

    application_guid = sgqlc.types.Field(EntityGuid, graphql_name="applicationGuid")
    """Application GUID"""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Is rule enabled?"""

    eval_order = sgqlc.types.Field(Int, graphql_name="evalOrder")
    """Rule evaluation order"""

    match_expression = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="matchExpression"
    )
    """Metric Match Expression."""

    notes = sgqlc.types.Field(String, graphql_name="notes")
    """Notes."""

    replacement = sgqlc.types.Field(String, graphql_name="replacement")
    """Metric Replacement Expression."""

    terminate_chain = sgqlc.types.Field(Boolean, graphql_name="terminateChain")
    """Whether it terminates the evaluation chain or not"""


class MetricNormalizationEditRuleInput(sgqlc.types.Input):
    """Input object used to represent the rule to be created"""

    __schema__ = nerdgraph
    __field_names__ = (
        "action",
        "enabled",
        "eval_order",
        "id",
        "match_expression",
        "notes",
        "replacement",
        "terminate_chain",
    )
    action = sgqlc.types.Field(
        sgqlc.types.non_null(MetricNormalizationCustomerRuleAction),
        graphql_name="action",
    )
    """Rule action."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Is rule enabled?"""

    eval_order = sgqlc.types.Field(Int, graphql_name="evalOrder")
    """Rule evaluation order"""

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """Rule Id."""

    match_expression = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="matchExpression"
    )
    """Metric Match Expression."""

    notes = sgqlc.types.Field(String, graphql_name="notes")
    """Notes."""

    replacement = sgqlc.types.Field(String, graphql_name="replacement")
    """Metric Replacement Expression."""

    terminate_chain = sgqlc.types.Field(Boolean, graphql_name="terminateChain")
    """Whether it terminates the evaluation chain or not"""


class NerdStorageScopeInput(sgqlc.types.Input):
    """The data access level and ID for the selected scope."""

    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")
    """The ID for the selected scope."""

    name = sgqlc.types.Field(
        sgqlc.types.non_null(NerdStorageScope), graphql_name="name"
    )
    """The NerdStorage data access level."""


class NerdStorageVaultScope(sgqlc.types.Input):
    """The NerdStorageVault data access level."""

    __schema__ = nerdgraph
    __field_names__ = ("actor",)
    actor = sgqlc.types.Field(NerdStorageVaultActorScope, graphql_name="actor")
    """A NerdStorageVault data access level for the current user."""


class NerdStorageVaultWriteSecretInput(sgqlc.types.Input):
    """The data to be stored in NerdStorageVault."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """The unique identifier of the secret."""

    value = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="value")
    """The value of the secret."""


class NerdpackAllowListInput(sgqlc.types.Input):
    """Input data for allow list handling."""

    __schema__ = nerdgraph
    __field_names__ = ("account_ids",)
    account_ids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(Int)), graphql_name="accountIds"
    )
    """List of accounts that will be allow to subscribe. They must belong
    to the user's authorized account list.
    """


class NerdpackCreationInput(sgqlc.types.Input):
    """Input data for creating a new nerdpack."""

    __schema__ = nerdgraph
    __field_names__ = ("owner_account",)
    owner_account = sgqlc.types.Field(Int, graphql_name="ownerAccount")
    """Nerdpack owner account ID. If not provided it will use the account
    ID specified in the header.
    """


class NerdpackDataFilter(sgqlc.types.Input):
    """Data to filter subscribable nerdpack list."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "subscription_model", "tag")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """ID of the account to be subscribed."""

    subscription_model = sgqlc.types.Field(
        NerdpackSubscriptionModel, graphql_name="subscriptionModel"
    )
    """Nerdpack subscription model to filter."""

    tag = sgqlc.types.Field(NerdpackTagName, graphql_name="tag")
    """Tag the account may subscribe to."""


class NerdpackOverrideVersionRules(sgqlc.types.Input):
    """Attributes to match a specific nerdpack versions."""

    __schema__ = nerdgraph
    __field_names__ = ("nerdpack_id", "tag", "version")
    nerdpack_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="nerdpackId")
    """Nerdpack uuid."""

    tag = sgqlc.types.Field(NerdpackTagName, graphql_name="tag")
    """Nerdpack version tag."""

    version = sgqlc.types.Field(SemVer, graphql_name="version")
    """Semver-compliant Nerdpack version."""


class NerdpackRemoveVersionTagInput(sgqlc.types.Input):
    """Input data that identifies nerdpack tag."""

    __schema__ = nerdgraph
    __field_names__ = ("tag",)
    tag = sgqlc.types.Field(NerdpackTagName, graphql_name="tag")
    """Tag name."""


class NerdpackSubscribeAccountsInput(sgqlc.types.Input):
    """New subscriptions input."""

    __schema__ = nerdgraph
    __field_names__ = ("account_ids", "tag")
    account_ids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Int))),
        graphql_name="accountIds",
    )
    """List of accounts to be subscribed."""

    tag = sgqlc.types.Field(sgqlc.types.non_null(NerdpackTagName), graphql_name="tag")
    """Tag of the Nerdpack version to be subscribed to."""


class NerdpackTagVersionInput(sgqlc.types.Input):
    """Input data for nerdpack version tagging."""

    __schema__ = nerdgraph
    __field_names__ = ("tag", "version")
    tag = sgqlc.types.Field(NerdpackTagName, graphql_name="tag")
    """Tag to be added to the version."""

    version = sgqlc.types.Field(SemVer, graphql_name="version")
    """Nerdpack version."""


class NerdpackUnsubscribeAccountsInput(sgqlc.types.Input):
    """Data of accounts to be unsubscribed."""

    __schema__ = nerdgraph
    __field_names__ = ("account_ids",)
    account_ids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Int))),
        graphql_name="accountIds",
    )
    """List of accounts to be unsubscribed."""


class NerdpackVersionFilter(sgqlc.types.Input):
    """Attributes to filter a list of nerdpack versions. Restrictions:
    'tags' attribute cannot combined with other attributes.
    """

    __schema__ = nerdgraph
    __field_names__ = ("fallback", "tag", "tags", "version")
    fallback = sgqlc.types.Field(NerdpackVersionFilterFallback, graphql_name="fallback")
    """Fallback version to return if no version matches the given
    filters. No version is returned by default.
    """

    tag = sgqlc.types.Field(NerdpackTagName, graphql_name="tag")
    """Get a version with the specified tag."""

    tags = sgqlc.types.Field(sgqlc.types.list_of(NerdpackTagName), graphql_name="tags")
    """Get the versions with a tag from the tag list."""

    version = sgqlc.types.Field(SemVer, graphql_name="version")
    """Nerdpack version."""


class Nr1CatalogCommunityContactChannelInput(sgqlc.types.Input):
    """Details about the contact channel where users can get support via
    the web
    """

    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """The URL linking to the website where users can get web support"""


class Nr1CatalogEmailContactChannelInput(sgqlc.types.Input):
    """Details about the contact channel where users can get support via
    email
    """

    __schema__ = nerdgraph
    __field_names__ = ("address",)
    address = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="address")
    """The email address where users can get email support"""


class Nr1CatalogIssuesContactChannelInput(sgqlc.types.Input):
    """Details about the contact channel where users can get support via
    the repository issues page
    """

    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """The URL linking the repository issues page where users can get
    support
    """


class Nr1CatalogSearchFilter(sgqlc.types.Input):
    """Criteria for applying filters to a search"""

    __schema__ = nerdgraph
    __field_names__ = ("categories", "category", "components", "types")
    categories = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="categories"
    )
    """Filter the search results that match any in a list of category
    terms
    """

    category = sgqlc.types.Field(String, graphql_name="category")
    """Filter the search results by a particular category"""

    components = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogSearchComponentType)),
        graphql_name="components",
    )
    """Filter the search results that contain a set of component types"""

    types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogSearchResultType)),
        graphql_name="types",
    )
    """Filter the search results that are of a specific type"""


class Nr1CatalogSubmitMetadataInput(sgqlc.types.Input):
    """Metadata associated with the Nerdpack that will be available in
    the New Relic One Catalog
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "additional_info",
        "category_terms",
        "details",
        "documentation",
        "keywords",
        "repository",
        "support",
        "tagline",
        "version",
        "whats_new",
    )
    additional_info = sgqlc.types.Field(String, graphql_name="additionalInfo")
    """Additional information relevant for the Nerdpack"""

    category_terms = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="categoryTerms"
    )
    """A list of terms for category grouping when filtering and searching
    the Nerdpack
    """

    details = sgqlc.types.Field(String, graphql_name="details")
    """A long form description used in the catalog to detail the
    functionality of the Nerdpack
    """

    documentation = sgqlc.types.Field(String, graphql_name="documentation")
    """Additional documentation relevant for the Nerdpack"""

    keywords = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="keywords"
    )
    """A list of keywords for filtering and searching the Nerdpack"""

    repository = sgqlc.types.Field(String, graphql_name="repository")
    """A URL that links to the repository where the source code for this
    Nerdpack can be found
    """

    support = sgqlc.types.Field("Nr1CatalogSupportInput", graphql_name="support")
    """Support channels where users can contact you to get support for
    the Nerdpack
    """

    tagline = sgqlc.types.Field(String, graphql_name="tagline")
    """A tagline for the Nerdpack"""

    version = sgqlc.types.Field(sgqlc.types.non_null(SemVer), graphql_name="version")
    """The version of the Nerdpack that will be associated with this
    metadata
    """

    whats_new = sgqlc.types.Field(String, graphql_name="whatsNew")
    """A description of changes describing what changed for this version
    of the Nerdpack
    """


class Nr1CatalogSupportInput(sgqlc.types.Input):
    """A container specifying the various types support channels"""

    __schema__ = nerdgraph
    __field_names__ = ("community", "email", "issues")
    community = sgqlc.types.Field(
        Nr1CatalogCommunityContactChannelInput, graphql_name="community"
    )
    """A support channel where users can get support via the community"""

    email = sgqlc.types.Field(Nr1CatalogEmailContactChannelInput, graphql_name="email")
    """A support channel where users can get support via email"""

    issues = sgqlc.types.Field(
        Nr1CatalogIssuesContactChannelInput, graphql_name="issues"
    )
    """A support channel where users can get support via issues"""


class NrqlDropRulesCreateDropRuleInput(sgqlc.types.Input):
    """Details needed to create a NRQL drop rule."""

    __schema__ = nerdgraph
    __field_names__ = ("action", "description", "nrql")
    action = sgqlc.types.Field(
        sgqlc.types.non_null(NrqlDropRulesAction), graphql_name="action"
    )
    """The type of drop rule you want. This changes the way your NRQL
    string is interpreted.
    """

    description = sgqlc.types.Field(String, graphql_name="description")
    """Additional information about the rule."""

    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")
    """The NRQL string used to match data you want to take the specified
    action on.
    """


class NrqlQueryOptions(sgqlc.types.Input):
    """Additional options for NRQL queries."""

    __schema__ = nerdgraph
    __field_names__ = ("event_namespaces",)
    event_namespaces = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="eventNamespaces",
    )
    """Limit the NRQL query to return results from the chosen Event
    Namespaces.  You must supply at least 1 valid event namespace when
    using this option. Invalid event namespaces will be filtered out.
    If omitted, the default list will be `["Default"]`  For more
    details about Event Namespaces, visit our
    [docs](https://docs.newrelic.com/docs/accounts/new-relic-account-
    usage/getting-started-usage/insights-subscription-
    usage/#namespace).
    """


class OpenInstallationInstallTarget(sgqlc.types.Input):
    """Unique set of attributes which represent an install target"""

    __schema__ = nerdgraph
    __field_names__ = (
        "kernel_arch",
        "kernel_version",
        "os",
        "platform",
        "platform_family",
        "platform_version",
        "type",
    )
    kernel_arch = sgqlc.types.Field(String, graphql_name="kernelArch")
    """OS kernel architecture"""

    kernel_version = sgqlc.types.Field(String, graphql_name="kernelVersion")
    """OS kernel version"""

    os = sgqlc.types.Field(OpenInstallationOperatingSystem, graphql_name="os")
    """Operating system"""

    platform = sgqlc.types.Field(OpenInstallationPlatform, graphql_name="platform")
    """OS distribution"""

    platform_family = sgqlc.types.Field(
        OpenInstallationPlatformFamily, graphql_name="platformFamily"
    )
    """OS distribution family"""

    platform_version = sgqlc.types.Field(String, graphql_name="platformVersion")
    """OS distribution version"""

    type = sgqlc.types.Field(OpenInstallationTargetType, graphql_name="type")
    """Target type"""


class OpenInstallationInstallableQuickstartComponentInput(sgqlc.types.Input):
    """Mutation input object representing a single component from a given
    quickstart
    """

    __schema__ = nerdgraph
    __field_names__ = ("component_id", "component_type")
    component_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="componentId"
    )
    """The ID of the component"""

    component_type = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationInstallableQuickstartComponentType),
        graphql_name="componentType",
    )
    """The type of the component"""


class OpenInstallationQuickstartInputCriteria(sgqlc.types.Input):
    """Input for searching installable Quickstarts"""

    __schema__ = nerdgraph
    __field_names__ = ("level", "name")
    level = sgqlc.types.Field(OpenInstallationQuickstartLevel, graphql_name="level")
    """Support level of a Quickstart"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the Quickstart"""


class OpenInstallationRecipeSearchCriteria(sgqlc.types.Input):
    """Input for searching installable integration recipes"""

    __schema__ = nerdgraph
    __field_names__ = ("display_name", "install_target", "name")
    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """Friendly name of the integration"""

    install_target = sgqlc.types.Field(
        OpenInstallationInstallTarget, graphql_name="installTarget"
    )
    """Object representing the intended install target"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Short unique handle for the name of the integration"""


class OrganizationProvisioningProductInput(sgqlc.types.Input):
    """A product."""

    __schema__ = nerdgraph
    __field_names__ = ("id", "name", "units_of_measure")
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """Unique id for Product"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Product name"""

    units_of_measure = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("OrganizationProvisioningUnitOfMeasureInput")
        ),
        graphql_name="unitsOfMeasure",
    )
    """An array of unit and quantity for a product"""


class OrganizationProvisioningUnitOfMeasureInput(sgqlc.types.Input):
    """UOM or unit of measure used to know what a product charges for,
    such as events, hosts, CUs, etc.
    """

    __schema__ = nerdgraph
    __field_names__ = ("quantity", "unit")
    quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="quantity")
    """Amount of unit"""

    unit = sgqlc.types.Field(
        sgqlc.types.non_null(OrganizationProvisioningUnit), graphql_name="unit"
    )
    """Unit, such as events, hosts, CUs, etc"""


class OrganizationUpdateInput(sgqlc.types.Input):
    """Attributes for updating an organization."""

    __schema__ = nerdgraph
    __field_names__ = ("name",)
    name = sgqlc.types.Field(String, graphql_name="name")
    """The new name for the organization."""


class ReferenceEntityCreateRepositoryInput(sgqlc.types.Input):
    """Information needed to create a repository entity."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "name", "url")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account id this repository will live under."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the repository."""

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """The url of the repository."""


class ServiceLevelEventsCreateInput(sgqlc.types.Input):
    """The events that define the SLI."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "bad_events", "good_events", "valid_events")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The New Relic account ID where the events are fetched from."""

    bad_events = sgqlc.types.Field(
        "ServiceLevelEventsQueryCreateInput", graphql_name="badEvents"
    )
    """The definition of bad events."""

    good_events = sgqlc.types.Field(
        "ServiceLevelEventsQueryCreateInput", graphql_name="goodEvents"
    )
    """The definition of good events."""

    valid_events = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelEventsQueryCreateInput"),
        graphql_name="validEvents",
    )
    """The definition of valid events."""


class ServiceLevelEventsQueryCreateInput(sgqlc.types.Input):
    """The query that represents the events to fetch."""

    __schema__ = nerdgraph
    __field_names__ = ("from_", "where")
    from_ = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="from")
    """The NRDB event to fetch the data from."""

    where = sgqlc.types.Field(Nrql, graphql_name="where")
    """The NRQL condition to filter the events."""


class ServiceLevelEventsQueryUpdateInput(sgqlc.types.Input):
    """The query that represents the events to fetch."""

    __schema__ = nerdgraph
    __field_names__ = ("from_", "where")
    from_ = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="from")
    """The NRDB event to fetch the data from."""

    where = sgqlc.types.Field(Nrql, graphql_name="where")
    """The NRQL condition to filter the events."""


class ServiceLevelEventsUpdateInput(sgqlc.types.Input):
    """The events that define the SLI."""

    __schema__ = nerdgraph
    __field_names__ = ("bad_events", "good_events", "valid_events")
    bad_events = sgqlc.types.Field(
        ServiceLevelEventsQueryUpdateInput, graphql_name="badEvents"
    )
    """The definition of bad events."""

    good_events = sgqlc.types.Field(
        ServiceLevelEventsQueryUpdateInput, graphql_name="goodEvents"
    )
    """The definition of good events."""

    valid_events = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelEventsQueryUpdateInput),
        graphql_name="validEvents",
    )
    """The definition of valid events."""


class ServiceLevelIndicatorCreateInput(sgqlc.types.Input):
    """The input object that represents the SLI that will be created."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "events", "name", "objectives", "slug")
    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the SLI."""

    events = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelEventsCreateInput), graphql_name="events"
    )
    """The events that define the SLI."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the SLI."""

    objectives = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("ServiceLevelObjectiveCreateInput")),
        graphql_name="objectives",
    )
    """A list of objective definitions."""

    slug = sgqlc.types.Field(String, graphql_name="slug")
    """[DEPRECATED] The slug is deprecated and it will be removed from
    the schema as soon as possible.
    """


class ServiceLevelIndicatorUpdateInput(sgqlc.types.Input):
    """The input object that represents the SLI that will be updated."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "events", "name", "objectives")
    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the SLI."""

    events = sgqlc.types.Field(ServiceLevelEventsUpdateInput, graphql_name="events")
    """The events that define the SLI."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the SLI."""

    objectives = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("ServiceLevelObjectiveUpdateInput")),
        graphql_name="objectives",
    )
    """A list of objective definitions."""


class ServiceLevelObjectiveCreateInput(sgqlc.types.Input):
    """The input object that represents an objective definition."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "name", "target", "time_window")
    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the SLO."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the SLO."""

    target = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="target")
    """The target percentage of the SLO. Maximum value is 100."""

    time_window = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelObjectiveTimeWindowCreateInput"),
        graphql_name="timeWindow",
    )
    """The time window configuration of the SLO."""


class ServiceLevelObjectiveRollingTimeWindowCreateInput(sgqlc.types.Input):
    """The rolling time window configuration of the SLO."""

    __schema__ = nerdgraph
    __field_names__ = ("count", "unit")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """The count of time units. Accepted values are 1, 7 and 28 days."""

    unit = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelObjectiveRollingTimeWindowUnit),
        graphql_name="unit",
    )
    """The time unit."""


class ServiceLevelObjectiveRollingTimeWindowUpdateInput(sgqlc.types.Input):
    """The rolling time window configuration of the SLO."""

    __schema__ = nerdgraph
    __field_names__ = ("count", "unit")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """The count of time units. Accepted values are 1, 7 and 28 days."""

    unit = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelObjectiveRollingTimeWindowUnit),
        graphql_name="unit",
    )
    """The time unit."""


class ServiceLevelObjectiveTimeWindowCreateInput(sgqlc.types.Input):
    """The time window configuration of the SLO."""

    __schema__ = nerdgraph
    __field_names__ = ("rolling",)
    rolling = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelObjectiveRollingTimeWindowCreateInput),
        graphql_name="rolling",
    )
    """The rolling time window configuration of the SLO."""


class ServiceLevelObjectiveTimeWindowUpdateInput(sgqlc.types.Input):
    """The time window configuration of the SLO."""

    __schema__ = nerdgraph
    __field_names__ = ("rolling",)
    rolling = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelObjectiveRollingTimeWindowUpdateInput),
        graphql_name="rolling",
    )
    """The rolling time window configuration of the SLO."""


class ServiceLevelObjectiveUpdateInput(sgqlc.types.Input):
    """The input object that represents an objective definition."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "name", "target", "time_window")
    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the SLO."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the SLO."""

    target = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="target")
    """The target percentage of the SLO. Maximum value is 100."""

    time_window = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelObjectiveTimeWindowUpdateInput),
        graphql_name="timeWindow",
    )
    """The time window configuration of the SLO."""


class SyntheticsCreateBrokenLinksMonitorInput(sgqlc.types.Input):
    """The monitor input values needed to create a Broken Links monitor"""

    __schema__ = nerdgraph
    __field_names__ = ("locations", "name", "period", "status", "tags", "uri")
    locations = sgqlc.types.Field(
        sgqlc.types.non_null("SyntheticsLocationsInput"), graphql_name="locations"
    )
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorPeriod), graphql_name="period"
    )
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorStatus), graphql_name="status"
    )
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of("SyntheticsTag"), graphql_name="tags")
    """The tags that will be associated with the monitor"""

    uri = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="uri")
    """The uri the monitor runs against"""


class SyntheticsCreateCertCheckMonitorInput(sgqlc.types.Input):
    """The monitor input values needed to create a Cert Check monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "domain",
        "locations",
        "name",
        "number_days_to_fail_before_cert_expires",
        "period",
        "status",
        "tags",
    )
    domain = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="domain")
    """The domain of the host that will have its certificate checked"""

    locations = sgqlc.types.Field(
        sgqlc.types.non_null("SyntheticsLocationsInput"), graphql_name="locations"
    )
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The human readable identifier for the monitor"""

    number_days_to_fail_before_cert_expires = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="numberDaysToFailBeforeCertExpires"
    )
    """The desired number of remaining days until the certificate expires
    to trigger a monitor failure
    """

    period = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorPeriod), graphql_name="period"
    )
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorStatus), graphql_name="status"
    )
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of("SyntheticsTag"), graphql_name="tags")
    """The tags that will be associated with the monitor"""


class SyntheticsCreateScriptApiMonitorInput(sgqlc.types.Input):
    """The monitor input values needed to create a Script Api monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "locations",
        "name",
        "period",
        "runtime",
        "script",
        "status",
        "tags",
    )
    locations = sgqlc.types.Field(
        sgqlc.types.non_null("SyntheticsScriptedMonitorLocationsInput"),
        graphql_name="locations",
    )
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorPeriod), graphql_name="period"
    )
    """The interval at which the monitor runs in minutes"""

    runtime = sgqlc.types.Field("SyntheticsRuntimeInput", graphql_name="runtime")
    """The runtime that the monitor will use to run jobs"""

    script = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="script")
    """The script that the monitor runs"""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorStatus), graphql_name="status"
    )
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of("SyntheticsTag"), graphql_name="tags")
    """The tags that will be associated with the monitor"""


class SyntheticsCreateScriptBrowserMonitorInput(sgqlc.types.Input):
    """The monitor input values needed to create a Script Browser monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "locations",
        "name",
        "period",
        "runtime",
        "script",
        "status",
        "tags",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsScriptBrowserMonitorAdvancedOptionsInput",
        graphql_name="advancedOptions",
    )
    """The monitor advanced options"""

    locations = sgqlc.types.Field(
        sgqlc.types.non_null("SyntheticsScriptedMonitorLocationsInput"),
        graphql_name="locations",
    )
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorPeriod), graphql_name="period"
    )
    """The interval at which the monitor runs in minutes"""

    runtime = sgqlc.types.Field("SyntheticsRuntimeInput", graphql_name="runtime")
    """The runtime that the monitor will use to run jobs"""

    script = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="script")
    """The script that the monitor runs"""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorStatus), graphql_name="status"
    )
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of("SyntheticsTag"), graphql_name="tags")
    """The tags that will be associated with the monitor"""


class SyntheticsCreateSimpleBrowserMonitorInput(sgqlc.types.Input):
    """The monitor input values needed to create a Simple Browser monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "locations",
        "name",
        "period",
        "runtime",
        "status",
        "tags",
        "uri",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsSimpleBrowserMonitorAdvancedOptionsInput",
        graphql_name="advancedOptions",
    )
    """The monitor advanced options"""

    locations = sgqlc.types.Field(
        sgqlc.types.non_null("SyntheticsLocationsInput"), graphql_name="locations"
    )
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorPeriod), graphql_name="period"
    )
    """The interval at which the monitor runs in minutes"""

    runtime = sgqlc.types.Field("SyntheticsRuntimeInput", graphql_name="runtime")
    """The runtime that the monitor will use to run jobs"""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorStatus), graphql_name="status"
    )
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of("SyntheticsTag"), graphql_name="tags")
    """The tags that will be associated with the monitor"""

    uri = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="uri")
    """The uri the monitor runs against"""


class SyntheticsCreateSimpleMonitorInput(sgqlc.types.Input):
    """The monitor input values needed to create a Simple (ping) monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "locations",
        "name",
        "period",
        "status",
        "tags",
        "uri",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsSimpleMonitorAdvancedOptionsInput", graphql_name="advancedOptions"
    )
    """The monitor advanced options"""

    locations = sgqlc.types.Field(
        sgqlc.types.non_null("SyntheticsLocationsInput"), graphql_name="locations"
    )
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorPeriod), graphql_name="period"
    )
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorStatus), graphql_name="status"
    )
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of("SyntheticsTag"), graphql_name="tags")
    """The tags that will be associated with the monitor"""

    uri = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="uri")
    """The uri the monitor runs against"""


class SyntheticsCreateStepMonitorInput(sgqlc.types.Input):
    """The monitor input values needed to create a Step monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "locations",
        "name",
        "period",
        "status",
        "steps",
        "tags",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsStepMonitorAdvancedOptionsInput", graphql_name="advancedOptions"
    )
    """The monitor advanced options"""

    locations = sgqlc.types.Field(
        sgqlc.types.non_null("SyntheticsScriptedMonitorLocationsInput"),
        graphql_name="locations",
    )
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorPeriod), graphql_name="period"
    )
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorStatus), graphql_name="status"
    )
    """The run state of the monitor"""

    steps = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("SyntheticsStepInput"))
        ),
        graphql_name="steps",
    )
    """The steps that make up the script the monitor will run"""

    tags = sgqlc.types.Field(sgqlc.types.list_of("SyntheticsTag"), graphql_name="tags")
    """The tags that will be associated with the monitor"""


class SyntheticsCustomHeaderInput(sgqlc.types.Input):
    """Custom header input for monitor jobs"""

    __schema__ = nerdgraph
    __field_names__ = ("name", "value")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Header name"""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Header value"""


class SyntheticsLocationsInput(sgqlc.types.Input):
    """The location(s) from which a non-scripted monitor runs"""

    __schema__ = nerdgraph
    __field_names__ = ("private", "public")
    private = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="private")
    """Existing private location(s) in which the monitor will run"""

    public = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="public")
    """Publicly available location(s) in which the monitor will run"""


class SyntheticsPrivateLocationInput(sgqlc.types.Input):
    """Information realating to a private location"""

    __schema__ = nerdgraph
    __field_names__ = ("guid", "vse_password")
    guid = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="guid")
    """The unique identifier for the Synthetics private location in New
    Relic
    """

    vse_password = sgqlc.types.Field(SecureValue, graphql_name="vsePassword")
    """The location's Verified Script Execution password (Only necessary
    if Verified Script Execution is enabled for the location)
    """


class SyntheticsRuntimeInput(sgqlc.types.Input):
    """Input to determine which runtime the monitor will run"""

    __schema__ = nerdgraph
    __field_names__ = ("runtime_type", "runtime_type_version", "script_language")
    runtime_type = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="runtimeType"
    )
    """The runtime type that the monitor will run"""

    runtime_type_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="runtimeTypeVersion"
    )
    """The specific version of the runtime type selected"""

    script_language = sgqlc.types.Field(String, graphql_name="scriptLanguage")
    """The programing language that should execute the script"""


class SyntheticsScriptBrowserMonitorAdvancedOptionsInput(sgqlc.types.Input):
    """The advanced options inputs available for a Script Browser monitor"""

    __schema__ = nerdgraph
    __field_names__ = ("enable_screenshot_on_failure_and_script",)
    enable_screenshot_on_failure_and_script = sgqlc.types.Field(
        Boolean, graphql_name="enableScreenshotOnFailureAndScript"
    )
    """Capture a screenshot during job execution"""


class SyntheticsScriptedMonitorLocationsInput(sgqlc.types.Input):
    """The location(s) from which the scripted monitor runs."""

    __schema__ = nerdgraph
    __field_names__ = ("private", "public")
    private = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(SyntheticsPrivateLocationInput)),
        graphql_name="private",
    )
    """The private location(s) that the monitor will run jobs from"""

    public = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="public"
    )
    """The public location(s) that the monitor will run jobs from"""


class SyntheticsSimpleBrowserMonitorAdvancedOptionsInput(sgqlc.types.Input):
    """The advanced options inputs available for a Simple Browser monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "custom_headers",
        "enable_screenshot_on_failure_and_script",
        "response_validation_text",
        "use_tls_validation",
    )
    custom_headers = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsCustomHeaderInput), graphql_name="customHeaders"
    )
    """Custom headers to use in monitor job"""

    enable_screenshot_on_failure_and_script = sgqlc.types.Field(
        Boolean, graphql_name="enableScreenshotOnFailureAndScript"
    )
    """Capture a screenshot during job execution"""

    response_validation_text = sgqlc.types.Field(
        String, graphql_name="responseValidationText"
    )
    """Validation text for monitor to search for at given URI"""

    use_tls_validation = sgqlc.types.Field(Boolean, graphql_name="useTlsValidation")
    """Monitor should validate SSL certificate chain"""


class SyntheticsSimpleMonitorAdvancedOptionsInput(sgqlc.types.Input):
    """The advanced options inputs available for a Simple (ping) monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "custom_headers",
        "redirect_is_failure",
        "response_validation_text",
        "should_bypass_head_request",
        "use_tls_validation",
    )
    custom_headers = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsCustomHeaderInput), graphql_name="customHeaders"
    )
    """Custom headers to use in monitor job"""

    redirect_is_failure = sgqlc.types.Field(Boolean, graphql_name="redirectIsFailure")
    """Categorize redirects during a monitor job as a failure"""

    response_validation_text = sgqlc.types.Field(
        String, graphql_name="responseValidationText"
    )
    """Validation text for monitor to search for at given URI"""

    should_bypass_head_request = sgqlc.types.Field(
        Boolean, graphql_name="shouldBypassHeadRequest"
    )
    """Monitor should skip default HEAD request and instead use GET verb
    in check
    """

    use_tls_validation = sgqlc.types.Field(Boolean, graphql_name="useTlsValidation")
    """Monitor should validate SSL certificate chain"""


class SyntheticsStepInput(sgqlc.types.Input):
    """A step that will be added to the monitor script"""

    __schema__ = nerdgraph
    __field_names__ = ("ordinal", "type", "values")
    ordinal = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="ordinal")
    """The position of the step within the script ranging from 1-100."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsStepType), graphql_name="type"
    )
    """The type of step to be added to the script"""

    values = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="values"
    )
    """The metadata values related to the step"""


class SyntheticsStepMonitorAdvancedOptionsInput(sgqlc.types.Input):
    """The advanced options inputs available for a Step monitor"""

    __schema__ = nerdgraph
    __field_names__ = ("enable_screenshot_on_failure_and_script",)
    enable_screenshot_on_failure_and_script = sgqlc.types.Field(
        Boolean, graphql_name="enableScreenshotOnFailureAndScript"
    )
    """Capture a screenshot during job execution"""


class SyntheticsTag(sgqlc.types.Input):
    """Tag entries for the monitor"""

    __schema__ = nerdgraph
    __field_names__ = ("key", "values")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """Name of the tag key"""

    values = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(String)), graphql_name="values"
    )
    """Values associated with the tag key"""


class SyntheticsUpdateBrokenLinksMonitorInput(sgqlc.types.Input):
    """The monitor values that can be updated on a Broken Links monitor"""

    __schema__ = nerdgraph
    __field_names__ = ("locations", "name", "period", "status", "tags", "uri")
    locations = sgqlc.types.Field(SyntheticsLocationsInput, graphql_name="locations")
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of(SyntheticsTag), graphql_name="tags")
    """The tags that will be associated with the monitor"""

    uri = sgqlc.types.Field(String, graphql_name="uri")
    """The uri the monitor runs against"""


class SyntheticsUpdateCertCheckMonitorInput(sgqlc.types.Input):
    """The monitor values that can be updated on a Cert Check monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "domain",
        "locations",
        "name",
        "number_days_to_fail_before_cert_expires",
        "period",
        "status",
        "tags",
    )
    domain = sgqlc.types.Field(String, graphql_name="domain")
    """The domain of the host that will have its certificate checked"""

    locations = sgqlc.types.Field(SyntheticsLocationsInput, graphql_name="locations")
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    number_days_to_fail_before_cert_expires = sgqlc.types.Field(
        Int, graphql_name="numberDaysToFailBeforeCertExpires"
    )
    """The desired number of remaining days until the certificate expires
    to trigger a monitor failure
    """

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of(SyntheticsTag), graphql_name="tags")
    """The tags that will be associated with the monitor"""


class SyntheticsUpdateScriptApiMonitorInput(sgqlc.types.Input):
    """The monitor values that can be updated on a Script Api monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "locations",
        "name",
        "period",
        "runtime",
        "script",
        "status",
        "tags",
    )
    locations = sgqlc.types.Field(
        SyntheticsScriptedMonitorLocationsInput, graphql_name="locations"
    )
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    runtime = sgqlc.types.Field(SyntheticsRuntimeInput, graphql_name="runtime")
    """The runtime that the monitor will use to run jobs"""

    script = sgqlc.types.Field(String, graphql_name="script")
    """The script that the monitor runs"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of(SyntheticsTag), graphql_name="tags")
    """The tags that will be associated with the monitor"""


class SyntheticsUpdateScriptBrowserMonitorInput(sgqlc.types.Input):
    """The monitor values that can be updated on a Script Browser monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "locations",
        "name",
        "period",
        "runtime",
        "script",
        "status",
        "tags",
    )
    advanced_options = sgqlc.types.Field(
        SyntheticsScriptBrowserMonitorAdvancedOptionsInput,
        graphql_name="advancedOptions",
    )
    """The monitor advanced options"""

    locations = sgqlc.types.Field(
        SyntheticsScriptedMonitorLocationsInput, graphql_name="locations"
    )
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    runtime = sgqlc.types.Field(SyntheticsRuntimeInput, graphql_name="runtime")
    """The runtime that the monitor will use to run jobs"""

    script = sgqlc.types.Field(String, graphql_name="script")
    """The script that the monitor runs"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of(SyntheticsTag), graphql_name="tags")
    """The tags that will be associated with the monitor"""


class SyntheticsUpdateSimpleBrowserMonitorInput(sgqlc.types.Input):
    """The monitor values that can be updated on a Simple Browser monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "locations",
        "name",
        "period",
        "runtime",
        "status",
        "tags",
        "uri",
    )
    advanced_options = sgqlc.types.Field(
        SyntheticsSimpleBrowserMonitorAdvancedOptionsInput,
        graphql_name="advancedOptions",
    )
    """The monitor advanced options"""

    locations = sgqlc.types.Field(SyntheticsLocationsInput, graphql_name="locations")
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    runtime = sgqlc.types.Field(SyntheticsRuntimeInput, graphql_name="runtime")
    """The runtime that the monitor will use to run jobs"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of(SyntheticsTag), graphql_name="tags")
    """The tags that will be associated with the monitor"""

    uri = sgqlc.types.Field(String, graphql_name="uri")
    """The uri the monitor runs against"""


class SyntheticsUpdateSimpleMonitorInput(sgqlc.types.Input):
    """The monitor values that can be updated on a simple (ping) monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "locations",
        "name",
        "period",
        "status",
        "tags",
        "uri",
    )
    advanced_options = sgqlc.types.Field(
        SyntheticsSimpleMonitorAdvancedOptionsInput, graphql_name="advancedOptions"
    )
    """The monitor advanced options"""

    locations = sgqlc.types.Field(SyntheticsLocationsInput, graphql_name="locations")
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""

    tags = sgqlc.types.Field(sgqlc.types.list_of(SyntheticsTag), graphql_name="tags")
    """The tags that will be associated with the monitor"""

    uri = sgqlc.types.Field(String, graphql_name="uri")
    """The uri the monitor runs against"""


class SyntheticsUpdateStepMonitorInput(sgqlc.types.Input):
    """The monitor values that can be updated on a Step monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "locations",
        "name",
        "period",
        "status",
        "steps",
        "tags",
    )
    advanced_options = sgqlc.types.Field(
        SyntheticsStepMonitorAdvancedOptionsInput, graphql_name="advancedOptions"
    )
    """The monitor advanced options"""

    locations = sgqlc.types.Field(
        SyntheticsScriptedMonitorLocationsInput, graphql_name="locations"
    )
    """The locations the monitor will run from"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""

    steps = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsStepInput), graphql_name="steps"
    )
    """The steps that make up the script the monitor will run"""

    tags = sgqlc.types.Field(sgqlc.types.list_of(SyntheticsTag), graphql_name="tags")
    """The tags that will be associated with the monitor"""


class TaggingTagInput(sgqlc.types.Input):
    """An object that represents a tag key-values pair."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "values")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """The tag key."""

    values = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="values")
    """The tag values."""


class TaggingTagValueInput(sgqlc.types.Input):
    """An object that represents a tag key-value pair"""

    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """The tag key."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """The tag value."""


class TimeWindowInput(sgqlc.types.Input):
    """Represents a time window input."""

    __schema__ = nerdgraph
    __field_names__ = ("end_time", "start_time")
    end_time = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="endTime"
    )
    """The end time of the time window the number of milliseconds since
    the Unix epoch.
    """

    start_time = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="startTime"
    )
    """The start time of the time window the number of milliseconds since
    the Unix epoch.
    """


class UserManagementCreateGroup(sgqlc.types.Input):
    """The input object representing the group being created"""

    __schema__ = nerdgraph
    __field_names__ = ("authentication_domain_id", "display_name")
    authentication_domain_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="authenticationDomainId"
    )
    """The id of the authentication domain the group will belong to"""

    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )
    """The name of the group"""


class UserManagementDeleteGroup(sgqlc.types.Input):
    """The input object representing the group to remove"""

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")
    """The ID of the group being removed."""


class UserManagementUpdateGroup(sgqlc.types.Input):
    """The input object representing the group being updated"""

    __schema__ = nerdgraph
    __field_names__ = ("display_name", "id")
    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )
    """The name of the group"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The id of the group to update"""


class UserManagementUsersGroupsInput(sgqlc.types.Input):
    """The input object representing the group(s) and user(s) to update."""

    __schema__ = nerdgraph
    __field_names__ = ("group_ids", "user_ids")
    group_ids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),
        graphql_name="groupIds",
    )
    """The id of the group(s) to add the user(s) to. Max: 10"""

    user_ids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),
        graphql_name="userIds",
    )
    """The id of the user(s) to be added to the group(s). Max: 50"""


class UsersUserSearchQuery(sgqlc.types.Input):
    """Query object for UserSearch."""

    __schema__ = nerdgraph
    __field_names__ = ("scope",)
    scope = sgqlc.types.Field("UsersUserSearchScope", graphql_name="scope")
    """The scope to filter the search response by."""


class UsersUserSearchScope(sgqlc.types.Input):
    """Different scopes that can be used to filter the returned users."""

    __schema__ = nerdgraph
    __field_names__ = ("email", "name", "search", "user_ids")
    email = sgqlc.types.Field(String, graphql_name="email")
    """Filter by string that will partially match a User's `email`.  Same
    as `name` it will partially match and case is ignored.
    """

    name = sgqlc.types.Field(String, graphql_name="name")
    """Filter by string that will partially match a User's `name`. So
    argument `name='Ste'` will match `name='Steve'` and case is
    ignored so `name='Koester'` would also match.
    """

    search = sgqlc.types.Field(String, graphql_name="search")
    """Will match both a User's `email` and `name`.  So argument
    `search='ple'`  will match `name='Johnny Appleseed'` and
    `email='mary@example.com'`.
    """

    user_ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name="userIds"
    )
    """List of 1 or more userIds to filter by. Will only return data for
    users with ids that match the full ID, no partial matching. (so 2
    ids provided will yield at most 2 users)
    """


class WhatsNewContentSearchQuery(sgqlc.types.Input):
    """A query that represents a criteria for searching news."""

    __schema__ = nerdgraph
    __field_names__ = ("content_type", "unread_only")
    content_type = sgqlc.types.Field(WhatsNewContentType, graphql_name="contentType")
    """Criteria to narrow the scope of the search to a specific type of
    news.
    """

    unread_only = sgqlc.types.Field(Boolean, graphql_name="unreadOnly")
    """Criteria to narrow the scope of the search to only those news that
    are unread by the current user.
    """


class WorkloadAutomaticStatusInput(sgqlc.types.Input):
    """An input object used to represent an automatic status
    configuration. If not provided, a status configuration will be
    created by default.
    """

    __schema__ = nerdgraph
    __field_names__ = ("enabled", "remaining_entities_rule", "rules")
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the automatic status configuration is enabled or not."""

    remaining_entities_rule = sgqlc.types.Field(
        "WorkloadRemainingEntitiesRuleInput", graphql_name="remainingEntitiesRule"
    )
    """An additional meta-rule that can consider all entities that
    haven't been evaluated by any other rule.
    """

    rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadRegularRuleInput")),
        graphql_name="rules",
    )
    """A list of rules."""


class WorkloadCreateInput(sgqlc.types.Input):
    """The input object used to represent the workload to be created."""

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "entity_guids",
        "entity_search_queries",
        "name",
        "scope_accounts",
        "status_config",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """Relevant information about the workload."""

    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="entityGuids",
    )
    """A list of entity GUIDs composing the workload."""

    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadEntitySearchQueryInput")),
        graphql_name="entitySearchQueries",
    )
    """A list of entity search queries used to retrieve the entities that
    compose the workload.
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the workload."""

    scope_accounts = sgqlc.types.Field(
        "WorkloadScopeAccountsInput", graphql_name="scopeAccounts"
    )
    """Accounts that will be used to get entities from."""

    status_config = sgqlc.types.Field(
        "WorkloadStatusConfigInput", graphql_name="statusConfig"
    )
    """The configuration that defines how the status of the workload is
    calculated.
    """


class WorkloadDuplicateInput(sgqlc.types.Input):
    """The input object used to represent the workload duplicate."""

    __schema__ = nerdgraph
    __field_names__ = ("name",)
    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the workload duplicate. If the name isn't specified,
    the name + ' copy' of the source workload is used to compose the
    new name.
    """


class WorkloadEntitySearchQueryInput(sgqlc.types.Input):
    """The input object used to represent the entity search query to be
    created.
    """

    __schema__ = nerdgraph
    __field_names__ = ("query",)
    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")
    """The entity search query that is used to perform the search of a
    group of entities.
    """


class WorkloadRegularRuleInput(sgqlc.types.Input):
    """The input object used to represent a rule."""

    __schema__ = nerdgraph
    __field_names__ = ("entity_guids", "entity_search_queries", "rollup")
    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="entityGuids",
    )
    """A list of entity GUIDs composing the rule."""

    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WorkloadEntitySearchQueryInput)),
        graphql_name="entitySearchQueries",
    )
    """A list of entity search queries used to retrieve the entities that
    compose the rule.
    """

    rollup = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadRollupInput"), graphql_name="rollup"
    )
    """The input object used to represent a rollup strategy."""


class WorkloadRemainingEntitiesRuleInput(sgqlc.types.Input):
    """The input object used to represent a remaining entities rule."""

    __schema__ = nerdgraph
    __field_names__ = ("rollup",)
    rollup = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadRemainingEntitiesRuleRollupInput"),
        graphql_name="rollup",
    )
    """The input object used to represent a rollup strategy."""


class WorkloadRemainingEntitiesRuleRollupInput(sgqlc.types.Input):
    """The input object used to represent a rollup strategy."""

    __schema__ = nerdgraph
    __field_names__ = ("group_by", "strategy", "threshold_type", "threshold_value")
    group_by = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadGroupRemainingEntitiesRuleBy),
        graphql_name="groupBy",
    )
    """The grouping to be applied to the remaining entities."""

    strategy = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadRollupStrategy), graphql_name="strategy"
    )
    """The rollup strategy that is applied to a group of entities."""

    threshold_type = sgqlc.types.Field(
        WorkloadRuleThresholdType, graphql_name="thresholdType"
    )
    """Type of threshold defined for the rule. This is an optional field
    that only applies when strategy is WORST_STATUS_WINS. Use a
    threshold to roll up the worst status only after a certain amount
    of entities are not operational.
    """

    threshold_value = sgqlc.types.Field(Int, graphql_name="thresholdValue")
    """Threshold value defined for the rule. This optional field is used
    in combination with thresholdType. If the threshold type is null,
    the threshold value will be ignored.
    """


class WorkloadRollupInput(sgqlc.types.Input):
    """The input object used to represent a rollup strategy."""

    __schema__ = nerdgraph
    __field_names__ = ("strategy", "threshold_type", "threshold_value")
    strategy = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadRollupStrategy), graphql_name="strategy"
    )
    """The rollup strategy that is applied to a group of entities."""

    threshold_type = sgqlc.types.Field(
        WorkloadRuleThresholdType, graphql_name="thresholdType"
    )
    """Type of threshold defined for the rule. This is an optional field
    that only applies when strategy is WORST_STATUS_WINS. Use a
    threshold to roll up the worst status only after a certain amount
    of entities are not operational.
    """

    threshold_value = sgqlc.types.Field(Int, graphql_name="thresholdValue")
    """Threshold value defined for the rule. This optional field is used
    in combination with thresholdType. If the threshold type is null,
    the threshold value will be ignored.
    """


class WorkloadScopeAccountsInput(sgqlc.types.Input):
    """The input object containing accounts that will be used to get
    entities from.
    """

    __schema__ = nerdgraph
    __field_names__ = ("account_ids",)
    account_ids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Int))),
        graphql_name="accountIds",
    )
    """A list of accounts that will be used to get entities from."""


class WorkloadStaticStatusInput(sgqlc.types.Input):
    """The input object used to represent the configuration of a static
    status.
    """

    __schema__ = nerdgraph
    __field_names__ = ("description", "enabled", "status", "summary")
    description = sgqlc.types.Field(String, graphql_name="description")
    """A description that provides additional details about the status of
    the workload.
    """

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the static status configuration is enabled or not."""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusValueInput), graphql_name="status"
    )
    """The status of the workload."""

    summary = sgqlc.types.Field(String, graphql_name="summary")
    """A short description of the status of the workload."""


class WorkloadStatusConfigInput(sgqlc.types.Input):
    """The input object used to provide the configuration that defines
    how the status of the workload is calculated.
    """

    __schema__ = nerdgraph
    __field_names__ = ("automatic", "static")
    automatic = sgqlc.types.Field(
        WorkloadAutomaticStatusInput, graphql_name="automatic"
    )
    """An input object used to represent an automatic status
    configuration.
    """

    static = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WorkloadStaticStatusInput)),
        graphql_name="static",
    )
    """A list of static status configurations. You can only configure one
    static status for a workload.
    """


class WorkloadUpdateAutomaticStatusInput(sgqlc.types.Input):
    """An input object used to represent an automatic status
    configuration.
    """

    __schema__ = nerdgraph
    __field_names__ = ("enabled", "remaining_entities_rule", "rules")
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the automatic status configuration is enabled or not."""

    remaining_entities_rule = sgqlc.types.Field(
        WorkloadRemainingEntitiesRuleInput, graphql_name="remainingEntitiesRule"
    )
    """An additional meta-rule that can consider all entities that
    haven't been evaluated by any other rule.
    """

    rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadUpdateRegularRuleInput")),
        graphql_name="rules",
    )
    """A list of rules."""


class WorkloadUpdateCollectionEntitySearchQueryInput(sgqlc.types.Input):
    """The input object used to represent the entity search query to be
    updated.
    """

    __schema__ = nerdgraph
    __field_names__ = ("id", "query")
    id = sgqlc.types.Field(Int, graphql_name="id")
    """The unique identifier of the entity search query to be updated. If
    not provided, a new entity search query is created.
    """

    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")
    """The entity search query that is used to perform the search of a
    group of entities.
    """


class WorkloadUpdateInput(sgqlc.types.Input):
    """The input object used to identify the workload to be updated and
    the new values.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "entity_guids",
        "entity_search_queries",
        "name",
        "scope_accounts",
        "status_config",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """Relevant information about the workload."""

    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="entityGuids",
    )
    """A list of entity GUIDs composing the workload."""

    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(WorkloadUpdateCollectionEntitySearchQueryInput)
        ),
        graphql_name="entitySearchQueries",
    )
    """A list of entity search queries used to retrieve the groups of
    entities that compose the workload.
    """

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the workload."""

    scope_accounts = sgqlc.types.Field(
        WorkloadScopeAccountsInput, graphql_name="scopeAccounts"
    )
    """Accounts that will be used to get entities from."""

    status_config = sgqlc.types.Field(
        "WorkloadUpdateStatusConfigInput", graphql_name="statusConfig"
    )
    """The configuration that defines how the status of the workload is
    calculated.
    """


class WorkloadUpdateRegularRuleInput(sgqlc.types.Input):
    """The input object used to represent a rule."""

    __schema__ = nerdgraph
    __field_names__ = ("entity_guids", "entity_search_queries", "id", "rollup")
    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="entityGuids",
    )
    """A list of entity GUIDs composing the rule."""

    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(WorkloadUpdateCollectionEntitySearchQueryInput)
        ),
        graphql_name="entitySearchQueries",
    )
    """A list of entity search queries used to retrieve the groups of
    entities that compose the rule.
    """

    id = sgqlc.types.Field(Int, graphql_name="id")
    """The unique identifier of the rule to be updated. If not provided,
    a new rule is created.
    """

    rollup = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadRollupInput), graphql_name="rollup"
    )
    """The input object used to represent a roll-up strategy."""


class WorkloadUpdateStaticStatusInput(sgqlc.types.Input):
    """The input object used to represent the configuration of a static
    status.
    """

    __schema__ = nerdgraph
    __field_names__ = ("description", "enabled", "id", "status", "summary")
    description = sgqlc.types.Field(String, graphql_name="description")
    """A description that provides additional details about the status of
    the workload.
    """

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the static status configuration is enabled or not."""

    id = sgqlc.types.Field(Int, graphql_name="id")
    """The unique identifier of the static status to be updated. If not
    provided, a new static status is created.
    """

    status = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusValueInput), graphql_name="status"
    )
    """The status of the workload."""

    summary = sgqlc.types.Field(String, graphql_name="summary")
    """A short description of the static status."""


class WorkloadUpdateStatusConfigInput(sgqlc.types.Input):
    """The input object used to provide the configuration that defines
    how the status of the workload is calculated.
    """

    __schema__ = nerdgraph
    __field_names__ = ("automatic", "static")
    automatic = sgqlc.types.Field(
        WorkloadUpdateAutomaticStatusInput, graphql_name="automatic"
    )
    """An input object used to represent an automatic status
    configuration.
    """

    static = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WorkloadUpdateStaticStatusInput)),
        graphql_name="static",
    )
    """A list of static status configurations. You can only configure one
    static status for a workload.
    """


########################################################################
# Output Objects and Interfaces
########################################################################
class Account(sgqlc.types.Type):
    """The `Account` object provides general data about the account, as
    well as being the entry point into more detailed data about a
    single account.  Account configuration data is queried through
    this object, as well as telemetry data that is specific to a
    single account.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "agent_environment",
        "ai_decisions",
        "ai_issues",
        "ai_notifications",
        "ai_topology",
        "ai_workflows",
        "alerts",
        "cloud",
        "data_management",
        "edge",
        "events_to_metrics",
        "id",
        "incident_intelligence_environment",
        "installation",
        "license_key",
        "log_configurations",
        "metric_normalization",
        "name",
        "nerd_storage",
        "nrql",
        "nrql_drop_rules",
        "nrql_query_progress",
        "pixie",
        "synthetics",
        "workload",
    )
    agent_environment = sgqlc.types.Field(
        "AgentEnvironmentAccountStitchedFields", graphql_name="agentEnvironment"
    )
    """This field provides access to AgentEnvironment data."""

    ai_decisions = sgqlc.types.Field(
        "AiDecisionsAccountStitchedFields", graphql_name="aiDecisions"
    )
    """This field provides access to AiDecisions data."""

    ai_issues = sgqlc.types.Field(
        "AiIssuesAccountStitchedFields", graphql_name="aiIssues"
    )
    """This field provides access to AiIssues data."""

    ai_notifications = sgqlc.types.Field(
        "AiNotificationsAccountStitchedFields", graphql_name="aiNotifications"
    )
    """This field provides access to AiNotifications data."""

    ai_topology = sgqlc.types.Field(
        "AiTopologyAccountStitchedFields", graphql_name="aiTopology"
    )
    """This field provides access to AiTopology data."""

    ai_workflows = sgqlc.types.Field(
        "AiWorkflowsAccountStitchedFields", graphql_name="aiWorkflows"
    )
    """This field provides access to AiWorkflows data."""

    alerts = sgqlc.types.Field("AlertsAccountStitchedFields", graphql_name="alerts")
    """This field provides access to Alerts data."""

    cloud = sgqlc.types.Field("CloudAccountFields", graphql_name="cloud")
    """The `cloud` field provides access to cloud integrations
    configuration data.  For details and query examples visit [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/manage-your-aws-azure-google-cloud-integrations-
    graphql-api).
    """

    data_management = sgqlc.types.Field(
        "DataManagementAccountStitchedFields", graphql_name="dataManagement"
    )
    """This field provides access to DataManagement data."""

    edge = sgqlc.types.Field("EdgeAccountStitchedFields", graphql_name="edge")
    """This field provides access to Edge data."""

    events_to_metrics = sgqlc.types.Field(
        "EventsToMetricsAccountStitchedFields", graphql_name="eventsToMetrics"
    )
    """This field provides access to EventsToMetrics data."""

    id = sgqlc.types.Field(Int, graphql_name="id")

    incident_intelligence_environment = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentAccountStitchedFields",
        graphql_name="incidentIntelligenceEnvironment",
    )
    """This field provides access to IncidentIntelligenceEnvironment
    data.
    """

    installation = sgqlc.types.Field(
        "InstallationAccountStitchedFields", graphql_name="installation"
    )
    """This field provides access to Installation data."""

    license_key = sgqlc.types.Field(String, graphql_name="licenseKey")

    log_configurations = sgqlc.types.Field(
        "LogConfigurationsAccountStitchedFields", graphql_name="logConfigurations"
    )
    """This field provides access to LogConfigurations data."""

    metric_normalization = sgqlc.types.Field(
        "MetricNormalizationAccountStitchedFields", graphql_name="metricNormalization"
    )
    """This field provides access to MetricNormalization data."""

    name = sgqlc.types.Field(String, graphql_name="name")

    nerd_storage = sgqlc.types.Field(
        "NerdStorageAccountScope", graphql_name="nerdStorage"
    )
    """NerdStorage is a document database that is accessible within the
    New Relic One interface. This allows for persistence of Nerdpack
    data including users' configuration settings and preferences (like
    favorites), or any other small data sets.  Conceptually, you can
    imagine NerdStorage as a nested key-value map.  For information on
    New Relic NerdStorage, visit [our
    docs](https://developer.newrelic.com/build-tools/new-relic-one-
    applications/nerdstorage).  To use the NerdStorage schema you must
    specify a Nerdpack ID using the NewRelic-Package-Id header in your
    request.
    """

    nrql = sgqlc.types.Field(
        "NrdbResultContainer",
        graphql_name="nrql",
        args=sgqlc.types.ArgDict(
            (
                (
                    "async_",
                    sgqlc.types.Arg(Boolean, graphql_name="async", default=False),
                ),
                (
                    "options",
                    sgqlc.types.Arg(
                        NrqlQueryOptions, graphql_name="options", default=None
                    ),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Nrql), graphql_name="query", default=None
                    ),
                ),
                (
                    "timeout",
                    sgqlc.types.Arg(Seconds, graphql_name="timeout", default=None),
                ),
            )
        ),
    )
    """Make a query to NRDB with a NRQL string.  See the [NRQL
    Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-
    query-language/nrql-resources/nrql-syntax-components-functions)
    for more information about generating a query string.  Example
    NRQL query: ``` SELECT count(*) FROM Transaction TIMESERIES ```
    For more details on how to use NRQL in the GraphQL API, visit [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/query-nrql-through-new-relic-graphql-api)

    Arguments:

    * `async_` (`Boolean`): When true, the query will begin
      asynchronous resolution after the allotted `timeout`. Include
      `queryProgress` fields in your GraphQL query to receive the
      information you will need to poll the `nrqlQueryProgress` field
      for the results of your async NRQL query.  See [this page](https
      ://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-
      nrql-tutorial) for additional asynchronous query documentation.
      (default: `false`)
    * `options` (`NrqlQueryOptions`): Additional options for NRQL
      queries.
    * `query` (`Nrql!`): The
      [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-
      query-language/nrql-resources/nrql-syntax-components-functions)
      query string.
    * `timeout` (`Seconds`): The timeout we will apply to the NRQL
      Query. The value will be clamped to between 5 and 120 seconds
      and defaults to 5 seconds.  For `async` queries, if the query is
      still incomplete after this amount of time, resolution will
      become asynchronous and return `queryProgress` data if
      requested.
    """

    nrql_drop_rules = sgqlc.types.Field(
        "NrqlDropRulesAccountStitchedFields", graphql_name="nrqlDropRules"
    )
    """This field provides access to NrqlDropRules data."""

    nrql_query_progress = sgqlc.types.Field(
        "NrdbResultContainer",
        graphql_name="nrqlQueryProgress",
        args=sgqlc.types.ArgDict(
            (
                (
                    "query_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="queryId", default=None
                    ),
                ),
            )
        ),
    )
    """Poll for the results of a previously-executed asychronous NRDB
    query.  The `queryId` is available in the `queryProgress` data
    returned by the original asynchronous query.  See [this page](http
    s://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-
    nrql-tutorial) for additional asynchronous query documentation.

    Arguments:

    * `query_id` (`ID!`): A token for retrieving the results of a
      previously executed asynchronous query.
    """

    pixie = sgqlc.types.Field("PixieAccountStitchedFields", graphql_name="pixie")
    """This field provides access to Pixie data."""

    synthetics = sgqlc.types.Field(
        "SyntheticsAccountStitchedFields", graphql_name="synthetics"
    )
    """This field provides access to Synthetics data."""

    workload = sgqlc.types.Field(
        "WorkloadAccountStitchedFields", graphql_name="workload"
    )
    """This field provides access to Workload data."""


class AccountManagementCreateResponse(sgqlc.types.Type):
    """The return object for a create-account mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("managed_account",)
    managed_account = sgqlc.types.Field(
        "AccountManagementManagedAccount", graphql_name="managedAccount"
    )
    """Information about the newly created account."""


class AccountManagementManagedAccount(sgqlc.types.Type):
    """Account data view for administration tasks."""

    __schema__ = nerdgraph
    __field_names__ = ("id", "name", "region_code")
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """The account ID."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the account."""

    region_code = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="regionCode"
    )
    """The data center region for the account (US or EU)."""


class AccountManagementOrganizationStitchedFields(sgqlc.types.Type):
    """The field type for stitching into the NerdGraph schema."""

    __schema__ = nerdgraph
    __field_names__ = ("managed_accounts",)
    managed_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AccountManagementManagedAccount)),
        graphql_name="managedAccounts",
    )
    """Admin-level info about the accounts in an organization."""


class AccountManagementUpdateResponse(sgqlc.types.Type):
    """The return object for an update-account mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("managed_account",)
    managed_account = sgqlc.types.Field(
        AccountManagementManagedAccount, graphql_name="managedAccount"
    )
    """Information about an updated account"""


class AccountOutline(sgqlc.types.Type):
    """The `AccountOutline` object provides basic data about an account."""

    __schema__ = nerdgraph
    __field_names__ = ("id", "name", "reporting_event_types")
    id = sgqlc.types.Field(Int, graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    reporting_event_types = sgqlc.types.Field(
        sgqlc.types.list_of(String),
        graphql_name="reportingEventTypes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(String), graphql_name="filter", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Returns event types that are currently reporting in the account.

    Arguments:

    * `filter` (`[String]`): Filter results to a chosen set of event
      types.
    * `time_window` (`TimeWindowInput`)None
    """


class AccountReference(sgqlc.types.Type):
    """The `AccountReference` object provides basic identifying
    information about the account.
    """

    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(Int, graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")


class Actor(sgqlc.types.Type):
    """The `Actor` object contains fields that are scoped to the API
    user's access level.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "accounts",
        "api_access",
        "cloud",
        "dashboard",
        "distributed_tracing",
        "entities",
        "entity",
        "entity_search",
        "errors_inbox",
        "incident_intelligence_environment",
        "mobile_push_notification",
        "nerd_storage",
        "nerd_storage_vault",
        "nerdpacks",
        "nr1_catalog",
        "nrql",
        "nrql_query_history",
        "nrql_query_progress",
        "organization",
        "pixie",
        "user",
        "users",
    )
    account = sgqlc.types.Field(
        Account,
        graphql_name="account",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """The `account` field is the entry point into data that is scoped to
    a single account.

    Arguments:

    * `id` (`Int!`): The New Relic account ID you want to query.
    """

    accounts = sgqlc.types.Field(
        sgqlc.types.list_of(AccountOutline),
        graphql_name="accounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "scope",
                    sgqlc.types.Arg(
                        RegionScope, graphql_name="scope", default="IN_REGION"
                    ),
                ),
            )
        ),
    )
    """The `accounts` field returns all accounts that the Actor is
    authorized to view.

    Arguments:

    * `scope` (`RegionScope`)None (default: `IN_REGION`)
    """

    api_access = sgqlc.types.Field(
        "ApiAccessActorStitchedFields", graphql_name="apiAccess"
    )
    """This field provides access to ApiAccess data."""

    cloud = sgqlc.types.Field("CloudActorFields", graphql_name="cloud")
    """The `cloud` field provides access to cloud integrations
    configuration data scoped to the Actor.
    """

    dashboard = sgqlc.types.Field(
        "DashboardActorStitchedFields", graphql_name="dashboard"
    )
    """This field provides access to Dashboard data."""

    distributed_tracing = sgqlc.types.Field(
        "DistributedTracingActorStitchedFields", graphql_name="distributedTracing"
    )
    """This field provides access to DistributedTracing data."""

    entities = sgqlc.types.Field(
        sgqlc.types.list_of("Entity"),
        graphql_name="entities",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(EntityGuid)),
                        graphql_name="guids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Fetch a list of entities.  You can fetch a max of 25 entities in
    one query.  For more details on entities, visit our [entity
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/use-new-relic-graphql-api-query-entities).

    Arguments:

    * `guids` (`[EntityGuid]!`): A list of unique entity identifiers.
    """

    entity = sgqlc.types.Field(
        "Entity",
        graphql_name="entity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Fetch a single entity.  For more details on entities, visit our
    [entity docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/use-new-relic-graphql-api-query-entities).

    Arguments:

    * `guid` (`EntityGuid!`): A unique entity identifier.
    """

    entity_search = sgqlc.types.Field(
        "EntitySearch",
        graphql_name="entitySearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "options",
                    sgqlc.types.Arg(
                        EntitySearchOptions, graphql_name="options", default=None
                    ),
                ),
                ("query", sgqlc.types.Arg(String, graphql_name="query", default=None)),
                (
                    "query_builder",
                    sgqlc.types.Arg(
                        EntitySearchQueryBuilder,
                        graphql_name="queryBuilder",
                        default=None,
                    ),
                ),
                (
                    "sort_by",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(EntitySearchSortCriteria),
                        graphql_name="sortBy",
                        default=("NAME",),
                    ),
                ),
            )
        ),
    )
    """Search for entities using a custom query.  For more details on how
    to create a custom query and what entity data you can request,
    visit our [entity
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/use-new-relic-graphql-api-query-entities).  Note:
    you must supply either a `query` OR a `queryBuilder` argument, not
    both.

    Arguments:

    * `options` (`EntitySearchOptions`): Additional options to apply
      to the entity search.
    * `query` (`String`): Entity search query string. The query string
      can search for an exact or fuzzy match on name, as well as
      searching several other attributes.  Note: you must supply
      either a `query` OR a `queryBuilder` argument, not both.
      Operators available: `=`, `AND`, `IN`, `LIKE`  Special
      characters (`.,;:*-_`) are treated as whitespace. For example,
      name LIKE ':aws:' will match `-aws.` or `foo aws.`  Tags can be
      referenced in multiple ways with or without backticks.
      Examples: - `"name = 'MyApp (Staging)'` - `"name LIKE 'MyApp'
      AND type IN ('APPLICATION')"` - `"reporting = 'false' AND type
      IN ('HOST')"` - `"domain IN ('INFRA', 'APM')"` -
      `tags.Environment = 'staging' AND type IN ('APPLICATION')`
    * `query_builder` (`EntitySearchQueryBuilder`): The query builder
      object can be used to discover and create the entity search
      query argument.  This should be used as a means to discover, but
      it has limited functionality. For example, it can only search
      for one entity `type` at a time.  The `queryBuilder` parameters
      do not include all possible entity `type`s, entity `domain`s, or
      `infrastructureIntegrationType`s.  To see the query string that
      is generated by your `queryBuilder` search, ask for the `query`
      field in the result object. You can then use this to build a
      more complex query supplied to the `query` argument and remove
      your `queryBuilder`.  Note: you must supply either a `query` OR
      a `queryBuilder` argument, not both.
    * `sort_by` (`[EntitySearchSortCriteria]`): The criteria used to
      sort your entity search results. (default: `[NAME]`)
    """

    errors_inbox = sgqlc.types.Field(
        "ErrorsInboxActorStitchedFields", graphql_name="errorsInbox"
    )
    """This field provides access to ErrorsInbox data."""

    incident_intelligence_environment = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentActorStitchedFields",
        graphql_name="incidentIntelligenceEnvironment",
    )
    """This field provides access to IncidentIntelligenceEnvironment
    data.
    """

    mobile_push_notification = sgqlc.types.Field(
        "MobilePushNotificationActorStitchedFields",
        graphql_name="mobilePushNotification",
    )
    """This field provides access to MobilePushNotification data."""

    nerd_storage = sgqlc.types.Field(
        "NerdStorageActorScope", graphql_name="nerdStorage"
    )
    """NerdStorage is a document database that is accessible within the
    New Relic One interface. This allows for persistence of Nerdpack
    data including users' configuration settings and preferences (like
    favorites), or any other small data sets.  Conceptually, you can
    imagine NerdStorage as a nested key-value map.  For information on
    New Relic NerdStorage, visit [our
    docs](https://developer.newrelic.com/build-tools/new-relic-one-
    applications/nerdstorage).  To use the NerdStorage schema you must
    specify a Nerdpack ID using the NewRelic-Package-Id header in your
    request.
    """

    nerd_storage_vault = sgqlc.types.Field(
        "NerdStorageVaultActorStitchedFields", graphql_name="nerdStorageVault"
    )
    """This field provides access to NerdStorageVault data."""

    nerdpacks = sgqlc.types.Field("NerdpackNerdpacks", graphql_name="nerdpacks")
    """Nerdpacks registry. Provides queries for nerdpacks by different
    conditions
    """

    nr1_catalog = sgqlc.types.Field(
        "Nr1CatalogActorStitchedFields", graphql_name="nr1Catalog"
    )
    """This field provides access to Nr1Catalog data."""

    nrql = sgqlc.types.Field(
        "CrossAccountNrdbResultContainer",
        graphql_name="nrql",
        args=sgqlc.types.ArgDict(
            (
                (
                    "accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(Int))
                        ),
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
                (
                    "async_",
                    sgqlc.types.Arg(Boolean, graphql_name="async", default=False),
                ),
                (
                    "options",
                    sgqlc.types.Arg(
                        NrqlQueryOptions, graphql_name="options", default=None
                    ),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Nrql), graphql_name="query", default=None
                    ),
                ),
                (
                    "timeout",
                    sgqlc.types.Arg(Seconds, graphql_name="timeout", default=None),
                ),
            )
        ),
    )
    """Make a query to NRDB with a NRQL string.  See the [NRQL
    Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-
    query-language/nrql-resources/nrql-syntax-components-functions)
    for more information about generating a query string.  Example
    NRQL query: ``` SELECT count(*) FROM Transaction TIMESERIES ```
    For more details on how to use NRQL in the GraphQL API, visit [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/query-nrql-through-new-relic-graphql-api)

    Arguments:

    * `accounts` (`[Int!]!`): List of account IDs to return NRDB
      results from. Max of 5 can be supplied.
    * `async_` (`Boolean`): When true, the query will begin
      asynchronous resolution after the allotted `timeout`. Include
      `queryProgress` fields in your GraphQL query to receive the
      information you will need to poll the `nrqlQueryProgress` field
      for the results of your async NRQL query.  See [this page](https
      ://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-
      nrql-tutorial) for additional asynchronous query documentation.
      (default: `false`)
    * `options` (`NrqlQueryOptions`): Additional options for NRQL
      queries.
    * `query` (`Nrql!`): The
      [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-
      query-language/nrql-resources/nrql-syntax-components-functions)
      query string.
    * `timeout` (`Seconds`): The timeout we will apply to the NRQL
      Query. The value will be clamped to between 5 and 120 seconds
      and defaults to 5 seconds.  For `async` queries, if the query is
      still incomplete after this amount of time, resolution will
      become asynchronous and return `queryProgress` data if
      requested.
    """

    nrql_query_history = sgqlc.types.Field(
        sgqlc.types.list_of("NrqlHistoricalQuery"), graphql_name="nrqlQueryHistory"
    )
    """A historical log of NRQL queries executed by you."""

    nrql_query_progress = sgqlc.types.Field(
        "CrossAccountNrdbResultContainer",
        graphql_name="nrqlQueryProgress",
        args=sgqlc.types.ArgDict(
            (
                (
                    "accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(Int))
                        ),
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
                (
                    "query_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="queryId", default=None
                    ),
                ),
            )
        ),
    )
    """Poll for the results of a previously-executed asychronous NRDB
    query.  The `queryId` is available in the `queryProgress` data
    returned by the original asynchronous query.  See [this page](http
    s://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-
    nrql-tutorial) for additional asynchronous query documentation.

    Arguments:

    * `accounts` (`[Int!]!`): List of account IDs associated with
      `queryId`. Must match the account IDs of the original
      asynchronous query. Max of 5 can be supplied.
    * `query_id` (`ID!`): A token for retrieving the results of a
      previously executed asynchronous query.
    """

    organization = sgqlc.types.Field("Organization", graphql_name="organization")
    """The `organization` field is the entry point into data that is
    scoped to the user's organization.
    """

    pixie = sgqlc.types.Field("PixieActorStitchedFields", graphql_name="pixie")
    """This field provides access to Pixie data."""

    user = sgqlc.types.Field("User", graphql_name="user")
    """The `User` that is associated with the API key used in this
    request.
    """

    users = sgqlc.types.Field("UsersActorStitchedFields", graphql_name="users")
    """This field provides access to Users data."""


class AgentApplicationSettingsApmBase(sgqlc.types.Type):
    """Settings that are applicable to APM applications and their agents."""

    __schema__ = nerdgraph
    __field_names__ = (
        "alias",
        "apm_config",
        "error_collector",
        "slow_sql",
        "thread_profiler",
        "tracer_type",
        "transaction_tracer",
    )
    alias = sgqlc.types.Field(String, graphql_name="alias")
    """The name for the application"""

    apm_config = sgqlc.types.Field(
        sgqlc.types.non_null("AgentApplicationSettingsApmConfig"),
        graphql_name="apmConfig",
    )
    """General settings for the application can be accessed via this
    field.
    """

    error_collector = sgqlc.types.Field(
        "AgentApplicationSettingsErrorCollector", graphql_name="errorCollector"
    )
    """Error Collector settings for the application can be accessed via
    this field. The error collector captures information about
    uncaught exceptions and sends them to New Relic for viewing.
    """

    slow_sql = sgqlc.types.Field(
        "AgentApplicationSettingsSlowSql", graphql_name="slowSql"
    )
    """In APM, when transaction traces are collected, there may be
    additional Slow query data available.
    """

    thread_profiler = sgqlc.types.Field(
        "AgentApplicationSettingsThreadProfiler", graphql_name="threadProfiler"
    )
    """Thread profiler measures wall clock time, CPU time, and method
    call counts in your application's threads as they run.
    """

    tracer_type = sgqlc.types.Field(
        AgentApplicationSettingsTracer, graphql_name="tracerType"
    )
    """Type of tracer used. APM's cross application tracing link
    transactions between APM apps in your service-oriented
    architecture (SOA).  Distributed tracing is an improvement on the
    cross application tracing feature and is recommended for large,
    distributed systems.
    """

    transaction_tracer = sgqlc.types.Field(
        "AgentApplicationSettingsTransactionTracer", graphql_name="transactionTracer"
    )
    """Transaction Tracer settings for the application can be accessed
    via this field.
    """


class AgentApplicationSettingsApmConfig(sgqlc.types.Type):
    """General settings related to APM applications."""

    __schema__ = nerdgraph
    __field_names__ = ("apdex_target", "use_server_side_config")
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")
    """The desired target for the APDEX measurement of this APM
    application.
    """

    use_server_side_config = sgqlc.types.Field(
        Boolean, graphql_name="useServerSideConfig"
    )
    """Should agents for this APM application get some of their
    configuration from the server.
    """


class AgentApplicationSettingsBrowserBase(sgqlc.types.Type):
    """Settings that are applicable to browser applications."""

    __schema__ = nerdgraph
    __field_names__ = ("browser_config",)
    browser_config = sgqlc.types.Field(
        sgqlc.types.non_null("AgentApplicationSettingsBrowserConfig"),
        graphql_name="browserConfig",
    )
    """General settings for the application can be accessed via this
    field.
    """


class AgentApplicationSettingsBrowserConfig(sgqlc.types.Type):
    """General settings related to APM applications."""

    __schema__ = nerdgraph
    __field_names__ = ("apdex_target",)
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")
    """The desired target for the APDEX measurement of this browser
    application.
    """


class AgentApplicationSettingsErrorCollector(sgqlc.types.Type):
    """The error collector captures information about uncaught exceptions
    and sends them to New Relic for viewing. For more information
    about what these settings do and which ones are applicable for
    your application, please see docs.newrelic.com for more
    information about agent configuration for your language agent.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "enabled",
        "expected_error_classes",
        "expected_error_codes",
        "ignored_error_classes",
        "ignored_error_codes",
    )
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Enable error collector"""

    expected_error_classes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="expectedErrorClasses",
    )
    """Prevents specified exception classes from affecting error rate or
    Apdex score while still reporting the errors to APM.
    """

    expected_error_codes = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AgentApplicationSettingsErrorCollectorHttpStatus)
        ),
        graphql_name="expectedErrorCodes",
    )
    """A list comprised of individual and dashed ranges of HTTP status
    codes to be marked as expected and thus prevented from affecting
    error rate or Apdex score.
    """

    ignored_error_classes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="ignoredErrorClasses",
    )
    """Specified exception class names will be ignored and will not
    affect error rate or Apdex score, or be reported to APM.
    """

    ignored_error_codes = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AgentApplicationSettingsErrorCollectorHttpStatus)
        ),
        graphql_name="ignoredErrorCodes",
    )
    """A list comprised of individual and dashed ranges of HTTP status
    codes that should not be treated as errors.
    """


class AgentApplicationSettingsSlowSql(sgqlc.types.Type):
    """In APM, when transaction traces are collected, there may be
    additional Slow query data available.
    """

    __schema__ = nerdgraph
    __field_names__ = ("enabled",)
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """If true, the agent collects slow SQL queries."""


class AgentApplicationSettingsThreadProfiler(sgqlc.types.Type):
    """Thread profiler measures wall clock time, CPU time, and method
    call counts in your application's threads as they run.
    """

    __schema__ = nerdgraph
    __field_names__ = ("enabled",)
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Whether or not the Thread Profiler is enabled for your
    application.
    """


class AgentApplicationSettingsTransactionTracer(sgqlc.types.Type):
    """Transaction Tracer settings related to APM applications. For more
    information about what these settings do and which ones are
    applicable for your application, please see docs.newrelic.com for
    more information about agent configuration for your language
    agent.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "capture_memcache_keys",
        "enabled",
        "explain_enabled",
        "explain_threshold_type",
        "explain_threshold_value",
        "log_sql",
        "record_sql",
        "stack_trace_threshold",
        "transaction_threshold_type",
        "transaction_threshold_value",
    )
    capture_memcache_keys = sgqlc.types.Field(
        Boolean, graphql_name="captureMemcacheKeys"
    )
    """Enable or disable the capture of memcache keys from transaction
    traces.
    """

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """If true, this enables the Transaction Tracer feature, enabling
    collection of transaction traces.
    """

    explain_enabled = sgqlc.types.Field(Boolean, graphql_name="explainEnabled")
    """If true, enables the collection of explain plans in transaction
    traces. This setting will also apply to explain plans in slow SQL
    traces if slow_sql.explain_enabled is not set separately.
    """

    explain_threshold_type = sgqlc.types.Field(
        AgentApplicationSettingsThresholdTypeEnum, graphql_name="explainThresholdType"
    )
    """Relevant only when explain_enabled is true. Can be set to
    automatic configuration (APDEX_F) or manual (see
    explainThresholdValue).
    """

    explain_threshold_value = sgqlc.types.Field(
        Seconds, graphql_name="explainThresholdValue"
    )
    """Threshold (in seconds) above which the agent will collect explain
    plans. Relevant only when explainEnabled is true and
    explainThresholdType is set to VALUE.
    """

    log_sql = sgqlc.types.Field(Boolean, graphql_name="logSql")
    """Set to true to enable logging of queries to the agent log file
    instead of uploading to New Relic. Queries are logged using the
    record_sql mode.
    """

    record_sql = sgqlc.types.Field(
        AgentApplicationSettingsRecordSqlEnum, graphql_name="recordSql"
    )
    """Obfuscation level for SQL queries reported in transaction trace
    nodes.
    """

    stack_trace_threshold = sgqlc.types.Field(
        Seconds, graphql_name="stackTraceThreshold"
    )
    """Specify a threshold in seconds. The agent includes stack traces in
    transaction trace nodes when the stack trace duration exceeds this
    threshold.
    """

    transaction_threshold_type = sgqlc.types.Field(
        AgentApplicationSettingsThresholdTypeEnum,
        graphql_name="transactionThresholdType",
    )
    """Relevant only when TransactionTracer is enabled. Can be set to
    automatic configuration (APDEX_F) or manual (see
    TransactionThresholdValue).
    """

    transaction_threshold_value = sgqlc.types.Field(
        Seconds, graphql_name="transactionThresholdValue"
    )
    """Threshold (in seconds) that transactions with a duration longer
    than this threshold are eligible for transaction traces.  Relevant
    only when Transaction Tracer is enabled and
    transaction_threshold_type is set to VALUE.
    """


class AgentApplicationSettingsUpdateError(sgqlc.types.Type):
    """Information about any errors encountered while updating values."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "error_class", "field")
    description = sgqlc.types.Field(String, graphql_name="description")
    """A 'human readable' description of the error."""

    error_class = sgqlc.types.Field(
        AgentApplicationSettingsUpdateErrorClass, graphql_name="errorClass"
    )
    """The category of the error."""

    field = sgqlc.types.Field(String, graphql_name="field")
    """The field that was being updated when the error was encountered."""


class AgentApplicationSettingsUpdateResult(sgqlc.types.Type):
    """The result of updating application settings."""

    __schema__ = nerdgraph
    __field_names__ = (
        "alias",
        "apm_settings",
        "browser_settings",
        "errors",
        "guid",
        "name",
    )
    alias = sgqlc.types.Field(String, graphql_name="alias")
    """The name for the application."""

    apm_settings = sgqlc.types.Field(
        AgentApplicationSettingsApmBase, graphql_name="apmSettings"
    )
    """General settings for the application can be accessed via this
    field.
    """

    browser_settings = sgqlc.types.Field(
        AgentApplicationSettingsBrowserBase, graphql_name="browserSettings"
    )
    """General settings for the browser application can be accessed via
    this field.
    """

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(AgentApplicationSettingsUpdateError), graphql_name="errors"
    )
    """Information about any errors encountered while updating values."""

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")
    """The GUID for the affected Entity."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name for the application."""


class AgentEnvironmentAccountApplicationLoadedModules(sgqlc.types.Type):
    """Data found for one application instance's loaded modules."""

    __schema__ = nerdgraph
    __field_names__ = ("application_guids", "details", "loaded_modules")
    application_guids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))),
        graphql_name="applicationGuids",
    )
    """List of Guids of the APM Applications this instance belongs to."""

    details = sgqlc.types.Field(
        "AgentEnvironmentApplicationInstanceDetails", graphql_name="details"
    )
    """Information of the application instance, such as host and
    language.
    """

    loaded_modules = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("AgentEnvironmentApplicationLoadedModule")
        ),
        graphql_name="loadedModules",
    )
    """A list of loaded modules of the application instance."""


class AgentEnvironmentAccountApplicationLoadedModulesResults(sgqlc.types.Type):
    """Results for loaded modules search. This list is paginated. Use the
    cursor to go through all the available results.
    """

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """If nextCursor is a String value, set it to the cursor input field
    while searching in order to get the next page of results.
    """

    results = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AgentEnvironmentAccountApplicationLoadedModules)
        ),
        graphql_name="results",
    )
    """Results of the search."""


class AgentEnvironmentAccountEnvironmentAttributesResults(sgqlc.types.Type):
    """Results for environment attributes search. This list is paginated.
    Use the cursor to go through all the available results.
    """

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """If nextCursor is a String value, set it to the cursor input field
    while searching in order to get the next page of results.
    """

    results = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("AgentEnvironmentApplicationEnvironmentAttributes")
        ),
        graphql_name="results",
    )
    """Results of the search."""


class AgentEnvironmentAccountStitchedFields(sgqlc.types.Type):
    """account-scope schemas"""

    __schema__ = nerdgraph
    __field_names__ = ("agent_settings_attributes", "environment_attributes", "modules")
    agent_settings_attributes = sgqlc.types.Field(
        AgentEnvironmentAccountEnvironmentAttributesResults,
        graphql_name="agentSettingsAttributes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )
    """Contains environment attributes regarding the reported setting of
    the reporting agent at account level.

    Arguments:

    * `cursor` (`String`): Cursor for fetching more results. Populate
      using result's nextCursor field.
    * `filter` (`AgentEnvironmentFilter`): Filter to apply to results
      on attribute name.
    """

    environment_attributes = sgqlc.types.Field(
        AgentEnvironmentAccountEnvironmentAttributesResults,
        graphql_name="environmentAttributes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )
    """Contains general environment attributes from the same environment
    where the application instance is running.

    Arguments:

    * `cursor` (`String`): Cursor for fetching more results. Populate
      using result's nextCursor field.
    * `filter` (`AgentEnvironmentFilter`): Filter to apply to results
      on attribute name.
    """

    modules = sgqlc.types.Field(
        AgentEnvironmentAccountApplicationLoadedModulesResults,
        graphql_name="modules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )
    """Contains environment attributes regarding modules loaded by the
    application instance. Used only by the Java agent.

    Arguments:

    * `cursor` (`String`): Cursor for fetching more results. Populate
      using result's nextCursor field.
    * `filter` (`AgentEnvironmentFilter`): Filter to apply to results
      on module name field.
    """


class AgentEnvironmentApplicationEnvironmentAttributes(sgqlc.types.Type):
    """Environment data found for one application instance."""

    __schema__ = nerdgraph
    __field_names__ = ("application_guids", "attributes", "details")
    application_guids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))),
        graphql_name="applicationGuids",
    )
    """List of Guids of the APM Applications this instance belongs to."""

    attributes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AgentEnvironmentAttribute")),
        graphql_name="attributes",
    )
    """A list of environment attributes of the application instance."""

    details = sgqlc.types.Field(
        "AgentEnvironmentApplicationInstanceDetails", graphql_name="details"
    )
    """Information of the application instance, such as host and
    language.
    """


class AgentEnvironmentApplicationInstance(sgqlc.types.Type):
    """Representation of the New Relic agent collecting data."""

    __schema__ = nerdgraph
    __field_names__ = (
        "agent_settings_attributes",
        "details",
        "environment_attributes",
        "modules",
    )
    agent_settings_attributes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AgentEnvironmentAttribute")),
        graphql_name="agentSettingsAttributes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )
    """Contains environment attributes regarding the reported setting of
    the reporting agent.

    Arguments:

    * `filter` (`AgentEnvironmentFilter`): Filter to apply to results
      on attribute name.
    """

    details = sgqlc.types.Field(
        sgqlc.types.non_null("AgentEnvironmentApplicationInstanceDetails"),
        graphql_name="details",
    )
    """Information of the application instance, such as host and
    language.
    """

    environment_attributes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AgentEnvironmentAttribute")),
        graphql_name="environmentAttributes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )
    """Contains general environment attributes from the same environment
    where the application instance is running.

    Arguments:

    * `filter` (`AgentEnvironmentFilter`): Filter to apply to results
      on attribute name.
    """

    modules = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("AgentEnvironmentApplicationLoadedModule")
        ),
        graphql_name="modules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )
    """Contains environment attributes regarding modules loaded by the
    application instance. Used only by the Java agent.

    Arguments:

    * `filter` (`AgentEnvironmentFilter`): Filter to apply to results
      on module name field.
    """


class AgentEnvironmentApplicationInstanceDetails(sgqlc.types.Type):
    """Details of an application instance such as host and language."""

    __schema__ = nerdgraph
    __field_names__ = ("host", "id", "language", "name")
    host = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="host")
    """Host of the application instance."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of the application instance."""

    language = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="language")
    """Language of the application instance."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the application instance."""


class AgentEnvironmentApplicationLoadedModule(sgqlc.types.Type):
    """Represents a module loaded by the apm application."""

    __schema__ = nerdgraph
    __field_names__ = ("attributes", "name", "version")
    attributes = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of("AgentEnvironmentLoadedModuleAttribute")
        ),
        graphql_name="attributes",
    )
    """Extra module attributes."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Module name."""

    version = sgqlc.types.Field(String, graphql_name="version")
    """Module version."""


class AgentEnvironmentAttribute(sgqlc.types.Type):
    """Represents one attribute from within the environment on which an
    agent is running.
    """

    __schema__ = nerdgraph
    __field_names__ = ("attribute", "value")
    attribute = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attribute"
    )
    """Environment attribute name."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value of the environment attribute."""


class AgentEnvironmentLoadedModuleAttribute(sgqlc.types.Type):
    """Attribute belonging to a loaded module."""

    __schema__ = nerdgraph
    __field_names__ = ("name", "value")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the module attribute."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value of the module attribute."""


class AgentFeatures(sgqlc.types.Type):
    """Features of the Agent"""

    __schema__ = nerdgraph
    __field_names__ = ("min_version", "name")
    min_version = sgqlc.types.Field(String, graphql_name="minVersion")
    """The minimum version available for the Agent on this entity"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the feature"""


class AgentRelease(sgqlc.types.Type):
    """Information about an Agent release"""

    __schema__ = nerdgraph
    __field_names__ = ("date", "version")
    date = sgqlc.types.Field(Date, graphql_name="date")
    """The date of the release"""

    version = sgqlc.types.Field(String, graphql_name="version")
    """The version of the release"""


class AiDecisionsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("decision", "decisions")
    decision = sgqlc.types.Field(
        "AiDecisionsDecision",
        graphql_name="decision",
        args=sgqlc.types.ArgDict(
            (
                (
                    "decision_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="decisionId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Fetch a decision by ID.

    Arguments:

    * `decision_id` (`ID!`): Decision ID.
    """

    decisions = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsDecisionListing"),
        graphql_name="decisions",
        args=sgqlc.types.ArgDict(
            (
                ("after", sgqlc.types.Arg(String, graphql_name="after", default=None)),
                (
                    "before",
                    sgqlc.types.Arg(String, graphql_name="before", default=None),
                ),
                (
                    "decision_states",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiDecisionsDecisionState)
                        ),
                        graphql_name="decisionStates",
                        default=None,
                    ),
                ),
                (
                    "decision_types",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiDecisionsDecisionType)
                        ),
                        graphql_name="decisionTypes",
                        default=None,
                    ),
                ),
                (
                    "page_size",
                    sgqlc.types.Arg(Int, graphql_name="pageSize", default=None),
                ),
                (
                    "sort_method",
                    sgqlc.types.Arg(
                        AiDecisionsDecisionSortMethod,
                        graphql_name="sortMethod",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Returns a paginated list of decisions.

    Arguments:

    * `after` (`String`): Cursor to paginate forwards.
    * `before` (`String`): Cursor to paginate backwards.
    * `decision_states` (`[AiDecisionsDecisionState!]`): List of
      decision states.
    * `decision_types` (`[AiDecisionsDecisionType!]`): List of
      decision types.
    * `page_size` (`Int`): Number of elements in page.
    * `sort_method` (`AiDecisionsDecisionSortMethod`): Sorting method.
    """


class AiDecisionsAnnotationEntry(sgqlc.types.Type):
    """A key-value entry."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """Key of entry."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value of entry."""


class AiDecisionsApplicableIncidentSearch(sgqlc.types.Type):
    """A search for a subset of incidents that may be relevant for a
    given rule expression
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "completed_at",
        "created_at",
        "error_message",
        "id",
        "incidents_scanned",
        "results",
        "updated_at",
    )
    completed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="completedAt")
    """Time search operation completed"""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """Time search operation was created"""

    error_message = sgqlc.types.Field(String, graphql_name="errorMessage")
    """Error message if search operation failed"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of search operation"""

    incidents_scanned = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="incidentsScanned"
    )
    """Number of incidents scanned by the search operation"""

    results = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiDecisionsSelectorExamples"))
        ),
        graphql_name="results",
    )
    """Listing of incident selectors and potential applicable incidents"""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )
    """Time search operation was last updated"""


class AiDecisionsDecision(sgqlc.types.Type):
    """A decision used to compare incidents and subsequently merge
    issues.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "annotations",
        "correlation_window_length",
        "created_at",
        "creator",
        "decision_expression",
        "decision_type",
        "description",
        "id",
        "metadata",
        "min_correlation_threshold",
        "name",
        "override_configuration",
        "source",
        "state",
        "updated_at",
    )
    annotations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiDecisionsAnnotationEntry))
        ),
        graphql_name="annotations",
    )
    """Internal data associated with this decision."""

    correlation_window_length = sgqlc.types.Field(
        Milliseconds, graphql_name="correlationWindowLength"
    )
    """Length of the window in which incidents are compared."""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """Time decision was created."""

    creator = sgqlc.types.Field("UserReference", graphql_name="creator")
    """Creator of decision."""

    decision_expression = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleExpression),
        graphql_name="decisionExpression",
    )
    """Expression to use to compare incidents."""

    decision_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsDecisionType), graphql_name="decisionType"
    )
    """Type of decision."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of decision."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of decision."""

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsRuleMetadata"), graphql_name="metadata"
    )
    """External data associated with this decision."""

    min_correlation_threshold = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="minCorrelationThreshold"
    )
    """Number of correlations within a window required to merge issues."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of decision."""

    override_configuration = sgqlc.types.Field(
        "AiDecisionsOverrideConfiguration", graphql_name="overrideConfiguration"
    )
    """Configuration to allow decision to override issue properties."""

    source = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleSource), graphql_name="source"
    )
    """Creation source of decision."""

    state = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsDecisionState), graphql_name="state"
    )
    """Current state of decision."""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )
    """Time decision was last updated."""


class AiDecisionsDecisionListing(sgqlc.types.Type):
    """Windowed view of an account's decisions."""

    __schema__ = nerdgraph
    __field_names__ = ("count", "decisions", "next_cursor", "prev_cursor")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """Number of decisions in this window."""

    decisions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiDecisionsDecision))
        ),
        graphql_name="decisions",
    )
    """List of decisions in this window."""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor used to fetch next page."""

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")
    """Cursor used to fetch previous page."""


class AiDecisionsMergeFeedback(sgqlc.types.Type):
    """Represents a piece of user feedback for a merge."""

    __schema__ = nerdgraph
    __field_names__ = (
        "child_issue_id",
        "opinion",
        "parent_issue_id",
        "rule_id",
        "user_id",
    )
    child_issue_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="childIssueId"
    )
    """ID of child issue."""

    opinion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOpinion), graphql_name="opinion"
    )
    """Opinion of the current user on this merge."""

    parent_issue_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="parentIssueId"
    )
    """ID of parent issue."""

    rule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="ruleId")
    """ID of correlation rule."""

    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="userId")
    """ID of user."""


class AiDecisionsOperationResult(sgqlc.types.Type):
    """Result of an operation."""

    __schema__ = nerdgraph
    __field_names__ = ("result",)
    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsResultType), graphql_name="result"
    )
    """Status of the operation."""


class AiDecisionsOpinionEntry(sgqlc.types.Type):
    """Represents a number of opinions."""

    __schema__ = nerdgraph
    __field_names__ = ("count", "opinion")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """Number of this type of opinion."""

    opinion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOpinion), graphql_name="opinion"
    )
    """Type of opinion."""


class AiDecisionsOverrideConfiguration(sgqlc.types.Type):
    """Configuration for overriding properties of issues created by
    merges.
    """

    __schema__ = nerdgraph
    __field_names__ = ("description", "priority", "title")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Description merged issues should take."""

    priority = sgqlc.types.Field(AiDecisionsIssuePriority, graphql_name="priority")
    """Priority merged issues should take."""

    title = sgqlc.types.Field(String, graphql_name="title")
    """Title merged issues should take."""


class AiDecisionsRule(sgqlc.types.Type):
    """A correlation rule used to compare incidents and subsequently
    merge issues.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "annotations",
        "correlation_window_length",
        "created_at",
        "creator",
        "description",
        "id",
        "metadata",
        "min_correlation_threshold",
        "name",
        "override_configuration",
        "rule_expression",
        "rule_type",
        "source",
        "state",
        "updated_at",
    )
    annotations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiDecisionsAnnotationEntry))
        ),
        graphql_name="annotations",
    )
    """Internal data associated with this rule."""

    correlation_window_length = sgqlc.types.Field(
        Milliseconds, graphql_name="correlationWindowLength"
    )
    """Length of the window in which incidents are compared."""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """Time rule was created."""

    creator = sgqlc.types.Field("UserReference", graphql_name="creator")
    """Creator of rule."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of rule."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of rule."""

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsRuleMetadata"), graphql_name="metadata"
    )
    """External data associated with this rule."""

    min_correlation_threshold = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="minCorrelationThreshold"
    )
    """Number of correlations within a window required to merge issues."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of rule."""

    override_configuration = sgqlc.types.Field(
        AiDecisionsOverrideConfiguration, graphql_name="overrideConfiguration"
    )
    """Configuration to allow rule to override issue properties."""

    rule_expression = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleExpression), graphql_name="ruleExpression"
    )
    """Expression to use to compare incidents."""

    rule_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleType), graphql_name="ruleType"
    )
    """Type of rule."""

    source = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleSource), graphql_name="source"
    )
    """Creation source of rule."""

    state = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleState), graphql_name="state"
    )
    """Current state of rule."""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )
    """Time rule was last updated."""


class AiDecisionsRuleMetadata(sgqlc.types.Type):
    """Metadata about a decision."""

    __schema__ = nerdgraph
    __field_names__ = ("merge_opinion_count",)
    merge_opinion_count = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiDecisionsOpinionEntry))
        ),
        graphql_name="mergeOpinionCount",
    )
    """Summary of user opinions for merges by this decision"""


class AiDecisionsSelectorApplicability(sgqlc.types.Type):
    """Number of incidents applicable for a selector"""

    __schema__ = nerdgraph
    __field_names__ = ("count", "select")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """Applicable number of incidents"""

    select = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentSelect), graphql_name="select"
    )
    """Incident selector"""


class AiDecisionsSelectorExamples(sgqlc.types.Type):
    """Example subset of incidents applicable for a selector"""

    __schema__ = nerdgraph
    __field_names__ = ("incidents", "select")
    incidents = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),
        graphql_name="incidents",
    )
    """IDs of incidents that can be applied to this selector"""

    select = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentSelect), graphql_name="select"
    )
    """Incident selector"""


class AiDecisionsSimulation(sgqlc.types.Type):
    """Simulation of a rule expression for a certain period of time."""

    __schema__ = nerdgraph
    __field_names__ = (
        "candidate_incidents",
        "completed_at",
        "created_at",
        "error_message",
        "id",
        "incidents_applicable",
        "incidents_correlated",
        "incidents_ingested",
        "incidents_processed",
        "progress",
        "updated_at",
    )
    candidate_incidents = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID)))
            )
        ),
        graphql_name="candidateIncidents",
    )
    """Example potential incident correlations."""

    completed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="completedAt")
    """Time simulation completed."""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """Time simulation was created."""

    error_message = sgqlc.types.Field(String, graphql_name="errorMessage")
    """Error message if simulation failed."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of simulation."""

    incidents_applicable = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiDecisionsSelectorApplicability))
        ),
        graphql_name="incidentsApplicable",
    )
    """Applicability of ingested incidents to the expression."""

    incidents_correlated = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="incidentsCorrelated"
    )
    """Number of incidents correlated by simulation."""

    incidents_ingested = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="incidentsIngested"
    )
    """Number of incidents ingested by simulation."""

    incidents_processed = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="incidentsProcessed"
    )
    """Number of applicable incidents processed by simulation."""

    progress = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="progress")
    """Percentage of current progress of simulation."""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )
    """Time simulation was last updated."""


class AiDecisionsSuggestion(sgqlc.types.Type):
    """A suggested correlation rule."""

    __schema__ = nerdgraph
    __field_names__ = (
        "correlation_window_length",
        "created_at",
        "description",
        "hash",
        "id",
        "min_correlation_threshold",
        "name",
        "override_configuration",
        "rule_expression",
        "state",
        "suggester",
        "support",
    )
    correlation_window_length = sgqlc.types.Field(
        Milliseconds, graphql_name="correlationWindowLength"
    )
    """Length of the window in which incidents are compared."""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """Time suggestion was created."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of suggestion."""

    hash = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="hash")
    """External hash of suggestion."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of suggestion."""

    min_correlation_threshold = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="minCorrelationThreshold"
    )
    """Number of correlations within a window required to merge issues."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of suggestion."""

    override_configuration = sgqlc.types.Field(
        AiDecisionsOverrideConfiguration, graphql_name="overrideConfiguration"
    )
    """Configuration to allow rule to override issue properties."""

    rule_expression = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleExpression), graphql_name="ruleExpression"
    )
    """Expression to use to compare incidents."""

    state = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsSuggestionState), graphql_name="state"
    )
    """Acceptance state of suggestion."""

    suggester = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="suggester"
    )
    """Service/user that created this suggestion."""

    support = sgqlc.types.Field(String, graphql_name="support")
    """External support for suggestion."""


class AiIssuesAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "config_by_environment",
        "incidents",
        "incidents_events",
        "issues",
        "issues_events",
    )
    config_by_environment = sgqlc.types.Field(
        "AiIssuesConfigurationByEnvironment", graphql_name="configByEnvironment"
    )
    """Fetch config for env"""

    incidents = sgqlc.types.Field(
        "AiIssuesIncidentData",
        graphql_name="incidents",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiIssuesFilterIncidents, graphql_name="filter", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Fetch incidents latest data by supplied filter

    Arguments:

    * `cursor` (`String`): cursor
    * `filter` (`AiIssuesFilterIncidents`): filter incidents
    * `time_window` (`TimeWindowInput`): time window, if not provided
      the default is the last 24 hours
    """

    incidents_events = sgqlc.types.Field(
        "AiIssuesIncidentData",
        graphql_name="incidentsEvents",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiIssuesFilterIncidentsEvents,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Fetch incidents events data by supplied filter

    Arguments:

    * `cursor` (`String`): cursor
    * `filter` (`AiIssuesFilterIncidentsEvents`): filter incidents
      events
    * `time_window` (`TimeWindowInput`): time window, if not provided
      the default is the last 24 hours
    """

    issues = sgqlc.types.Field(
        "AiIssuesIssueData",
        graphql_name="issues",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiIssuesFilterIssues, graphql_name="filter", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Fetch issues latest data by supplied filter

    Arguments:

    * `cursor` (`String`): cursor
    * `filter` (`AiIssuesFilterIssues`): filter issues
    * `time_window` (`TimeWindowInput`): time window, if not provided
      the default is the last 24 hours
    """

    issues_events = sgqlc.types.Field(
        "AiIssuesIssueData",
        graphql_name="issuesEvents",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiIssuesFilterIssuesEvents, graphql_name="filter", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Fetch issues events data by supplied filter

    Arguments:

    * `cursor` (`String`): cursor
    * `filter` (`AiIssuesFilterIssuesEvents`): filter issues events
    * `time_window` (`TimeWindowInput`): time window, if not provided
      the default is the last 24 hours
    """


class AiIssuesConfigurationByEnvironment(sgqlc.types.Type):
    """Configuration per environment"""

    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        "AiIssuesEnvironmentConfiguration", graphql_name="config"
    )
    """Configuration"""


class AiIssuesConfigurationOverrideResponse(sgqlc.types.Type):
    """Response for configuration override"""

    __schema__ = nerdgraph
    __field_names__ = ("config", "error")
    config = sgqlc.types.Field(
        "AiIssuesEnvironmentConfiguration", graphql_name="config"
    )
    """Updated configuration"""

    error = sgqlc.types.Field(String, graphql_name="error")
    """Error, if any"""


class AiIssuesEnvironmentConfiguration(sgqlc.types.Type):
    """Environment configuration object"""

    __schema__ = nerdgraph
    __field_names__ = (
        "flapping_interval",
        "grace_period",
        "inactive_period",
        "incident_timeout",
        "issue_ttl",
        "max_issue_size",
    )
    flapping_interval = sgqlc.types.Field(Seconds, graphql_name="flappingInterval")
    """Flapping interval in seconds"""

    grace_period = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AiIssuesGracePeriodConfig")),
        graphql_name="gracePeriod",
    )
    """Grace periods per priority"""

    inactive_period = sgqlc.types.Field(Seconds, graphql_name="inactivePeriod")
    """Inactive period in seconds"""

    incident_timeout = sgqlc.types.Field(Seconds, graphql_name="incidentTimeout")
    """Incident timeout in seconds"""

    issue_ttl = sgqlc.types.Field(Seconds, graphql_name="issueTtl")
    """Issue TTL in seconds"""

    max_issue_size = sgqlc.types.Field(Int, graphql_name="maxIssueSize")
    """Max incidents in the issue"""


class AiIssuesGracePeriodConfig(sgqlc.types.Type):
    """Grace period config per priority"""

    __schema__ = nerdgraph
    __field_names__ = ("period", "priority")
    period = sgqlc.types.Field(sgqlc.types.non_null(Seconds), graphql_name="period")
    """Grace period for notification in seconds per priority"""

    priority = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesPriority), graphql_name="priority"
    )
    """Priority for which grace period is defined
    (MEDIUM/LOW/HIGH/CRITICAL)
    """


class AiIssuesIIncident(sgqlc.types.Interface):
    """Incident interface"""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_ids",
        "closed_at",
        "created_at",
        "description",
        "entity_guids",
        "entity_names",
        "entity_types",
        "environment_id",
        "incident_id",
        "priority",
        "state",
        "timestamp",
        "title",
        "updated_at",
    )
    account_ids = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="accountIds"
    )
    """An account id this incident is stored in"""

    closed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="closedAt")
    """The time the incident was closed"""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """The time the incident was created"""

    description = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="description",
    )
    """The description is generated from the policy name and the
    condition name or provided through API
    """

    entity_guids = sgqlc.types.Field(EntityGuid, graphql_name="entityGuids")
    """A list of unique entity identifiers"""

    entity_names = sgqlc.types.Field(String, graphql_name="entityNames")
    """A list of entity names"""

    entity_types = sgqlc.types.Field(String, graphql_name="entityTypes")
    """A list of entity types"""

    environment_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="environmentId"
    )
    """See our documentation to learn about environments"""

    incident_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="incidentId")
    """Incident identifier"""

    priority = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesPriority), graphql_name="priority"
    )
    """Incident priority"""

    state = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIncidentState), graphql_name="state"
    )
    """Incident state"""

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="timestamp"
    )
    """Incident event timestamp"""

    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="title")
    """The description the user gave the condition if provided. Otherwise
    the incident description
    """

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )
    """The time the incident was last updated"""


class AiIssuesIncidentData(sgqlc.types.Type):
    """Incidents data"""

    __schema__ = nerdgraph
    __field_names__ = ("incidents", "next_cursor")
    incidents = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiIssuesIIncident))
        ),
        graphql_name="incidents",
    )
    """Incidents"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor to get the next batch of results"""


class AiIssuesIssue(sgqlc.types.Type):
    """Issue"""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_ids",
        "acknowledged_at",
        "acknowledged_by",
        "activated_at",
        "closed_at",
        "closed_by",
        "condition_family_id",
        "condition_name",
        "condition_product",
        "correlation_rule_descriptions",
        "correlation_rule_ids",
        "correlation_rule_names",
        "created_at",
        "deep_link_url",
        "description",
        "entity_guids",
        "entity_names",
        "entity_types",
        "environment_id",
        "event_type",
        "incident_ids",
        "is_correlated",
        "is_idle",
        "issue_id",
        "origins",
        "policy_ids",
        "policy_name",
        "priority",
        "sources",
        "state",
        "title",
        "total_incidents",
        "updated_at",
        "wildcard",
    )
    account_ids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Int))),
        graphql_name="accountIds",
    )
    """A list of account Ids. As an issue could be correlated with others
    from other accounts.
    """

    acknowledged_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="acknowledgedAt"
    )
    """The time the issue was acknowledged"""

    acknowledged_by = sgqlc.types.Field(String, graphql_name="acknowledgedBy")
    """The user that acknowledged the issue"""

    activated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="activatedAt")
    """The time the issue was activated"""

    closed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="closedAt")
    """The time the issue was closed"""

    closed_by = sgqlc.types.Field(String, graphql_name="closedBy")
    """The user that manually closed the issue"""

    condition_family_id = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name="conditionFamilyId"
    )
    """A list of condition ids associated with this issue"""

    condition_name = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="conditionName"
    )
    """A list of condition text descriptions associated with this issue"""

    condition_product = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="conditionProduct",
    )
    """A list of New Relic products connected to the conditions
    associated with this issue
    """

    correlation_rule_descriptions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="correlationRuleDescriptions",
    )
    """A list of correlation rule descriptions applied to correlate this
    issue to other issues
    """

    correlation_rule_ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Int)),
        graphql_name="correlationRuleIds",
    )
    """A list of correlation rule ids applied to correlate this issue to
    other issues
    """

    correlation_rule_names = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="correlationRuleNames",
    )
    """A list of correlation rule names applied to correlate this issue
    to other issues
    """

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """The time the issue was created"""

    deep_link_url = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="deepLinkUrl"
    )
    """A list of urls into New Relic product page, scoped to this issue"""

    description = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="description",
    )
    """A list of incident descriptions"""

    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="entityGuids",
    )
    """A list of unique entity identifiers"""

    entity_names = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="entityNames"
    )
    """A list of entity names"""

    entity_types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="entityTypes"
    )
    """A list of entity types"""

    environment_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="environmentId"
    )
    """See our documentation to learn about environments"""

    event_type = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="eventType"
    )
    """An issue event that could be INCIDENT_ADDED, USER_ACTION,
    INCIDENT_CLOSED,...
    """

    incident_ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="incidentIds"
    )
    """A list of incident IDs in this issue. Notice, in some cases there
    may be thousands of incidents in an issue
    """

    is_correlated = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isCorrelated"
    )
    """True means that other issues were correlated to this one"""

    is_idle = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="isIdle")
    """See our documentation to learn about idle issues"""

    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="issueId")
    """Issue identifier"""

    origins = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="origins",
    )
    """A list of origins of the incidents (violations, anomalies,
    external)
    """

    policy_ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name="policyIds"
    )
    """A list of policy ids associated with this issue"""

    policy_name = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="policyName"
    )
    """A list of policy names associated with this issue"""

    priority = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesPriority), graphql_name="priority"
    )
    """The issue priority"""

    sources = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="sources",
    )
    """A list of sources of the incidents (newrelic or external)"""

    state = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIssueState), graphql_name="state"
    )
    """The issue state"""

    title = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="title",
    )
    """A list of underlying incident titles"""

    total_incidents = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalIncidents"
    )
    """The count of underlying incidents"""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )
    """The time the issue was last updated"""

    wildcard = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="wildcard"
    )
    """A list of wildcard expressions used for wildcard metrics
    associated with this issue
    """


class AiIssuesIssueData(sgqlc.types.Type):
    """Issues data"""

    __schema__ = nerdgraph
    __field_names__ = ("issues", "next_cursor")
    issues = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(AiIssuesIssue))),
        graphql_name="issues",
    )
    """Issues"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor to get the next batch of results"""


class AiIssuesIssueUserActionResponse(sgqlc.types.Type):
    """Response for user action"""

    __schema__ = nerdgraph
    __field_names__ = ("error", "result")
    error = sgqlc.types.Field(String, graphql_name="error")
    """Error, if any"""

    result = sgqlc.types.Field("AiIssuesIssueUserActionResult", graphql_name="result")
    """User operation performed with an issue"""


class AiIssuesIssueUserActionResult(sgqlc.types.Type):
    """User action for issue"""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "action", "issue_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """Account id"""

    action = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIssueUserAction), graphql_name="action"
    )
    """User action"""

    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="issueId")
    """Issue id"""


class AiIssuesKeyValue(sgqlc.types.Type):
    """Key value type"""

    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """key"""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """value"""


class AiNotificationsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "channel_schema",
        "channel_suggestions",
        "channels",
        "destination_suggestions",
        "destinations",
        "o_auth_url",
        "suggestions",
        "variables",
    )
    channel_schema = sgqlc.types.Field(
        "AiNotificationsChannelSchemaResult",
        graphql_name="channelSchema",
        args=sgqlc.types.ArgDict(
            (
                (
                    "channel_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsChannelType),
                        graphql_name="channelType",
                        default=None,
                    ),
                ),
                (
                    "constraints",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiNotificationsConstraint)
                        ),
                        graphql_name="constraints",
                        default=None,
                    ),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="destinationId",
                        default=None,
                    ),
                ),
                (
                    "product",
                    sgqlc.types.Arg(
                        AiNotificationsProduct, graphql_name="product", default=None
                    ),
                ),
            )
        ),
    )
    """Fetch channel creation schema

    Arguments:

    * `channel_type` (`AiNotificationsChannelType!`): Query by
      channelType
    * `constraints` (`[AiNotificationsConstraint!]`): Channel creation
      constraints
    * `destination_id` (`ID!`): Query by destinationId
    * `product` (`AiNotificationsProduct`): Product type for schema
      personalization
    """

    channel_suggestions = sgqlc.types.Field(
        "AiNotificationsSuggestionsResponse",
        graphql_name="channelSuggestions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "channel_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsChannelType),
                        graphql_name="channelType",
                        default=None,
                    ),
                ),
                (
                    "constraints",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiNotificationsConstraint)
                        ),
                        graphql_name="constraints",
                        default=None,
                    ),
                ),
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="destinationId",
                        default=None,
                    ),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiNotificationsSuggestionFilter,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
            )
        ),
    )
    """Fetch a field suggestions list for Channel creation

    Arguments:

    * `channel_type` (`AiNotificationsChannelType!`): Suggestions
      channel type
    * `constraints` (`[AiNotificationsConstraint!]`): List of
      key/value pairs indicating field constraints
    * `cursor` (`String`): cursor to get the next batch of results
    * `destination_id` (`ID!`): Query by destinationId
    * `filter` (`AiNotificationsSuggestionFilter`): Filter for the
      suggestions results
    * `key` (`String!`): The field name for which the suggestions are
    """

    channels = sgqlc.types.Field(
        "AiNotificationsChannelsResponse",
        graphql_name="channels",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filters",
                    sgqlc.types.Arg(
                        AiNotificationsChannelFilter,
                        graphql_name="filters",
                        default=None,
                    ),
                ),
                (
                    "sorter",
                    sgqlc.types.Arg(
                        AiNotificationsChannelSorter,
                        graphql_name="sorter",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Fetch a Channel by product

    Arguments:

    * `cursor` (`String`): cursor to get the next batch of results
    * `filters` (`AiNotificationsChannelFilter`): Query filters
    * `sorter` (`AiNotificationsChannelSorter`): Sort object for
      results
    """

    destination_suggestions = sgqlc.types.Field(
        "AiNotificationsSuggestionsResponse",
        graphql_name="destinationSuggestions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "constraints",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiNotificationsConstraint)
                        ),
                        graphql_name="constraints",
                        default=None,
                    ),
                ),
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "destination_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsDestinationType),
                        graphql_name="destinationType",
                        default=None,
                    ),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiNotificationsSuggestionFilter,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
            )
        ),
    )
    """Fetch a field suggestions list for Destination creation

    Arguments:

    * `constraints` (`[AiNotificationsConstraint!]`): List of
      key/value pairs indicating field constraints
    * `cursor` (`String`): cursor to get the next batch of results
    * `destination_type` (`AiNotificationsDestinationType!`):
      Suggestions destination type
    * `filter` (`AiNotificationsSuggestionFilter`): Filter for the
      suggestions results
    * `key` (`String!`): The field name for which the suggestions are
    """

    destinations = sgqlc.types.Field(
        "AiNotificationsDestinationsResponse",
        graphql_name="destinations",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filters",
                    sgqlc.types.Arg(
                        AiNotificationsDestinationFilter,
                        graphql_name="filters",
                        default=None,
                    ),
                ),
                (
                    "sorter",
                    sgqlc.types.Arg(
                        AiNotificationsDestinationSorter,
                        graphql_name="sorter",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Fetch a Destinations by type

    Arguments:

    * `cursor` (`String`): cursor to get the next batch of results
    * `filters` (`AiNotificationsDestinationFilter`): Query filters
    * `sorter` (`AiNotificationsDestinationSorter`): Sort object for
      results
    """

    o_auth_url = sgqlc.types.Field(
        "AiNotificationsOAuthUrlResponse",
        graphql_name="oAuthUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "redirect_url",
                    sgqlc.types.Arg(String, graphql_name="redirectUrl", default=None),
                ),
                (
                    "type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsDestinationType),
                        graphql_name="type",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Get an OAuth URL by destination type

    Arguments:

    * `redirect_url` (`String`): Redirection URL
    * `type` (`AiNotificationsDestinationType!`): Destination type
    """

    suggestions = sgqlc.types.Field(
        "AiNotificationsSuggestionsResponse",
        graphql_name="suggestions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "channel_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsChannelType),
                        graphql_name="channelType",
                        default=None,
                    ),
                ),
                (
                    "constraints",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiNotificationsConstraint)
                        ),
                        graphql_name="constraints",
                        default=None,
                    ),
                ),
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="destinationId",
                        default=None,
                    ),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiNotificationsSuggestionFilter,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
            )
        ),
    )
    """Fetch a field suggestions list for Channel creation

    Arguments:

    * `channel_type` (`AiNotificationsChannelType!`): Suggestions
      channel type
    * `constraints` (`[AiNotificationsConstraint!]`): List of
      key/value pairs indicating field constraints
    * `cursor` (`String`): cursor to get the next batch of results
    * `destination_id` (`ID!`): Query by destinationId
    * `filter` (`AiNotificationsSuggestionFilter`): Filter for the
      suggestions results
    * `key` (`String!`): The field name for which the suggestions are
    """

    variables = sgqlc.types.Field(
        "AiNotificationsVariableResult",
        graphql_name="variables",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filters",
                    sgqlc.types.Arg(
                        AiNotificationsVariableFilter,
                        graphql_name="filters",
                        default=None,
                    ),
                ),
                (
                    "sorter",
                    sgqlc.types.Arg(
                        AiNotificationsVariableSorter,
                        graphql_name="sorter",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Fetch a Variables by product

    Arguments:

    * `cursor` (`String`): cursor to get the next batch of results
    * `filters` (`AiNotificationsVariableFilter`): Query filters
    * `sorter` (`AiNotificationsVariableSorter`): Sort object for
      results
    """


class AiNotificationsBasicAuth(sgqlc.types.Type):
    """Basic user and password authentication"""

    __schema__ = nerdgraph
    __field_names__ = ("auth_type", "user")
    auth_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsAuthType), graphql_name="authType"
    )
    """Authentication Type - Basic"""

    user = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="user")
    """Username"""


class AiNotificationsChannel(sgqlc.types.Type):
    """Channel object"""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "active",
        "created_at",
        "destination_id",
        "id",
        "name",
        "product",
        "properties",
        "status",
        "type",
        "updated_at",
        "updated_by",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The accountId of the creator of the channel"""

    active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="active")
    """Is channel active"""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """Channel creation time"""

    destination_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="destinationId"
    )
    """Related destination type"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Channel id"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Channel name"""

    product = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsProduct), graphql_name="product"
    )
    """Related product type"""

    properties = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsProperty"))
        ),
        graphql_name="properties",
    )
    """List of destination property types"""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelStatus), graphql_name="status"
    )
    """Channel Status"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelType), graphql_name="type"
    )
    """Channel type"""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )
    """Channel last update time"""

    updated_by = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="updatedBy")
    """Message template creator userId"""


class AiNotificationsChannelResponse(sgqlc.types.Type):
    """Response for all channel related mutations. Includes relevant
    channel and/or errors
    """

    __schema__ = nerdgraph
    __field_names__ = ("channel", "error", "errors")
    channel = sgqlc.types.Field(AiNotificationsChannel, graphql_name="channel")
    """Successfully mutated channel"""

    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")
    """Error in channel mutation"""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsError"))
        ),
        graphql_name="errors",
    )
    """Deprecated list of errors"""


class AiNotificationsChannelSchemaResult(sgqlc.types.Type):
    """Channel schema object"""

    __schema__ = nerdgraph
    __field_names__ = ("error", "errors", "result", "schema")
    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")
    """Error while querying channelSchema"""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsError"))
        ),
        graphql_name="errors",
    )
    """Deprecated list of errors"""

    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsResult), graphql_name="result"
    )
    """Result of channelSchema query"""

    schema = sgqlc.types.Field("AiNotificationsSchema", graphql_name="schema")
    """Possible fields for the channel"""


class AiNotificationsChannelTestResponse(sgqlc.types.Type):
    """Result of a notification test"""

    __schema__ = nerdgraph
    __field_names__ = ("details", "error", "errors", "evidence", "result")
    details = sgqlc.types.Field(String, graphql_name="details")
    """Extra details (if available)"""

    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")
    """Test response error"""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsError"))
        ),
        graphql_name="errors",
    )
    """Deprecated list of errors"""

    evidence = sgqlc.types.Field(String, graphql_name="evidence")
    """The evidence (url for example) of the channel being created."""

    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsResult), graphql_name="result"
    )
    """Test result - success or failure"""


class AiNotificationsChannelsResponse(sgqlc.types.Type):
    """Channel result object"""

    __schema__ = nerdgraph
    __field_names__ = ("entities", "error", "errors", "next_cursor", "total_count")
    entities = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsChannel))
        ),
        graphql_name="entities",
    )
    """Channel entities"""

    error = sgqlc.types.Field("AiNotificationsResponseError", graphql_name="error")
    """Error in channel entities fetching"""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsResponseError"))
        ),
        graphql_name="errors",
    )
    """Deprecated list of errors"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor to get the next batch of results"""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """Count of all channel entities"""


class AiNotificationsConstraintError(sgqlc.types.Type):
    """Missing constraint error. Constraints can be retrieved using
    suggestion api
    """

    __schema__ = nerdgraph
    __field_names__ = ("dependencies", "name")
    dependencies = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="dependencies",
    )
    """Names of other constraints this constraint is dependent on"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the missing constraint"""


class AiNotificationsConstraintsError(sgqlc.types.Type):
    """Object for constraints errors"""

    __schema__ = nerdgraph
    __field_names__ = ("constraints",)
    constraints = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsConstraintError))
        ),
        graphql_name="constraints",
    )
    """List of missing constraints for channel creation"""


class AiNotificationsDataValidationError(sgqlc.types.Type):
    """Object for validation errors"""

    __schema__ = nerdgraph
    __field_names__ = ("details", "fields")
    details = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="details")
    """Top level error details"""

    fields = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsFieldError"))
        ),
        graphql_name="fields",
    )
    """List of invalid fields"""


class AiNotificationsDeleteResponse(sgqlc.types.Type):
    """Delete response object"""

    __schema__ = nerdgraph
    __field_names__ = ("error", "errors", "ids")
    error = sgqlc.types.Field("AiNotificationsResponseError", graphql_name="error")
    """Error in object deletion"""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsResponseError"))
        ),
        graphql_name="errors",
    )
    """Deprecated list of errors"""

    ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name="ids"
    )
    """Deleted object ids"""


class AiNotificationsDestination(sgqlc.types.Type):
    """Destination Object"""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "active",
        "auth",
        "created_at",
        "id",
        "is_user_authenticated",
        "last_sent",
        "name",
        "properties",
        "status",
        "type",
        "updated_at",
        "updated_by",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The accountId of the creator of the destination"""

    active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="active")
    """Destination active"""

    auth = sgqlc.types.Field("AiNotificationsAuth", graphql_name="auth")
    """Authentication for this destination"""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """Destination created at"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Destination id"""

    is_user_authenticated = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isUserAuthenticated"
    )
    """Indicates whether the user is authenticated with the destination"""

    last_sent = sgqlc.types.Field(DateTime, graphql_name="lastSent")
    """Last time a notification was sent"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Destination name"""

    properties = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsProperty"))
        ),
        graphql_name="properties",
    )
    """List of destination property types"""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationStatus), graphql_name="status"
    )
    """Destination status"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationType), graphql_name="type"
    )
    """Destination type"""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )
    """Destination updated at"""

    updated_by = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="updatedBy")
    """Destination updated by"""


class AiNotificationsDestinationResponse(sgqlc.types.Type):
    """Response for all destinations related mutation. Includes relevant
    destination and/or errors
    """

    __schema__ = nerdgraph
    __field_names__ = ("destination", "error", "errors")
    destination = sgqlc.types.Field(
        AiNotificationsDestination, graphql_name="destination"
    )
    """Successfully mutated destination"""

    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")
    """Error in destination mutation"""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsError"))
        ),
        graphql_name="errors",
    )
    """Deprecated list of errors"""


class AiNotificationsDestinationTestResponse(sgqlc.types.Type):
    """Result of a connection test"""

    __schema__ = nerdgraph
    __field_names__ = ("details", "error", "errors", "result")
    details = sgqlc.types.Field(String, graphql_name="details")
    """Extra details (if available)"""

    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")
    """Test response error"""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsError"))
        ),
        graphql_name="errors",
    )
    """Deprecated list of errors"""

    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsResult), graphql_name="result"
    )
    """Test result - success or failure"""


class AiNotificationsDestinationsResponse(sgqlc.types.Type):
    """Destinations result object"""

    __schema__ = nerdgraph
    __field_names__ = ("entities", "error", "errors", "next_cursor", "total_count")
    entities = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsDestination))
        ),
        graphql_name="entities",
    )
    """Destination entities"""

    error = sgqlc.types.Field("AiNotificationsResponseError", graphql_name="error")
    """Error in destinations entities fetching"""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsResponseError"))
        ),
        graphql_name="errors",
    )
    """Deprecated list of errors"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor to get the next batch of results"""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """Count of all destination entities"""


class AiNotificationsFieldError(sgqlc.types.Type):
    """Invalid field object"""

    __schema__ = nerdgraph
    __field_names__ = ("field", "message")
    field = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="field")
    """Field name"""

    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """Validation error"""


class AiNotificationsOAuth2Auth(sgqlc.types.Type):
    """OAuth2 based authentication"""

    __schema__ = nerdgraph
    __field_names__ = (
        "access_token_url",
        "auth_type",
        "authorization_url",
        "client_id",
        "prefix",
        "refresh_interval",
        "refreshable",
        "scope",
    )
    access_token_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="accessTokenUrl"
    )
    """OAuth2 access token url"""

    auth_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsAuthType), graphql_name="authType"
    )
    """Authentication Type - Token or Oauth2"""

    authorization_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="authorizationUrl"
    )
    """OAuth2 authorization url"""

    client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="clientId")
    """OAuth2 clientId"""

    prefix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="prefix")
    """Token prefix"""

    refresh_interval = sgqlc.types.Field(Int, graphql_name="refreshInterval")
    """Interval of how often should the access token be refreshed"""

    refreshable = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="refreshable"
    )
    """Is the OAuth2 access token refreshable"""

    scope = sgqlc.types.Field(String, graphql_name="scope")
    """OAuth2 token's scope"""


class AiNotificationsOAuthUrlResponse(sgqlc.types.Type):
    """OAuth URL response"""

    __schema__ = nerdgraph
    __field_names__ = ("error", "errors", "transaction_id", "url")
    error = sgqlc.types.Field("AiNotificationsResponseError", graphql_name="error")
    """OAuth response error"""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsResponseError"))
        ),
        graphql_name="errors",
    )
    """Deprecated list of errors"""

    transaction_id = sgqlc.types.Field(ID, graphql_name="transactionId")
    """Transaction id to track OAuth flow with"""

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """OAuth URL for the user"""


class AiNotificationsProperty(sgqlc.types.Type):
    """Channel property Object"""

    __schema__ = nerdgraph
    __field_names__ = ("display_value", "key", "label", "value")
    display_value = sgqlc.types.Field(String, graphql_name="displayValue")
    """Channel property display key"""

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """Channel property key"""

    label = sgqlc.types.Field(String, graphql_name="label")
    """Channel property display key"""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Channel property value"""


class AiNotificationsResponseError(sgqlc.types.Type):
    """Response error object"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "details", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """Error description"""

    details = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="details")
    """Error details"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsErrorType), graphql_name="type"
    )
    """Error type"""


class AiNotificationsSchema(sgqlc.types.Type):
    """Channel schema object"""

    __schema__ = nerdgraph
    __field_names__ = ("fields",)
    fields = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsSchemaField"))
        ),
        graphql_name="fields",
    )
    """Possible fields for the channel"""


class AiNotificationsSchemaField(sgqlc.types.Type):
    """Schema field object"""

    __schema__ = nerdgraph
    __field_names__ = ("component", "key", "label", "mandatory")
    component = sgqlc.types.Field(
        sgqlc.types.non_null("AiNotificationsUiComponent"), graphql_name="component"
    )
    """UI Component details"""

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """Field key"""

    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="label")
    """Field label shown in the UI"""

    mandatory = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="mandatory"
    )
    """Is the field mandatory"""


class AiNotificationsSelectComponentOptions(sgqlc.types.Type):
    """Additional options for SELECT type components"""

    __schema__ = nerdgraph
    __field_names__ = (
        "creatable",
        "dependent_on",
        "filtered_by",
        "label",
        "multiple",
        "searchable",
        "suggestions",
    )
    creatable = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="creatable"
    )
    """Is custom value creation allowed"""

    dependent_on = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="dependentOn",
    )
    """List of field keys their values are required in order to fetch
    suggestions for this field
    """

    filtered_by = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="filteredBy",
    )
    """List of field keys their values can be used to filter suggestions
    by
    """

    label = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="label")
    """Do we allow additional values as input other than suggested?"""

    multiple = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="multiple")
    """Are we expecting a single or multiple values"""

    searchable = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="searchable"
    )
    """Is this component searchable"""

    suggestions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsSuggestion"))
        ),
        graphql_name="suggestions",
    )
    """Preloaded suggestions for"""


class AiNotificationsSuggestion(sgqlc.types.Type):
    """Suggestion object"""

    __schema__ = nerdgraph
    __field_names__ = ("display_value", "icon", "value")
    display_value = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayValue"
    )
    """Suggestion label"""

    icon = sgqlc.types.Field(String, graphql_name="icon")
    """Should suggestion be the default selection"""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Suggestion key"""


class AiNotificationsSuggestionError(sgqlc.types.Type):
    """Object for suggestion errors"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "details", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """SuggestionError description"""

    details = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="details")
    """SuggestionError details"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsErrorType), graphql_name="type"
    )
    """SuggestionError type"""


class AiNotificationsSuggestionsResponse(sgqlc.types.Type):
    """Possible values for a field by its key"""

    __schema__ = nerdgraph
    __field_names__ = (
        "entities",
        "error",
        "errors",
        "next_cursor",
        "result",
        "total_count",
    )
    entities = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsSuggestion))
        ),
        graphql_name="entities",
    )
    """List of Suggestion objects"""

    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")
    """Error while fetching suggestions"""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsSuggestionError))
        ),
        graphql_name="errors",
    )
    """Deprecated list of errors"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor to get the next batch of results"""

    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsResult), graphql_name="result"
    )
    """Suggestions request result"""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """Count of all suggestion entities, -1 if unavailable"""


class AiNotificationsTokenAuth(sgqlc.types.Type):
    """Token based authentication"""

    __schema__ = nerdgraph
    __field_names__ = ("auth_type", "prefix")
    auth_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsAuthType), graphql_name="authType"
    )
    """Authentication Type - Token or Oauth2"""

    prefix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="prefix")
    """Token Prefix"""


class AiNotificationsUiComponent(sgqlc.types.Type):
    """UI component object"""

    __schema__ = nerdgraph
    __field_names__ = (
        "allow_template_variables",
        "data_validation",
        "default_value",
        "select_options",
        "type",
        "visible_by_default",
    )
    allow_template_variables = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="allowTemplateVariables"
    )
    """Should we allow variables rendering in this component"""

    data_validation = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsUiComponentValidation),
        graphql_name="dataValidation",
    )
    """Which data validation is applied to this component"""

    default_value = sgqlc.types.Field(
        AiNotificationsSuggestion, graphql_name="defaultValue"
    )
    """Default value of this component"""

    select_options = sgqlc.types.Field(
        AiNotificationsSelectComponentOptions, graphql_name="selectOptions"
    )
    """Additional options for SELECT type components"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsUiComponentType), graphql_name="type"
    )
    """Component type"""

    visible_by_default = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="visibleByDefault"
    )
    """Is this component a part of the default fields"""


class AiNotificationsVariable(sgqlc.types.Type):
    """Variable object"""

    __schema__ = nerdgraph
    __field_names__ = (
        "active",
        "created_at",
        "description",
        "example",
        "id",
        "key",
        "label",
        "name",
        "product",
        "type",
        "updated_at",
        "updated_by",
    )
    active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="active")
    """Is variable active"""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """Variable creation time"""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Variable description"""

    example = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="example")
    """Variable example"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Variable id"""

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """Variable key"""

    label = sgqlc.types.Field(String, graphql_name="label")
    """Variable label"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Variable name"""

    product = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsProduct), graphql_name="product"
    )
    """Related product type"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsVariableType), graphql_name="type"
    )
    """Variable type"""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )
    """Variable update time"""

    updated_by = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="updatedBy")
    """Variable creator userId"""


class AiNotificationsVariableResult(sgqlc.types.Type):
    """Channel result object"""

    __schema__ = nerdgraph
    __field_names__ = ("entities", "next_cursor", "total_count")
    entities = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsVariable))
        ),
        graphql_name="entities",
    )
    """Variable entities"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor to get the next batch of results"""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """Count of all variable entities"""


class AiTopologyAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("edges", "graph", "vertices")
    edges = sgqlc.types.Field(
        sgqlc.types.non_null("AiTopologyEdgeListing"),
        graphql_name="edges",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "edge_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="edgeIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Returns a list of edges.

    Arguments:

    * `cursor` (`String`): The cursor to fetch paginated results.
    * `edge_ids` (`[ID!]`): List of edge IDs.
    """

    graph = sgqlc.types.Field(
        sgqlc.types.non_null("AiTopologyGraph"), graphql_name="graph"
    )
    """Returns a graph."""

    vertices = sgqlc.types.Field(
        sgqlc.types.non_null("AiTopologyVertexListing"),
        graphql_name="vertices",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "vertex_classes",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiTopologyVertexClass)
                        ),
                        graphql_name="vertexClasses",
                        default=None,
                    ),
                ),
                (
                    "vertex_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="vertexIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Returns a paginated list of vertices.

    Arguments:

    * `cursor` (`String`): The cursor to fetch paginated results.
    * `vertex_classes` (`[AiTopologyVertexClass!]`): List of classes.
    * `vertex_ids` (`[ID!]`): List of vertex IDs.
    """


class AiTopologyCollectorOperationResult(sgqlc.types.Type):
    """Result of an operation."""

    __schema__ = nerdgraph
    __field_names__ = ("result",)
    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiTopologyCollectorResultType), graphql_name="result"
    )
    """Status of the operation."""


class AiTopologyDefiningAttribute(sgqlc.types.Type):
    """A key-value entry representing an attribute name and value."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """Key of entry."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Value of entry."""


class AiTopologyEdge(sgqlc.types.Type):
    """A connection between two vertices within a graph"""

    __schema__ = nerdgraph
    __field_names__ = (
        "directed",
        "from_vertex_id",
        "from_vertex_name",
        "id",
        "to_vertex_id",
        "to_vertex_name",
        "updated_at",
    )
    directed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="directed")
    """Whether or not the direction of the edge has semantic meaning."""

    from_vertex_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="fromVertexId"
    )
    """ID of parent vertex."""

    from_vertex_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="fromVertexName"
    )
    """Name of parent vertex."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of edge."""

    to_vertex_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="toVertexId"
    )
    """ID of child vertex."""

    to_vertex_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="toVertexName"
    )
    """Name of child vertex."""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )
    """Time rule was last updated."""


class AiTopologyEdgeListing(sgqlc.types.Type):
    """Listing of edges in a graph."""

    __schema__ = nerdgraph
    __field_names__ = ("count", "cursor", "edges")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """Number of edges returned by the query."""

    cursor = sgqlc.types.Field(String, graphql_name="cursor")
    """Next cursor."""

    edges = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(AiTopologyEdge))),
        graphql_name="edges",
    )
    """List of edges."""


class AiTopologyGraph(sgqlc.types.Type):
    """Overview of a graph; all edges and vertices."""

    __schema__ = nerdgraph
    __field_names__ = ("edges", "vertices")
    edges = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(AiTopologyEdge))),
        graphql_name="edges",
    )
    """List of all edges in this graph."""

    vertices = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiTopologyVertex"))
        ),
        graphql_name="vertices",
    )
    """List of all vertices in this graph."""


class AiTopologyVertex(sgqlc.types.Type):
    """A vertex is a representation of a node in a graph: a host; an
    application; etc.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "defining_attributes",
        "id",
        "name",
        "updated_at",
        "vertex_class",
    )
    defining_attributes = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiTopologyDefiningAttribute))
        ),
        graphql_name="definingAttributes",
    )
    """The attributes used to define a vertex as a key-value entry."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of vertex."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the vertex."""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )
    """Time rule was last updated."""

    vertex_class = sgqlc.types.Field(
        sgqlc.types.non_null(AiTopologyVertexClass), graphql_name="vertexClass"
    )
    """Class of the vertex."""


class AiTopologyVertexListing(sgqlc.types.Type):
    """Listing of vertices in a graph."""

    __schema__ = nerdgraph
    __field_names__ = ("count", "cursor", "vertices")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """Number of vertices returned by this query."""

    cursor = sgqlc.types.Field(String, graphql_name="cursor")
    """Next cursor."""

    vertices = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiTopologyVertex))
        ),
        graphql_name="vertices",
    )
    """List of vertices."""


class AiWorkflowsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("workflows",)
    workflows = sgqlc.types.Field(
        "AiWorkflowsWorkflows",
        graphql_name="workflows",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filters",
                    sgqlc.types.Arg(
                        AiWorkflowsFilters, graphql_name="filters", default=None
                    ),
                ),
            )
        ),
    )
    """Returns a list of workflows with pagination cursor according to
    account id and filters

    Arguments:

    * `cursor` (`String`): Cursor used to get the next page of results
    * `filters` (`AiWorkflowsFilters`): Query filters
    """


class AiWorkflowsCreateWorkflowResponse(sgqlc.types.Type):
    """Create workflow mutation response including errors"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "workflow")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsCreateResponseError"))
        ),
        graphql_name="errors",
    )
    """A list of errors that occurred while performing the create
    workflow action
    """

    workflow = sgqlc.types.Field("AiWorkflowsWorkflow", graphql_name="workflow")
    """Successfully created workflow"""


class AiWorkflowsDeleteWorkflowResponse(sgqlc.types.Type):
    """Delete workflow mutation response including errors"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "id")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsDeleteResponseError"))
        ),
        graphql_name="errors",
    )
    """A list of errors that occurred while performing the delete
    workflow action
    """

    id = sgqlc.types.Field(ID, graphql_name="id")
    """Id of the successfully deleted workflow"""


class AiWorkflowsDestinationConfiguration(sgqlc.types.Type):
    """Destination Configuration Object"""

    __schema__ = nerdgraph
    __field_names__ = ("channel_id", "name", "type")
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="channelId")
    """Channel Id of the Destination Configuration"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the Destination Configuration"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsDestinationType), graphql_name="type"
    )
    """Type of the Destination Configuration"""


class AiWorkflowsEnrichment(sgqlc.types.Type):
    """Makes it possible to augment the notification with additional data
    from the New Relic platform
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "configurations",
        "created_at",
        "id",
        "name",
        "type",
        "updated_at",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """Account Id of the Enrichment"""

    configurations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsConfiguration"))
        ),
        graphql_name="configurations",
    )
    """List of configurations for the enrichment"""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """The time the Enrichment was created"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Enrichment Id"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the Enrichment"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsEnrichmentType), graphql_name="type"
    )
    """Type of the Enrichment"""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )
    """The time the Enrichment was last updated"""


class AiWorkflowsFilter(sgqlc.types.Type):
    """Filter Object"""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "id", "name", "predicates", "type")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """Account Id of this Filter"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Filter Id"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the Filter"""

    predicates = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsPredicate"))
        ),
        graphql_name="predicates",
    )
    """Expressions that determine which issues will be handled"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsFilterType), graphql_name="type"
    )
    """The type of the Filter"""


class AiWorkflowsNrqlConfiguration(sgqlc.types.Type):
    """NRQL enrichment configuration"""

    __schema__ = nerdgraph
    __field_names__ = ("query",)
    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")
    """NRQL query"""


class AiWorkflowsPredicate(sgqlc.types.Type):
    """Predicate Object"""

    __schema__ = nerdgraph
    __field_names__ = ("attribute", "operator", "values")
    attribute = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attribute"
    )
    """Field name in the issue event"""

    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsOperator), graphql_name="operator"
    )
    """Type of operator used to match the values"""

    values = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="values",
    )
    """Values to compare"""


class AiWorkflowsResponseError(sgqlc.types.Interface):
    """Error description"""

    __schema__ = nerdgraph
    __field_names__ = ("description",)
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """The error description"""


class AiWorkflowsTestNotificationResponse(sgqlc.types.Type):
    """Notification response according to channel id"""

    __schema__ = nerdgraph
    __field_names__ = ("channel_id", "evidence", "status")
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="channelId")
    """The id of the tested channel"""

    evidence = sgqlc.types.Field(String, graphql_name="evidence")
    """Evidence for a successful test notification"""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsTestNotificationResponseStatus),
        graphql_name="status",
    )
    """Whether the test notification succeeded"""


class AiWorkflowsTestWorkflowResponse(sgqlc.types.Type):
    """Test workflow mutation response including errors"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "notification_responses", "status")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsTestResponseError")),
        graphql_name="errors",
    )
    """A list of errors that occurred while performing the test workflow
    action
    """

    notification_responses = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AiWorkflowsTestNotificationResponse)),
        graphql_name="notificationResponses",
    )
    """List of responses by channel id"""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsTestResponseStatus), graphql_name="status"
    )
    """Whether the test was a success or not"""


class AiWorkflowsUpdateWorkflowResponse(sgqlc.types.Type):
    """Update workflow mutation response including errors"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "workflow")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsUpdateResponseError"))
        ),
        graphql_name="errors",
    )
    """A list of errors that occurred while performing the update
    workflow action
    """

    workflow = sgqlc.types.Field("AiWorkflowsWorkflow", graphql_name="workflow")
    """Successfully updated workflow"""


class AiWorkflowsWorkflow(sgqlc.types.Type):
    """Workflow object"""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_at",
        "destination_configurations",
        "destinations_enabled",
        "enrichments",
        "enrichments_enabled",
        "id",
        "issues_filter",
        "last_run",
        "muting_rules_handling",
        "name",
        "updated_at",
        "workflow_enabled",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """Account Id of this Workflow"""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """The time the Workflow was created"""

    destination_configurations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AiWorkflowsDestinationConfiguration)
            )
        ),
        graphql_name="destinationConfigurations",
    )
    """Specifies where to send the notifications"""

    destinations_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="destinationsEnabled"
    )
    """Are Destinations enabled"""

    enrichments = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiWorkflowsEnrichment))
        ),
        graphql_name="enrichments",
    )
    """List of enrichments that are attached to the notifications"""

    enrichments_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="enrichmentsEnabled"
    )
    """Are Enrichments enabled"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Workflow Id"""

    issues_filter = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsFilter), graphql_name="issuesFilter"
    )
    """Specifies which issues the workflow will handle"""

    last_run = sgqlc.types.Field(DateTime, graphql_name="lastRun")
    """Last time a notification was sent regarding this workflow"""

    muting_rules_handling = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsMutingRulesHandling),
        graphql_name="mutingRulesHandling",
    )
    """Describes how to handle muted issues"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the Workflow"""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )
    """The time the Workflow was last updated"""

    workflow_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="workflowEnabled"
    )
    """Is Workflow enabled"""


class AiWorkflowsWorkflows(sgqlc.types.Type):
    """Workflows query response"""

    __schema__ = nerdgraph
    __field_names__ = ("entities", "next_cursor", "total_count")
    entities = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiWorkflowsWorkflow))
        ),
        graphql_name="entities",
    )
    """List of all workflows"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor to get the next batch of results"""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """Total count of all workflows"""


class AlertableEntity(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("alert_severity", "alert_violations", "recent_alert_violations")
    alert_severity = sgqlc.types.Field(
        EntityAlertSeverity, graphql_name="alertSeverity"
    )
    """The current alerting severity of the entity."""

    alert_violations = sgqlc.types.Field(
        sgqlc.types.list_of("EntityAlertViolation"),
        graphql_name="alertViolations",
        args=sgqlc.types.ArgDict(
            (
                (
                    "end_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EpochMilliseconds),
                        graphql_name="endTime",
                        default=None,
                    ),
                ),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EpochMilliseconds),
                        graphql_name="startTime",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Violations on the entity that were open during the specified time
    window. This will return up to 500 violations - if there are more
    in the time window selected, you must narrow the timewindow or
    look at fewer entities.

    Arguments:

    * `end_time` (`EpochMilliseconds!`): End of time window for
      violations.
    * `start_time` (`EpochMilliseconds!`): Start of time window for
      violations.
    """

    recent_alert_violations = sgqlc.types.Field(
        sgqlc.types.list_of("EntityAlertViolation"),
        graphql_name="recentAlertViolations",
        args=sgqlc.types.ArgDict(
            (("count", sgqlc.types.Arg(Int, graphql_name="count", default=10)),)
        ),
    )
    """Recent violations on the entity.

    Arguments:

    * `count` (`Int`): The desired number of alert violations to be
      returned. (default: `10`)
    """


class AlertableEntityOutline(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("alert_severity",)
    alert_severity = sgqlc.types.Field(
        EntityAlertSeverity, graphql_name="alertSeverity"
    )
    """The current alerting severity of the entity."""


class AlertsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "muting_rule",
        "muting_rules",
        "notification_channel",
        "notification_channels",
        "nrql_condition",
        "nrql_conditions_search",
        "policies_search",
        "policy",
    )
    muting_rule = sgqlc.types.Field(
        "AlertsMutingRule",
        graphql_name="mutingRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Retrieve a muting rule for Alerts violations.

    Arguments:

    * `id` (`ID!`): Muting rule identifier.
    """

    muting_rules = sgqlc.types.Field(
        sgqlc.types.list_of("AlertsMutingRule"), graphql_name="mutingRules"
    )
    """List the muting rules for an account."""

    notification_channel = sgqlc.types.Field(
        "AlertsNotificationChannel",
        graphql_name="notificationChannel",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Retrieve a notification channel.

    Arguments:

    * `id` (`ID!`): Notification channel identifier.
    """

    notification_channels = sgqlc.types.Field(
        "AlertsNotificationChannelsResultSet",
        graphql_name="notificationChannels",
        args=sgqlc.types.ArgDict(
            (("cursor", sgqlc.types.Arg(String, graphql_name="cursor", default=None)),)
        ),
    )
    """List the notification channels for an account.

    Arguments:

    * `cursor` (`String`): Cursor for pagination. Supplied by a
      previous `notificationChannels` query.
    """

    nrql_condition = sgqlc.types.Field(
        "AlertsNrqlCondition",
        graphql_name="nrqlCondition",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Retrieve a specific NRQL condition.

    Arguments:

    * `id` (`ID!`): NRQL condition identifier.
    """

    nrql_conditions_search = sgqlc.types.Field(
        "AlertsNrqlConditionsSearchResultSet",
        graphql_name="nrqlConditionsSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "search_criteria",
                    sgqlc.types.Arg(
                        AlertsNrqlConditionsSearchCriteriaInput,
                        graphql_name="searchCriteria",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """List NRQL conditions according to search criteria.

    Arguments:

    * `cursor` (`String`): Cursor for pagination. Supplied by a
      previous `NrqlConditionsSearch` query.
    * `search_criteria` (`AlertsNrqlConditionsSearchCriteriaInput`):
      Search criteria used to filter the returned list NRQL
      conditions.
    """

    policies_search = sgqlc.types.Field(
        "AlertsPoliciesSearchResultSet",
        graphql_name="policiesSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "search_criteria",
                    sgqlc.types.Arg(
                        AlertsPoliciesSearchCriteriaInput,
                        graphql_name="searchCriteria",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """List Alerts policies according to search criteria.

    Arguments:

    * `cursor` (`String`): Cursor for pagination. Supplied by a
      previous `PoliciesSearch` query.
    * `search_criteria` (`AlertsPoliciesSearchCriteriaInput`): Search
      criteria used to filter the returned list of policies.
    """

    policy = sgqlc.types.Field(
        "AlertsPolicy",
        graphql_name="policy",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Retrieve a specific Alerts policy.

    Arguments:

    * `id` (`ID!`): Policy identifier.
    """


class AlertsCampfireNotificationChannelConfig(sgqlc.types.Type):
    """Configuration for Campfire notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("room", "subdomain", "token")
    room = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="room")
    """Room."""

    subdomain = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="subdomain"
    )
    """Subdomain."""

    token = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="token")
    """Authentication token."""


class AlertsConditionDeleteResponse(sgqlc.types.Type):
    """Success response for deleting an Alerts condition."""

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of the deleted Alerts condition."""


class AlertsEmailNotificationChannelConfig(sgqlc.types.Type):
    """Configuration for Email notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("emails", "include_json")
    emails = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="emails",
    )
    """List of email recipients."""

    include_json = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="includeJson"
    )
    """Include details about the violation as a JSON attachment."""


class AlertsHipChatNotificationChannelConfig(sgqlc.types.Type):
    """Configuration for HipChat notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("auth_token", "base_url", "room_id")
    auth_token = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="authToken"
    )
    """Authentication token."""

    base_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="baseUrl")
    """Base URL."""

    room_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="roomId")
    """Room ID."""


class AlertsMutingRule(sgqlc.types.Type):
    """A MutingRule for New Relic Alerts Violations."""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "condition",
        "created_at",
        "created_by",
        "created_by_user",
        "description",
        "enabled",
        "id",
        "name",
        "schedule",
        "status",
        "updated_at",
        "updated_by",
        "updated_by_user",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account id of the MutingRule."""

    condition = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsMutingRuleConditionGroup"), graphql_name="condition"
    )
    """The condition that defines which violations to target."""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """The timestamp of when the MutingRule was created."""

    created_by = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="createdBy")
    """The user id that created the MutingRule."""

    created_by_user = sgqlc.types.Field("UserReference", graphql_name="createdByUser")
    """The user information that created the MutingRule."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the MutingRule."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the MutingRule is enabled"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the MutingRule."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the MutingRule."""

    schedule = sgqlc.types.Field("AlertsMutingRuleSchedule", graphql_name="schedule")
    """The time window when the MutingRule should actively mute
    violations.
    """

    status = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsMutingRuleStatus), graphql_name="status"
    )
    """The status of a MutingRule based on whether it is Enabled and has
    a Schedule.
    """

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )
    """The timestamp of when the MutingRule was last modified."""

    updated_by = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="updatedBy")
    """The user id that last modified the MutingRule."""

    updated_by_user = sgqlc.types.Field("UserReference", graphql_name="updatedByUser")
    """The user information that last modified the MutingRule."""


class AlertsMutingRuleCondition(sgqlc.types.Type):
    """A condition which describes how to target a New Relic Alerts
    Violation.
    """

    __schema__ = nerdgraph
    __field_names__ = ("attribute", "operator", "values")
    attribute = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attribute"
    )
    """The attribute on a violation. Expects one of:  * **accountId** -
    The account id * **conditionId** - The alert condition id *
    **conditionName** - The alert condition name *
    **conditionRunbookUrl** - The alert condition's runbook url *
    **conditionType** - The alert condition type, such as `metric` *
    **entity.guid** - The entity GUID * **nrqlEventType** - The NRQL
    event type * **nrqlQuery** - The NRQL query string * **policyId**
    - The alert policy id * **policyName** - The alert policy name *
    **product** - The target product (e.g., `SYNTHETICS`) *
    **tags.<NAME>** - Arbitrary tags associated with some entity
    (e.g., FACET from a NRQL query, for example `tags.appName` or
    `tags.host`) * **targetId** - The ID of the alerts target *
    **targetName** - The name of the alerts target
    """

    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsMutingRuleConditionOperator), graphql_name="operator"
    )
    """The operator used to compare the attribute's value with the
    supplied value(s).
    """

    values = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(String)), graphql_name="values"
    )
    """The value(s) to compare against the attribute's value."""


class AlertsMutingRuleConditionGroup(sgqlc.types.Type):
    """A group of MutingRuleConditions combined by an operator."""

    __schema__ = nerdgraph
    __field_names__ = ("conditions", "operator")
    conditions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AlertsMutingRuleCondition))
        ),
        graphql_name="conditions",
    )
    """The individual MutingRuleConditions within the group."""

    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsMutingRuleConditionGroupOperator),
        graphql_name="operator",
    )
    """The operator used to combine all the MutingRuleConditions within
    the group.
    """


class AlertsMutingRuleDeleteResponse(sgqlc.types.Type):
    """The success response for deleting a MutingRule."""

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The id of the deleted MutingRule."""


class AlertsMutingRuleSchedule(sgqlc.types.Type):
    """The time window when the MutingRule should actively mute
    violations.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "end_repeat",
        "end_time",
        "next_end_time",
        "next_start_time",
        "repeat",
        "repeat_count",
        "start_time",
        "time_zone",
        "weekly_repeat_days",
    )
    end_repeat = sgqlc.types.Field(DateTime, graphql_name="endRepeat")
    """The datetime stamp when the MutingRule schedule should stop
    repeating. This is in ISO 8601 format with offset.  Example:
    `'2020-07-10T15:00:00-07:00'`  Note: Either `endRepeat` or
    `repeatCount` should be used to end a MutingRule schedule. Both
    fields should not be provided together.
    """

    end_time = sgqlc.types.Field(DateTime, graphql_name="endTime")
    """The datetime stamp representing when the MutingRule should end.
    This is in ISO 8601 format with offset.  Example:
    `'2020-07-10T15:00:00-07:00'`
    """

    next_end_time = sgqlc.types.Field(DateTime, graphql_name="nextEndTime")
    """The datetime stamp representing the next scheduled end of a
    recurring MutingRule. This is in ISO 8601 format with offset.
    Example: `'2020-07-08T14:30:00-07:00'`  Note: If a MutingRule is
    not set to recur, this will match the `endTime` field.
    """

    next_start_time = sgqlc.types.Field(DateTime, graphql_name="nextStartTime")
    """The datetime stamp representing the next scheduled start of a
    recurring MutingRule. This is in ISO 8601 format with offset.
    Example: `'2020-07-08T14:30:00-07:00'`  Note: If a MutingRule is
    not set to recur, this will match the `startTime` field.
    """

    repeat = sgqlc.types.Field(AlertsMutingRuleScheduleRepeat, graphql_name="repeat")
    """The frequency the MutingRule schedule repeats. If the MutingRule
    repeats `WEEKLY`, be sure to set `weeklyRepeatDays`. If the
    MutingRule does not repeat, use `null`.  Example: `DAILY`
    """

    repeat_count = sgqlc.types.Field(Int, graphql_name="repeatCount")
    """The number of times the MutingRule schedule should repeat.  Note:
    Either `repeatCount` or `endRepeat` should be used to end a
    MutingRule schedule. Both fields should not be provided together.
    """

    start_time = sgqlc.types.Field(DateTime, graphql_name="startTime")
    """The datetime stamp representing when the MutingRule should start.
    This is in ISO 8601 format with offset.  Example:
    `'2020-07-08T14:30:00-07:00'`
    """

    time_zone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="timeZone")
    """The time zone that applies to the MutingRule schedule.  Example:
    `'America/Los_Angeles'`  See
    https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
    """

    weekly_repeat_days = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AlertsDayOfWeek)),
        graphql_name="weeklyRepeatDays",
    )
    """The day(s) of the week that a MutingRule should repeat when the
    repeat field is set to `WEEKLY`.  Example: `[MONDAY, WEDNESDAY]`
    """


class AlertsNotificationChannel(sgqlc.types.Interface):
    """A notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("associated_policies", "id", "name", "type")
    associated_policies = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNotificationChannelPoliciesResultSet"),
        graphql_name="associatedPolicies",
    )
    """Policies associated with the channel."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Channel ID."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Channel name."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelType), graphql_name="type"
    )
    """Channel type."""


class AlertsNotificationChannelCreateError(sgqlc.types.Type):
    """The error for creating a notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "error_type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """Error description."""

    error_type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelCreateErrorType),
        graphql_name="errorType",
    )
    """Error type."""


class AlertsNotificationChannelCreateResponse(sgqlc.types.Type):
    """The response for creating a notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("error", "notification_channel")
    error = sgqlc.types.Field(
        AlertsNotificationChannelCreateError, graphql_name="error"
    )
    """Error."""

    notification_channel = sgqlc.types.Field(
        "AlertsNotificationChannelMutation", graphql_name="notificationChannel"
    )
    """Notification channel."""


class AlertsNotificationChannelDeleteError(sgqlc.types.Type):
    """The error for deleting a notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "error_type", "notification_channel_id")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """Error description."""

    error_type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelDeleteErrorType),
        graphql_name="errorType",
    )
    """Error type."""

    notification_channel_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="notificationChannelId"
    )
    """Notification channel ID."""


class AlertsNotificationChannelDeleteResponse(sgqlc.types.Type):
    """The response for deleting a notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("error", "id")
    error = sgqlc.types.Field(
        AlertsNotificationChannelDeleteError, graphql_name="error"
    )
    """Error."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Notification channel ID."""


class AlertsNotificationChannelId(sgqlc.types.Type):
    """A notification channel ID - temporarily until addToPolicy will
    support returning full notification channels.
    """

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Channel ID."""


class AlertsNotificationChannelPoliciesResultSet(sgqlc.types.Type):
    """A result set containing associated policies information for a
    notification channel.
    """

    __schema__ = nerdgraph
    __field_names__ = ("policies", "total_count")
    policies = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AlertsNotificationChannelPolicy"))
        ),
        graphql_name="policies",
    )
    """A set of policies associated with the channel."""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """Total number of policies associated with the channel."""


class AlertsNotificationChannelPolicy(sgqlc.types.Type):
    """Information about a policy associated with a notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Policy ID."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Policy name."""


class AlertsNotificationChannelUpdateError(sgqlc.types.Type):
    """The error for updating a notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "error_type", "notification_channel_id")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """Error description."""

    error_type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelUpdateErrorType),
        graphql_name="errorType",
    )
    """Error type."""

    notification_channel_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="notificationChannelId"
    )
    """Notification channel ID."""


class AlertsNotificationChannelUpdateResponse(sgqlc.types.Type):
    """The response for updating a notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("error", "notification_channel")
    error = sgqlc.types.Field(
        AlertsNotificationChannelUpdateError, graphql_name="error"
    )
    """Error."""

    notification_channel = sgqlc.types.Field(
        "AlertsNotificationChannelMutation", graphql_name="notificationChannel"
    )
    """Notification channel."""


class AlertsNotificationChannelsAddToPolicyError(sgqlc.types.Type):
    """The error for associating notification channels with a policy."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "error_type", "notification_channel_id")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """Error description."""

    error_type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelsAddToPolicyErrorType),
        graphql_name="errorType",
    )
    """Error type."""

    notification_channel_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="notificationChannelId"
    )
    """Notification channel ID."""


class AlertsNotificationChannelsAddToPolicyResponse(sgqlc.types.Type):
    """The response for associating notification channels with a policy."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "notification_channels", "policy_id")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AlertsNotificationChannelsAddToPolicyError)
            )
        ),
        graphql_name="errors",
    )
    """Errors."""

    notification_channels = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AlertsNotificationChannelId))
        ),
        graphql_name="notificationChannels",
    )
    """Notification channels."""

    policy_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="policyId")
    """Policy ID."""


class AlertsNotificationChannelsRemoveFromPolicyError(sgqlc.types.Type):
    """The error for dissociating notification channels from a policy."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "error_type", "notification_channel_id")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """Error description."""

    error_type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelsRemoveFromPolicyErrorType),
        graphql_name="errorType",
    )
    """Error type."""

    notification_channel_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="notificationChannelId"
    )
    """Notification channel ID."""


class AlertsNotificationChannelsRemoveFromPolicyResponse(sgqlc.types.Type):
    """The response for dissociating notification channels from a policy."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "notification_channels", "policy_id")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AlertsNotificationChannelsRemoveFromPolicyError)
            )
        ),
        graphql_name="errors",
    )
    """Errors."""

    notification_channels = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AlertsNotificationChannelId))
        ),
        graphql_name="notificationChannels",
    )
    """Notification channels."""

    policy_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="policyId")
    """Policy ID."""


class AlertsNotificationChannelsResultSet(sgqlc.types.Type):
    """A result set containing multiple notification channels and
    pagination info.
    """

    __schema__ = nerdgraph
    __field_names__ = ("channels", "next_cursor", "total_count")
    channels = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AlertsNotificationChannel))
        ),
        graphql_name="channels",
    )
    """A set of channels."""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor pointing to the end of the current page of channels. Null
    if final page.
    """

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """Total number of channels available."""


class AlertsNrqlCondition(sgqlc.types.Interface):
    """A New Relic Alerts condition that uses a NRQL query to determine
    violations.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "enabled",
        "entity",
        "entity_guid",
        "expiration",
        "id",
        "name",
        "nrql",
        "policy_id",
        "runbook_url",
        "signal",
        "terms",
        "type",
        "violation_time_limit",
        "violation_time_limit_seconds",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """The custom violation description."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the condition is enabled."""

    entity = sgqlc.types.Field("EntityOutline", graphql_name="entity")
    """The Entity associated with the NRQL Condition"""

    entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="entityGuid"
    )
    """The condition's entity GUID"""

    expiration = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNrqlConditionExpiration"), graphql_name="expiration"
    )
    """Settings for how violations are opened or closed when a signal
    expires.
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Condition ID."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the condition."""

    nrql = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNrqlConditionQuery"), graphql_name="nrql"
    )
    """The NRQL query that defines the signal for the condition."""

    policy_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="policyId")
    """Alerts policy ID."""

    runbook_url = sgqlc.types.Field(String, graphql_name="runbookUrl")
    """Runbook URL."""

    signal = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNrqlConditionSignal"), graphql_name="signal"
    )
    """Configuration that defines the signal that the NRQL condition will
    use to evaluate.
    """

    terms = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AlertsNrqlConditionTerms"))
        ),
        graphql_name="terms",
    )
    """List of critical and warning terms for the condition."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionType), graphql_name="type"
    )
    """Type of NRQL condition."""

    violation_time_limit = sgqlc.types.Field(
        AlertsViolationTimeLimit, graphql_name="violationTimeLimit"
    )
    """Deprecated - use violationTimeLimitSeconds for full range of
    values.  Duration after which a violation automatically closes.
    """

    violation_time_limit_seconds = sgqlc.types.Field(
        Seconds, graphql_name="violationTimeLimitSeconds"
    )
    """Duration after which a violation automatically closes in seconds."""


class AlertsNrqlConditionExpiration(sgqlc.types.Type):
    """Settings for how violations are opened or closed when a signal
    expires.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "close_violations_on_expiration",
        "expiration_duration",
        "open_violation_on_expiration",
    )
    close_violations_on_expiration = sgqlc.types.Field(
        Boolean, graphql_name="closeViolationsOnExpiration"
    )
    """Whether to close all open violations when the signal expires.
    Defaults to true.
    """

    expiration_duration = sgqlc.types.Field(Seconds, graphql_name="expirationDuration")
    """The amount of time (in seconds) to wait before considering if the
    signal has been lost. Max value of 172800 (48 hours).
    """

    open_violation_on_expiration = sgqlc.types.Field(
        Boolean, graphql_name="openViolationOnExpiration"
    )
    """Whether to create a new "lost signal" violation to capture that
    the signal expired. Defaults to false.
    """


class AlertsNrqlConditionQuery(sgqlc.types.Type):
    """Information for generating the condition NRQL query. Output from
    the evaluated NRQL query will be compared to the condition terms
    to detect violations.
    """

    __schema__ = nerdgraph
    __field_names__ = ("evaluation_offset", "query")
    evaluation_offset = sgqlc.types.Field(Int, graphql_name="evaluationOffset")
    """Deprecated; superseded by `signal.aggregationMethod` with
    `signal.aggregationDelay` or `signal.aggregationTimer`.  By
    default, we evaluate the NRQL query in one-minute time windows.
    The start time depends on the value you select in the NRQL
    condition's `evaluationOffset`. Evaluation offset cannot be
    greater than 60 minutes.  This value is the number of time windows
    we look back at the aggregated data.  Example: With an
    `evaluationOffset` of 3, the NRQL time window applied to your
    query will be:  `SINCE 3 minutes ago UNTIL 2 minutes ago`
    """

    query = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="query")
    """NRQL syntax that defines the query."""


class AlertsNrqlConditionSignal(sgqlc.types.Type):
    """Configuration that defines the signal that the NRQL condition will
    use to evaluate.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "aggregation_delay",
        "aggregation_method",
        "aggregation_timer",
        "aggregation_window",
        "evaluation_offset",
        "fill_option",
        "fill_value",
        "slide_by",
    )
    aggregation_delay = sgqlc.types.Field(Seconds, graphql_name="aggregationDelay")
    """How long we wait for data that belongs in each aggregation window.
    Depending on your data, a longer delay may increase accuracy but
    delay notifications.  Use `aggregationDelay` with the `EVENT_FLOW`
    and `CADENCE` methods. The maximum delay is **1200 seconds** (20
    minutes) when using `EVENT_FLOW` and **3600 seconds** (60 minutes)
    when using `CADENCE`. In both cases, the minimum delay is **0
    seconds** and the default is **120 seconds**.
    """

    aggregation_method = sgqlc.types.Field(
        AlertsSignalAggregationMethod, graphql_name="aggregationMethod"
    )
    """The method that determines when we consider an aggregation window
    to be complete so that we can evaluate the signal for violations.
    Default is `EVENT_FLOW`.
    """

    aggregation_timer = sgqlc.types.Field(Seconds, graphql_name="aggregationTimer")
    """How long we wait after each data point arrives to make sure we've
    processed the whole batch.  Use `aggregationTimer` with the
    `EVENT_TIMER` method. The timer value can range from **5 seconds**
    to **1200 seconds** (20 minutes); the default is **60 seconds**.
    """

    aggregation_window = sgqlc.types.Field(Seconds, graphql_name="aggregationWindow")
    """Aggregation window controls the duration of the time window used
    to evaluate the NRQL query, in seconds. The value must be at least
    30 seconds, and no more than 15 minutes (900 seconds). Default is
    60 seconds.
    """

    evaluation_offset = sgqlc.types.Field(Int, graphql_name="evaluationOffset")
    """Deprecated; superseded by `signal.aggregationMethod` with
    `signal.aggregationDelay` or `signal.aggregationTimer`.  By
    default, we evaluate the NRQL query in one-minute time windows.
    The start time depends on the value you select in the NRQL
    condition's `evaluationOffset`. Evaluation offset cannot be
    greater than 60 minutes.  This value is the number of time windows
    we look back at the aggregated data.  Example: With an
    `evaluationOffset` of 3 and a 1 minute aggregation window, the
    NRQL time window applied to your query will be:  `SINCE 3 minutes
    ago UNTIL 2 minutes ago`
    """

    fill_option = sgqlc.types.Field(AlertsFillOption, graphql_name="fillOption")
    """Option that determines the type of value that should be used to
    fill gaps (empty windows). Defaults to STATIC.  Outlier NRQL
    conditions may only use NONE.
    """

    fill_value = sgqlc.types.Field(Float, graphql_name="fillValue")
    """If using the static fill option, this the value used for filling.
    Defaults to 0.
    """

    slide_by = sgqlc.types.Field(Seconds, graphql_name="slideBy")
    """This setting gathers data in overlapping time windows to smooth
    the chart line, making it easier to spot trends.  Not used for
    Outlier NRQL conditions.
    """


class AlertsNrqlConditionTerms(sgqlc.types.Type):
    """NRQL condition terms determine when a violation will be opened."""

    __schema__ = nerdgraph
    __field_names__ = (
        "operator",
        "priority",
        "threshold",
        "threshold_duration",
        "threshold_occurrences",
    )
    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionTermsOperator), graphql_name="operator"
    )
    """Operator used to compare against the threshold."""

    priority = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionPriority), graphql_name="priority"
    )
    """Priority determines whether notifications will be sent for
    violations or not.
    """

    threshold = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="threshold")
    """Value that triggers a violation."""

    threshold_duration = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="thresholdDuration"
    )
    """Duration, in seconds, that the condition must violate the
    threshold before creating a violation.
    """

    threshold_occurrences = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionThresholdOccurrences),
        graphql_name="thresholdOccurrences",
    )
    """How many data points must be in violation for the specified
    threshold duration.
    """


class AlertsNrqlConditionsSearchResultSet(sgqlc.types.Type):
    """A collection of NRQL conditions with pagination information."""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "nrql_conditions", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor pointing to the end of the current page of NrqlCondition
    records. Null if final page.
    """

    nrql_conditions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AlertsNrqlCondition))
        ),
        graphql_name="nrqlConditions",
    )
    """A set of `NrqlConditions` for the supplied cursor and criteria."""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """Total number of `NrqlConditions` for the given search criteria."""


class AlertsOpsGenieNotificationChannelConfig(sgqlc.types.Type):
    """Configuration for OpsGenie notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("api_key", "data_center_region", "recipients", "tags", "teams")
    api_key = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="apiKey"
    )
    """API key."""

    data_center_region = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsOpsGenieDataCenterRegion),
        graphql_name="dataCenterRegion",
    )
    """OpsGenie data center region."""

    recipients = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="recipients"
    )
    """List of email recipients."""

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="tags"
    )
    """Tags."""

    teams = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="teams"
    )
    """Teams."""


class AlertsPagerDutyNotificationChannelConfig(sgqlc.types.Type):
    """Configuration for PagerDuty notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("api_key",)
    api_key = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="apiKey"
    )
    """API key."""


class AlertsPoliciesSearchResultSet(sgqlc.types.Type):
    """Collection of policies with pagination information."""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "policies", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor pointing to the end of the current page of policy records.
    Null if final page.
    """

    policies = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null("AlertsPolicy"))),
        graphql_name="policies",
    )
    """Set of policies returned for the supplied cursor and criteria."""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """Total number of policy records for the given search criteria."""


class AlertsPolicy(sgqlc.types.Type):
    """Container for conditions with associated notifications channels."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "id", "incident_preference", "name")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """Account ID of the policy."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Primary key for policies."""

    incident_preference = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsIncidentPreference),
        graphql_name="incidentPreference",
    )
    """Determines how incidents are created for critical violations of
    the conditions contained in the policy.
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Description of the policy."""


class AlertsPolicyDeleteResponse(sgqlc.types.Type):
    """Success response when deleting an Alerts policy."""

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of the deleted policy."""


class AlertsSlackNotificationChannelConfig(sgqlc.types.Type):
    """Configuration for Slack notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("team_channel", "url")
    team_channel = sgqlc.types.Field(String, graphql_name="teamChannel")
    """Slack channel name."""

    url = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="url")
    """Slack channel URL."""


class AlertsUserNotificationChannelConfig(sgqlc.types.Type):
    """Configuration for user notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("user_id",)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="userId")
    """User ID."""


class AlertsVictorOpsNotificationChannelConfig(sgqlc.types.Type):
    """Configuration for VictorOps notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "route_key")
    key = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="key")
    """Key."""

    route_key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="routeKey")
    """Route key."""


class AlertsWebhookBasicAuthInput(sgqlc.types.Type):
    """Webhook basic auth"""

    __schema__ = nerdgraph
    __field_names__ = ("password", "username")
    password = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="password"
    )
    """Password"""

    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="username")
    """Username"""


class AlertsWebhookCustomHeaderInput(sgqlc.types.Type):
    """Webhook header"""

    __schema__ = nerdgraph
    __field_names__ = ("name", "value")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Header name"""

    value = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="value")
    """Header value"""


class AlertsWebhookNotificationChannelConfig(sgqlc.types.Type):
    """Configuration for Webhook notification channel."""

    __schema__ = nerdgraph
    __field_names__ = (
        "base_url",
        "basic_auth",
        "custom_http_headers",
        "custom_payload_body",
        "custom_payload_type",
    )
    base_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="baseUrl")
    """Base URL."""

    basic_auth = sgqlc.types.Field(
        AlertsWebhookBasicAuthInput, graphql_name="basicAuth"
    )
    """Basic auth."""

    custom_http_headers = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AlertsWebhookCustomHeaderInput)),
        graphql_name="customHttpHeaders",
    )
    """Custom HTTP headers."""

    custom_payload_body = sgqlc.types.Field(String, graphql_name="customPayloadBody")
    """Custom payload body."""

    custom_payload_type = sgqlc.types.Field(
        AlertsWebhookCustomPayloadType, graphql_name="customPayloadType"
    )
    """Custom payload type."""


class AlertsXMattersNotificationChannelConfig(sgqlc.types.Type):
    """Configuration for xMatters notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("integration_url",)
    integration_url = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="integrationUrl"
    )
    """Integration URL."""


class ApiAccessActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "key_search")
    key = sgqlc.types.Field(
        "ApiAccessKey",
        graphql_name="key",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "key_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ApiAccessKeyType),
                        graphql_name="keyType",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Fetch a single key by ID and type.

    Arguments:

    * `id` (`ID!`): The `id` of the key. This can be used to identify
      a key without revealing the key itself (used to update and
      delete).
    * `key_type` (`ApiAccessKeyType!`): The type of key.
    """

    key_search = sgqlc.types.Field(
        "ApiAccessKeySearchResult",
        graphql_name="keySearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ApiAccessKeySearchQuery),
                        graphql_name="query",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """A list of keys scoped to the current actor and filter arguments.
    You can read more about managing keys on [this documentation
    page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-
    nerdgraph-manage-license-keys-personal-api-keys).

    Arguments:

    * `cursor` (`String`): The cursor.
    * `query` (`ApiAccessKeySearchQuery!`): The criteria for the key
      search.
    """


class ApiAccessCreateKeyResponse(sgqlc.types.Type):
    """The response of the create keys mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("created_keys", "errors")
    created_keys = sgqlc.types.Field(
        sgqlc.types.list_of("ApiAccessKey"), graphql_name="createdKeys"
    )
    """Lists all successfully created keys."""

    errors = sgqlc.types.Field(
        sgqlc.types.list_of("ApiAccessKeyError"), graphql_name="errors"
    )
    """Lists all errors for keys that could not be created. Each error
    maps to a single key input.
    """


class ApiAccessDeleteKeyResponse(sgqlc.types.Type):
    """The response of the key delete mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("deleted_keys", "errors")
    deleted_keys = sgqlc.types.Field(
        sgqlc.types.list_of("ApiAccessDeletedKey"), graphql_name="deletedKeys"
    )
    """The `id`s of the successfully deleted ingest keys and any errors
    that occurred when deleting keys.
    """

    errors = sgqlc.types.Field(
        sgqlc.types.list_of("ApiAccessKeyError"), graphql_name="errors"
    )
    """Lists all errors for keys that could not be deleted. Each error
    maps to a single key input.
    """


class ApiAccessDeletedKey(sgqlc.types.Type):
    """The deleted key response of the key delete mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(String, graphql_name="id")
    """The `id` of the deleted key."""


class ApiAccessKey(sgqlc.types.Interface):
    """A key for accessing New Relic APIs."""

    __schema__ = nerdgraph
    __field_names__ = ("created_at", "id", "key", "name", "notes", "type")
    created_at = sgqlc.types.Field(EpochSeconds, graphql_name="createdAt")
    """The UNIX epoch when the key was created, in seconds."""

    id = sgqlc.types.Field(ID, graphql_name="id")
    """The ID of the key. This can be used to identify a key without
    revealing the key itself (used to update and delete).
    """

    key = sgqlc.types.Field(String, graphql_name="key")
    """The keystring of the key."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the key. This can be used a short identifier for easy
    reference.
    """

    notes = sgqlc.types.Field(String, graphql_name="notes")
    """Any notes can be attached to a key. This is intended for more a
    more detailed description of the key use if desired.
    """

    type = sgqlc.types.Field(ApiAccessKeyType, graphql_name="type")
    """The type of key, indicating what New Relic APIs it can be used to
    access.
    """


class ApiAccessKeyError(sgqlc.types.Interface):
    """A key error. Each error maps to a single key input."""

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")
    """A message about why the key creation failed."""

    type = sgqlc.types.Field(ApiAccessKeyType, graphql_name="type")
    """The type of the key."""


class ApiAccessKeySearchResult(sgqlc.types.Type):
    """A list of all keys scoped to the current actor."""

    __schema__ = nerdgraph
    __field_names__ = ("count", "keys", "next_cursor")
    count = sgqlc.types.Field(Int, graphql_name="count")
    """The total number of keys found in scope, irrespective of
    pagination.
    """

    keys = sgqlc.types.Field(sgqlc.types.list_of(ApiAccessKey), graphql_name="keys")
    """A list of all keys scoped to the current actor."""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """The next cursor, used for pagination. If a cursor is present, it
    means more keys can be fetched.
    """


class ApiAccessUpdateKeyResponse(sgqlc.types.Type):
    """The response of the update keys mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "updated_keys")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(ApiAccessKeyError), graphql_name="errors"
    )
    """Lists all errors for keys that could not be updated. Each error
    maps to a single key input.
    """

    updated_keys = sgqlc.types.Field(
        sgqlc.types.list_of(ApiAccessKey), graphql_name="updatedKeys"
    )
    """Lists all successfully updated keys."""


class ApmApplicationDeployment(sgqlc.types.Type):
    """An APM application deployment marker"""

    __schema__ = nerdgraph
    __field_names__ = (
        "changelog",
        "description",
        "permalink",
        "revision",
        "timestamp",
        "user",
    )
    changelog = sgqlc.types.Field(String, graphql_name="changelog")
    """The changelog of the deployment"""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of the deployment"""

    permalink = sgqlc.types.Field(String, graphql_name="permalink")
    """A link to view the deployment in the UI"""

    revision = sgqlc.types.Field(String, graphql_name="revision")
    """The revision of the app that was deployed"""

    timestamp = sgqlc.types.Field(EpochMilliseconds, graphql_name="timestamp")
    """The moment the deployment occured"""

    user = sgqlc.types.Field(String, graphql_name="user")
    """The user who triggered the deployment"""


class ApmApplicationEntitySettingsResult(sgqlc.types.Type):
    """The updated settings of an ApmApplicationEntity."""

    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field("ApmApplicationEntity", graphql_name="entity")
    """The updated entity. You can view the updated apdex target in the
    `settings` field of an ApmApplicationEntity.
    """


class ApmApplicationRunningAgentVersions(sgqlc.types.Type):
    """Represents the currently running agent versions in an APM
    Application. An application could be running multiple versions of
    an agent (across different hosts, for example).
    """

    __schema__ = nerdgraph
    __field_names__ = ("max_version", "min_version")
    max_version = sgqlc.types.Field(String, graphql_name="maxVersion")
    """The maximum (newest) language agent version running in the APM
    Application.
    """

    min_version = sgqlc.types.Field(String, graphql_name="minVersion")
    """The minimum (oldest) language agent version running in the APM
    Application.
    """


class ApmApplicationSettings(sgqlc.types.Type):
    """Configuration settings for the APM Application"""

    __schema__ = nerdgraph
    __field_names__ = ("apdex_target", "server_side_config")
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")
    """The current Apdex target setting"""

    server_side_config = sgqlc.types.Field(Boolean, graphql_name="serverSideConfig")
    """State of server-side configuration setting"""


class ApmApplicationSummaryData(sgqlc.types.Type):
    """Summary statistics about the APM App."""

    __schema__ = nerdgraph
    __field_names__ = (
        "apdex_score",
        "error_rate",
        "host_count",
        "instance_count",
        "non_web_response_time_average",
        "non_web_throughput",
        "response_time_average",
        "throughput",
        "web_response_time_average",
        "web_throughput",
    )
    apdex_score = sgqlc.types.Field(Float, graphql_name="apdexScore")
    """The apdex score. For more details on the use of apdex, visit [our
    docs](https://docs.newrelic.com/docs/apm/new-relic-
    apm/apdex/apdex-measure-user-satisfaction).
    """

    error_rate = sgqlc.types.Field(Float, graphql_name="errorRate")
    """The percentage of responses to all transactions with an error."""

    host_count = sgqlc.types.Field(Int, graphql_name="hostCount")
    """The number of hosts this application is running on."""

    instance_count = sgqlc.types.Field(Int, graphql_name="instanceCount")
    """The number of instances of this application running."""

    non_web_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="nonWebResponseTimeAverage"
    )
    """The average response time for non-web transactions in seconds."""

    non_web_throughput = sgqlc.types.Field(Float, graphql_name="nonWebThroughput")
    """The number of non-web transactions per minute."""

    response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="responseTimeAverage"
    )
    """The average response time for all transactions in seconds."""

    throughput = sgqlc.types.Field(Float, graphql_name="throughput")
    """The number of all transactions per minute."""

    web_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="webResponseTimeAverage"
    )
    """The average response time for web transactions in seconds."""

    web_throughput = sgqlc.types.Field(Float, graphql_name="webThroughput")
    """The number of web transactions per minute."""


class ApmBrowserApplicationEntity(sgqlc.types.Interface):
    """The `ApmBrowserApplicationEntity` interface provides detailed
    information for the Browser App injected by an APM Application.
    """

    __schema__ = nerdgraph
    __field_names__ = ("apm_browser_summary",)
    apm_browser_summary = sgqlc.types.Field(
        "ApmBrowserApplicationSummaryData", graphql_name="apmBrowserSummary"
    )


class ApmBrowserApplicationEntityOutline(sgqlc.types.Interface):
    """The `ApmBrowserApplicationEntityOutline` interface provides
    detailed information for the Browser App injected by an APM
    Application.
    """

    __schema__ = nerdgraph
    __field_names__ = ("apm_browser_summary",)
    apm_browser_summary = sgqlc.types.Field(
        "ApmBrowserApplicationSummaryData", graphql_name="apmBrowserSummary"
    )


class ApmBrowserApplicationSummaryData(sgqlc.types.Type):
    """Summary statistics about the Browser App injected by the APM
    Application.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "ajax_request_throughput",
        "ajax_response_time_average",
        "js_error_rate",
        "page_load_throughput",
        "page_load_time_average",
    )
    ajax_request_throughput = sgqlc.types.Field(
        Float, graphql_name="ajaxRequestThroughput"
    )
    """The number of AJAX requests per minute"""

    ajax_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="ajaxResponseTimeAverage"
    )
    """The average AJAX response time in seconds."""

    js_error_rate = sgqlc.types.Field(Float, graphql_name="jsErrorRate")
    """The percentage of page views with a JS error."""

    page_load_throughput = sgqlc.types.Field(Float, graphql_name="pageLoadThroughput")
    """The number of page loads per minute"""

    page_load_time_average = sgqlc.types.Field(
        Float, graphql_name="pageLoadTimeAverage"
    )
    """The average page view time in seconds."""


class ApmExternalServiceSummaryData(sgqlc.types.Type):
    """Summary statistics about an External Service called by an APM App."""

    __schema__ = nerdgraph
    __field_names__ = ("response_time_average", "throughput")
    response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="responseTimeAverage"
    )
    """The average response time for external service calls in seconds."""

    throughput = sgqlc.types.Field(Float, graphql_name="throughput")
    """The number of external service calls per minute."""


class AuthorizationManagementAuthenticationDomain(sgqlc.types.Type):
    """An "authentication domain" is a grouping of New Relic users
    governed by the same user management settings, like how they're
    provisioned (added and updated), how they're authenticated (logged
    in), session settings, and how user upgrades are managed.
    """

    __schema__ = nerdgraph
    __field_names__ = ("groups", "id", "name")
    groups = sgqlc.types.Field(
        sgqlc.types.non_null("AuthorizationManagementGroupSearch"),
        graphql_name="groups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """container for groups enabling cursor based pagination

    Arguments:

    * `cursor` (`String`): the cursor from the previous request, to
      get   the next page
    * `id` (`[ID!]`): an optional list of ids to filter by
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """a value that uniquely identifies this object"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """the name of the object"""


class AuthorizationManagementAuthenticationDomainSearch(sgqlc.types.Type):
    """container for authentication domains enabling cursor based
    pagination
    """

    __schema__ = nerdgraph
    __field_names__ = ("authentication_domains", "next_cursor", "total_count")
    authentication_domains = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AuthorizationManagementAuthenticationDomain)
            )
        ),
        graphql_name="authenticationDomains",
    )
    """containers of users and groups"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """an opaque cursor to supply with subsequent   requests to get the
    next page of results, null if there are no more pages
    """

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """the total number of results"""


class AuthorizationManagementGrantAccessPayload(sgqlc.types.Type):
    """Autogenerated return type of GrantAccess"""

    __schema__ = nerdgraph
    __field_names__ = ("roles",)
    roles = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null("AuthorizationManagementGrantedRole")
            )
        ),
        graphql_name="roles",
    )
    """the roles granted to this group"""


class AuthorizationManagementGrantedRole(sgqlc.types.Type):
    """A Granted Role represents the access given to a group."""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "display_name",
        "id",
        "name",
        "organization_id",
        "role_id",
        "type",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """the account that this role grants access to"""

    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """the name of the object"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """a value that uniquely identifies this object"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """the name of the object"""

    organization_id = sgqlc.types.Field(ID, graphql_name="organizationId")
    """the organization this role grants access to"""

    role_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="roleId")
    """the role that defines this access"""

    type = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="type")
    """the type of the role"""


class AuthorizationManagementGrantedRoleSearch(sgqlc.types.Type):
    """container for roles enabling cursor based pagination"""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "roles", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """an opaque cursor to supply with subsequent   requests to get the
    next page of results, null if there are no more pages
    """

    roles = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AuthorizationManagementGrantedRole)
            )
        ),
        graphql_name="roles",
    )
    """the roles granted to this group"""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """the total number of results"""


class AuthorizationManagementGroup(sgqlc.types.Type):
    """For users on our New Relic One user model, a "group" represents a
    group of users. Putting users in a group allows the managing of
    permissions for multiple users at the same time.
    """

    __schema__ = nerdgraph
    __field_names__ = ("display_name", "id", "roles")
    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )
    """the name of the object"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """a value that uniquely identifies this object"""

    roles = sgqlc.types.Field(
        sgqlc.types.non_null(AuthorizationManagementGrantedRoleSearch),
        graphql_name="roles",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
                (
                    "role_id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="roleId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """container for roles enabling cursor based pagination

    Arguments:

    * `cursor` (`String`): the cursor from the previous request, to
      get   the next page
    * `id` (`[ID!]`): a list of ids to filter returned objects by
    * `role_id` (`[ID!]`): a list of ids to filter returned objects by
    """


class AuthorizationManagementGroupSearch(sgqlc.types.Type):
    """container for groups enabling cursor based pagination"""

    __schema__ = nerdgraph
    __field_names__ = ("groups", "next_cursor", "total_count")
    groups = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AuthorizationManagementGroup))
        ),
        graphql_name="groups",
    )
    """contains roles granted to users's groups"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """an opaque cursor to supply with subsequent   requests to get the
    next page of results, null if there are no more pages
    """

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """the total number of results"""


class AuthorizationManagementOrganizationStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("authentication_domains", "roles")
    authentication_domains = sgqlc.types.Field(
        AuthorizationManagementAuthenticationDomainSearch,
        graphql_name="authenticationDomains",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """list of authentication domains

    Arguments:

    * `cursor` (`String`): the cursor from the previous request, to
      get   the next page
    * `id` (`[ID!]`): an optional list of ids to filter by
    """

    roles = sgqlc.types.Field(
        "AuthorizationManagementRoleSearch",
        graphql_name="roles",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """list of roles

    Arguments:

    * `cursor` (`String`): the cursor from the previous request, to
      get   the next page
    * `id` (`[ID!]`): an optional list of ids to filter by
    """


class AuthorizationManagementRevokeAccessPayload(sgqlc.types.Type):
    """Autogenerated return type of RevokeAccess"""

    __schema__ = nerdgraph
    __field_names__ = ("roles",)
    roles = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AuthorizationManagementGrantedRole)
            )
        ),
        graphql_name="roles",
    )
    """the roles granted to this group"""


class AuthorizationManagementRole(sgqlc.types.Type):
    """a role grants access on an account or organization to groups of
    users
    """

    __schema__ = nerdgraph
    __field_names__ = ("display_name", "id", "name", "scope", "type")
    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """the name of the object"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """a value that uniquely identifies this object"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """the name of the object"""

    scope = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="scope")
    """the scope of the role"""

    type = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="type")
    """the type of the role"""


class AuthorizationManagementRoleSearch(sgqlc.types.Type):
    """container for roles enabling cursor based pagination"""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "roles", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """an opaque cursor to supply with subsequent   requests to get the
    next page of results, null if there are no more pages
    """

    roles = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AuthorizationManagementRole))
        ),
        graphql_name="roles",
    )
    """control the access granted to groups"""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """the total number of results"""


class BrowserApplicationRunningAgentVersions(sgqlc.types.Type):
    """Represents the currently running agent versions in a Browser App.
    An app could be running multiple versions of an agent (across
    different browsers, for example).
    """

    __schema__ = nerdgraph
    __field_names__ = ("max_version", "min_version")
    max_version = sgqlc.types.Field(Int, graphql_name="maxVersion")
    """The maximum (newest) agent version running in the Browser App."""

    min_version = sgqlc.types.Field(Int, graphql_name="minVersion")
    """The minimum (oldest) agent version running in the Browser App."""


class BrowserApplicationSettings(sgqlc.types.Type):
    """Configuration settings for the Browser App"""

    __schema__ = nerdgraph
    __field_names__ = ("apdex_target",)
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")
    """The current Apdex target setting"""


class BrowserApplicationSummaryData(sgqlc.types.Type):
    """Summary statistics about the Browser App."""

    __schema__ = nerdgraph
    __field_names__ = (
        "ajax_request_throughput",
        "ajax_response_time_average",
        "js_error_rate",
        "page_load_throughput",
        "page_load_time_average",
        "page_load_time_median",
        "spa_response_time_average",
        "spa_response_time_median",
    )
    ajax_request_throughput = sgqlc.types.Field(
        Float, graphql_name="ajaxRequestThroughput"
    )
    """The number of AJAX requests per minute"""

    ajax_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="ajaxResponseTimeAverage"
    )
    """The average AJAX response time in seconds."""

    js_error_rate = sgqlc.types.Field(Float, graphql_name="jsErrorRate")
    """The percentage of page views with a JS error."""

    page_load_throughput = sgqlc.types.Field(Float, graphql_name="pageLoadThroughput")
    """The number of page loads per minute"""

    page_load_time_average = sgqlc.types.Field(
        Float, graphql_name="pageLoadTimeAverage"
    )
    """The average page view time in seconds."""

    page_load_time_median = sgqlc.types.Field(Float, graphql_name="pageLoadTimeMedian")
    """The median page view time in seconds."""

    spa_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="spaResponseTimeAverage"
    )
    """The average SPA response time in seconds."""

    spa_response_time_median = sgqlc.types.Field(
        Seconds, graphql_name="spaResponseTimeMedian"
    )
    """The median SPA response time in seconds."""


class CloudAccountFields(sgqlc.types.Type):
    """Cloud integrations related data, including configured integrations
    and all available cloud provider service integrations.
    """

    __schema__ = nerdgraph
    __field_names__ = ("linked_account", "linked_accounts", "provider", "providers")
    linked_account = sgqlc.types.Field(
        "CloudLinkedAccount",
        graphql_name="linkedAccount",
        args=sgqlc.types.ArgDict(
            (("id", sgqlc.types.Arg(Int, graphql_name="id", default=None)),)
        ),
    )
    """Get one linked provider account.

    Arguments:

    * `id` (`Int`): The linked cloud provider account's ID.
    """

    linked_accounts = sgqlc.types.Field(
        sgqlc.types.list_of("CloudLinkedAccount"), graphql_name="linkedAccounts"
    )
    """Get all linked cloud provider accounts."""

    provider = sgqlc.types.Field(
        "CloudProvider",
        graphql_name="provider",
        args=sgqlc.types.ArgDict(
            (("slug", sgqlc.types.Arg(String, graphql_name="slug", default=None)),)
        ),
    )
    """Get one cloud provider by short name.

    Arguments:

    * `slug` (`String`): The cloud provider short name.  Values
      include `aws`, `gcp`, foobar?
    """

    providers = sgqlc.types.Field(
        sgqlc.types.list_of("CloudProvider"), graphql_name="providers"
    )
    """Get all available cloud providers."""


class CloudAccountMutationError(sgqlc.types.Type):
    """Account Mutation Error"""

    __schema__ = nerdgraph
    __field_names__ = (
        "linked_account_id",
        "message",
        "nr_account_id",
        "provider_slug",
        "type",
    )
    linked_account_id = sgqlc.types.Field(Int, graphql_name="linkedAccountId")
    """The passed linked account identifier."""

    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """The error message."""

    nr_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nrAccountId"
    )
    """The passed newrelic account identifier."""

    provider_slug = sgqlc.types.Field(String, graphql_name="providerSlug")
    """The passed provider slug."""

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")
    """The error status."""


class CloudActorFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("linked_accounts",)
    linked_accounts = sgqlc.types.Field(
        sgqlc.types.list_of("CloudLinkedAccount"),
        graphql_name="linkedAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "provider",
                    sgqlc.types.Arg(String, graphql_name="provider", default=None),
                ),
            )
        ),
    )
    """Get all linked cloud provider accounts scoped to the Actor.

    Arguments:

    * `provider` (`String`): The cloud provider short name.
    """


class CloudConfigureIntegrationPayload(sgqlc.types.Type):
    """Autogenerated return type of ConfigureIntegration"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "integrations")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("CloudIntegrationMutationError"))
        ),
        graphql_name="errors",
    )
    """The list of errors."""

    integrations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("CloudIntegration"))
        ),
        graphql_name="integrations",
    )
    """The created/modified service integrations."""


class CloudDisableIntegrationPayload(sgqlc.types.Type):
    """Autogenerated return type of DisableIntegration"""

    __schema__ = nerdgraph
    __field_names__ = ("disabled_integrations", "errors")
    disabled_integrations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("CloudIntegration"))
        ),
        graphql_name="disabledIntegrations",
    )
    """The list of disabled cloud service integrations."""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("CloudIntegrationMutationError"))
        ),
        graphql_name="errors",
    )
    """The list of errors."""


class CloudIntegration(sgqlc.types.Interface):
    """The configuration of a cloud service integration for a linked
    account.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "id",
        "linked_account",
        "name",
        "nr_account_id",
        "service",
        "updated_at",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="createdAt"
    )
    """The object creation date, in epoch (Unix) time"""

    id = sgqlc.types.Field(Int, graphql_name="id")
    """The cloud service integration identifier."""

    linked_account = sgqlc.types.Field(
        "CloudLinkedAccount", graphql_name="linkedAccount"
    )
    """The parent linked account identifier."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The cloud service integration name."""

    nr_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nrAccountId"
    )
    """The parent NewRelic account identifier."""

    service = sgqlc.types.Field("CloudService", graphql_name="service")
    """The cloud service used in the integration."""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="updatedAt"
    )
    """The object last update date, in epoch (Unix) time"""


class CloudIntegrationMutationError(sgqlc.types.Type):
    """Integration Mutation Error"""

    __schema__ = nerdgraph
    __field_names__ = (
        "integration_slug",
        "linked_account_id",
        "message",
        "nr_account_id",
        "type",
    )
    integration_slug = sgqlc.types.Field(String, graphql_name="integrationSlug")
    """The passed integration slug."""

    linked_account_id = sgqlc.types.Field(Int, graphql_name="linkedAccountId")
    """The passed linked account identifier."""

    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """The error message."""

    nr_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nrAccountId"
    )
    """The passed newrelic account identifier."""

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")
    """The error status."""


class CloudLinkAccountPayload(sgqlc.types.Type):
    """Autogenerated return type of LinkAccount"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "linked_accounts")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudAccountMutationError))
        ),
        graphql_name="errors",
    )
    """The list of errors."""

    linked_accounts = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("CloudLinkedAccount"))
        ),
        graphql_name="linkedAccounts",
    )
    """The created Linked accounts."""


class CloudLinkedAccount(sgqlc.types.Type):
    """A cloud account linked to a NewRelic account."""

    __schema__ = nerdgraph
    __field_names__ = (
        "auth_label",
        "created_at",
        "disabled",
        "external_id",
        "id",
        "integration",
        "integrations",
        "metric_collection_mode",
        "name",
        "nr_account_id",
        "provider",
        "updated_at",
    )
    auth_label = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="authLabel"
    )
    """The credential. This is a Role ARN for AWS, an application ID for
    Azure and a service account ID or user account email for GCP.
    """

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="createdAt"
    )
    """The object creation date, in epoch (Unix) time"""

    disabled = sgqlc.types.Field(Boolean, graphql_name="disabled")
    """Indicates whether the account disabled."""

    external_id = sgqlc.types.Field(String, graphql_name="externalId")
    """The cloud account identifier. This is the Account ID in AWS, the
    Subscription ID in Azure and the Project ID in GCP.
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """The linked account identifier in NewRelic."""

    integration = sgqlc.types.Field(
        sgqlc.types.non_null(CloudIntegration),
        graphql_name="integration",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Get details of one cloud service integration.

    Arguments:

    * `id` (`Int!`): The cloud service integration identifier.
    """

    integrations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudIntegration))
        ),
        graphql_name="integrations",
        args=sgqlc.types.ArgDict(
            (
                (
                    "service",
                    sgqlc.types.Arg(String, graphql_name="service", default=None),
                ),
            )
        ),
    )
    """Get details of all cloud service integrations.

    Arguments:

    * `service` (`String`): The cloud integration service slug.
    """

    metric_collection_mode = sgqlc.types.Field(
        sgqlc.types.non_null(CloudMetricCollectionMode),
        graphql_name="metricCollectionMode",
    )
    """Indicate how the metrics will be collected (PUSH/PULL)"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The linked account name in NewRelic."""

    nr_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nrAccountId"
    )
    """The New Relic account identifier."""

    provider = sgqlc.types.Field(
        sgqlc.types.non_null("CloudProvider"), graphql_name="provider"
    )
    """The cloud provider."""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="updatedAt"
    )
    """The object last update date, in epoch (Unix) time"""


class CloudProvider(sgqlc.types.Interface):
    """A cloud services provider."""

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "icon",
        "id",
        "name",
        "service",
        "services",
        "slug",
        "updated_at",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="createdAt"
    )
    """The object creation date, in epoch (Unix) time"""

    icon = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="icon")
    """The cloud provider icon name."""

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """The cloud provider identifier in NewRelic."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The cloud provider name."""

    service = sgqlc.types.Field(
        "CloudService",
        graphql_name="service",
        args=sgqlc.types.ArgDict(
            (
                (
                    "slug",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="slug", default=None
                    ),
                ),
            )
        ),
    )
    """Get details of one cloud provider service.

    Arguments:

    * `slug` (`String!`): The cloud provider short name.
    """

    services = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null("CloudService"))),
        graphql_name="services",
    )
    """Get details of all the cloud provider services available for
    integration.
    """

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="slug")
    """The cloud provider short name."""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="updatedAt"
    )
    """The object last update date, in epoch (Unix) time"""


class CloudRenameAccountPayload(sgqlc.types.Type):
    """Autogenerated return type of RenameAccount"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "linked_accounts")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudAccountMutationError))
        ),
        graphql_name="errors",
    )
    """The list of errors."""

    linked_accounts = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudLinkedAccount))
        ),
        graphql_name="linkedAccounts",
    )
    """The updated linked accounts."""


class CloudService(sgqlc.types.Type):
    """A Cloud Provider service available for monitoring."""

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "icon",
        "id",
        "is_enabled",
        "name",
        "provider",
        "slug",
        "updated_at",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="createdAt"
    )
    """The object creation date, in epoch (Unix) time"""

    icon = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="icon")
    """The cloud service icon name."""

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """The cloud service identifier in NewRelic."""

    is_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isEnabled"
    )
    """Shows if the cloud service is enabled for integrating."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The cloud service name."""

    provider = sgqlc.types.Field(
        sgqlc.types.non_null(CloudProvider), graphql_name="provider"
    )
    """The cloud provider."""

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="slug")
    """The cloud service unique short name."""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="updatedAt"
    )
    """The object last update date, in epoch (Unix) time"""


class CloudUnlinkAccountPayload(sgqlc.types.Type):
    """Autogenerated return type of UnlinkAccount"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "unlinked_accounts")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudAccountMutationError))
        ),
        graphql_name="errors",
    )
    """The list of errors."""

    unlinked_accounts = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudLinkedAccount))
        ),
        graphql_name="unlinkedAccounts",
    )
    """The unlinked accounts."""


class CollectionEntity(sgqlc.types.Interface):
    """A group of entities defined by entity search queries and specific
    GUIDs
    """

    __schema__ = nerdgraph
    __field_names__ = ("collection", "guid")
    collection = sgqlc.types.Field(
        "EntityCollection",
        graphql_name="collection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `name` (`String!`): The name of the collection to fetch.
    """

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")


class CrossAccountNrdbResultContainer(sgqlc.types.Type):
    """A data structure that contains the results of the multi account
    NRDB query along with other capabilities that enhance those
    results.  Direct query results are available through `results`,
    `totalResult` and `otherResult`. The query you made is accessible
    through `nrql`, along with `metadata` about the query itself.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "current_results",
        "metadata",
        "nrql",
        "other_result",
        "previous_results",
        "query_progress",
        "raw_response",
        "results",
        "total_result",
    )
    current_results = sgqlc.types.Field(
        sgqlc.types.list_of(NrdbResult), graphql_name="currentResults"
    )
    """In a `COMPARE WITH` query, the `currentResults` contain the
    results for the current comparison time window.
    """

    metadata = sgqlc.types.Field("NrdbMetadata", graphql_name="metadata")
    """Metadata about the query and result."""

    nrql = sgqlc.types.Field(Nrql, graphql_name="nrql")
    """The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-
    query-language/nrql-resources/nrql-syntax-components-functions)
    query that was executed to yield these results.
    """

    other_result = sgqlc.types.Field(NrdbResult, graphql_name="otherResult")
    """In a `FACET` query, the `otherResult` contains the aggregates
    representing the events _not_ contained in an individual `results`
    facet.
    """

    previous_results = sgqlc.types.Field(
        sgqlc.types.list_of(NrdbResult), graphql_name="previousResults"
    )
    """In a `COMPARE WITH` query, the `previousResults` contain the
    results for the previous comparison time window.
    """

    query_progress = sgqlc.types.Field(
        "NrdbQueryProgress", graphql_name="queryProgress"
    )
    """Metadata about the execution of an asynchronous NRQL query."""

    raw_response = sgqlc.types.Field(NrdbRawResults, graphql_name="rawResponse")
    """The raw query results exactly as they are returned from NRDB.
    NerdGraph provides no additional transformation.
    """

    results = sgqlc.types.Field(sgqlc.types.list_of(NrdbResult), graphql_name="results")
    """The query results. This is a flat list of objects who's structure
    matches the query submitted.
    """

    total_result = sgqlc.types.Field(NrdbResult, graphql_name="totalResult")
    """In a `FACET` query, the `totalResult` contains the aggregates
    representing _all_ the events, whether or not they are contained
    in an individual `results` facet.
    """


class DashboardActorStitchedFields(sgqlc.types.Type):
    """Type defined so its fields will be merged directly into
    NerdGraph's Actor type.
    """

    __schema__ = nerdgraph
    __field_names__ = ("live_urls",)
    live_urls = sgqlc.types.Field(
        "DashboardLiveUrlResult",
        graphql_name="liveUrls",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        DashboardLiveUrlsFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Fetch the list of live URLs created by the API user.

    Arguments:

    * `filter` (`DashboardLiveUrlsFilterInput`): Filter the live URLs
      to fetch.
    """


class DashboardAddWidgetsToPageError(sgqlc.types.Type):
    """Expected errors that can be returned by addWidgetsToPage
    operation.
    """

    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Error description."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardAddWidgetsToPageErrorType), graphql_name="type"
    )
    """Error type."""


class DashboardAddWidgetsToPageResult(sgqlc.types.Type):
    """Result of addWidgetsToPage operation."""

    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardAddWidgetsToPageError), graphql_name="errors"
    )
    """Expected errors while processing request. No errors means
    successful request.
    """


class DashboardAreaWidgetConfiguration(sgqlc.types.Type):
    """Configuration for visualization type 'viz.area'"""

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )
    """NRQL queries."""


class DashboardBarWidgetConfiguration(sgqlc.types.Type):
    """Configuration for visualization type 'viz.bar'"""

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )
    """NRQL queries."""


class DashboardBillboardWidgetConfiguration(sgqlc.types.Type):
    """Configuration for visualization type 'viz.billboard'"""

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries", "thresholds")
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )
    """NRQL queries."""

    thresholds = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardBillboardWidgetThreshold"),
        graphql_name="thresholds",
    )
    """Array of thresholds to categorize the results of the query in
    different groups.
    """


class DashboardBillboardWidgetThreshold(sgqlc.types.Type):
    """Billboard widget threshold."""

    __schema__ = nerdgraph
    __field_names__ = ("alert_severity", "value")
    alert_severity = sgqlc.types.Field(
        DashboardAlertSeverity, graphql_name="alertSeverity"
    )
    """Alert severity."""

    value = sgqlc.types.Field(Float, graphql_name="value")
    """Alert value."""


class DashboardCreateError(sgqlc.types.Type):
    """Expected errors that can be returned by create operation."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Error description."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardCreateErrorType), graphql_name="type"
    )
    """Error type."""


class DashboardCreateResult(sgqlc.types.Type):
    """Result of create operation."""

    __schema__ = nerdgraph
    __field_names__ = ("entity_result", "errors")
    entity_result = sgqlc.types.Field(
        "DashboardEntityResult", graphql_name="entityResult"
    )
    """Dashboard creation result."""

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardCreateError), graphql_name="errors"
    )
    """Expected errors while processing request."""


class DashboardDeleteError(sgqlc.types.Type):
    """Expected error types that can be returned by delete operation."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Error description."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardDeleteErrorType), graphql_name="type"
    )
    """Error type."""


class DashboardDeleteResult(sgqlc.types.Type):
    """Result of delete operation."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "status")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardDeleteError), graphql_name="errors"
    )
    """Expected errors while processing request."""

    status = sgqlc.types.Field(DashboardDeleteResultStatus, graphql_name="status")
    """The status of the attempted delete."""


class DashboardEntityOwnerInfo(sgqlc.types.Type):
    """Dashboard owner"""

    __schema__ = nerdgraph
    __field_names__ = ("email", "user_id")
    email = sgqlc.types.Field(String, graphql_name="email")
    """The email of the dashboard owner"""

    user_id = sgqlc.types.Field(Int, graphql_name="userId")
    """The user ID of the dashboard owner"""


class DashboardEntityResult(sgqlc.types.Type):
    """Public schema - `DashboardEntity` result representation for
    mutations. It's a subset of the `DashboardEntity` that inherits
    from the Entity type, but a complete different type.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_at",
        "description",
        "guid",
        "name",
        "owner",
        "pages",
        "permissions",
        "updated_at",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The New Relic account where the dashboard is created."""

    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")
    """Dashboard creation timestamp."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Brief text describing the dashboard."""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """Unique entity identifier."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the dashboard."""

    owner = sgqlc.types.Field("DashboardOwnerInfo", graphql_name="owner")
    """Information of the user that owns the dashboard."""

    pages = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardPage"), graphql_name="pages"
    )
    """A nested block of all pages belonging to the dashboard."""

    permissions = sgqlc.types.Field(DashboardPermissions, graphql_name="permissions")
    """Dashboard permissions configuration."""

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")
    """Dashboard update timestamp."""


class DashboardLineWidgetConfiguration(sgqlc.types.Type):
    """Configuration for visualization type 'viz.line'"""

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )
    """NRQL queries."""


class DashboardLiveUrl(sgqlc.types.Type):
    """Live URL."""

    __schema__ = nerdgraph
    __field_names__ = ("created_at", "title", "type", "url", "uuid")
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """Creation date."""

    title = sgqlc.types.Field(String, graphql_name="title")
    """Title that describes the source entity that is accessible through
    the public live URL.
    """

    type = sgqlc.types.Field(DashboardLiveUrlType, graphql_name="type")
    """Live URL type."""

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """Public URL."""

    uuid = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="uuid")
    """The unique identifier of the public live URL."""


class DashboardLiveUrlError(sgqlc.types.Type):
    """Live URL error."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of the error."""

    type = sgqlc.types.Field(DashboardLiveUrlErrorType, graphql_name="type")
    """Type of error."""


class DashboardLiveUrlResult(sgqlc.types.Type):
    """Live URL result."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "live_urls")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardLiveUrlError), graphql_name="errors"
    )
    """The list of errors, if any."""

    live_urls = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardLiveUrl), graphql_name="liveUrls"
    )
    """Live URL."""


class DashboardMarkdownWidgetConfiguration(sgqlc.types.Type):
    """Configuration for visualization type 'viz.markdown'"""

    __schema__ = nerdgraph
    __field_names__ = ("text",)
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="text")
    """Markdown content of the widget."""


class DashboardOwnerInfo(sgqlc.types.Type):
    """Information on the owner of a dashboard or page."""

    __schema__ = nerdgraph
    __field_names__ = ("email", "user_id")
    email = sgqlc.types.Field(String, graphql_name="email")
    """New Relic user email."""

    user_id = sgqlc.types.Field(Int, graphql_name="userId")
    """New Relic user ID."""


class DashboardPage(sgqlc.types.Type):
    """Page in a dashboard entity."""

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "description",
        "guid",
        "name",
        "owner",
        "updated_at",
        "widgets",
    )
    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")
    """Page creation timestamp."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Brief text describing the page."""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """Unique entity identifier."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the page."""

    owner = sgqlc.types.Field(DashboardOwnerInfo, graphql_name="owner")
    """Information of the user that owns the page."""

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")
    """Page update timestamp."""

    widgets = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidget"), graphql_name="widgets"
    )
    """A nested block of all widgets belonging to the page."""


class DashboardPieWidgetConfiguration(sgqlc.types.Type):
    """Configuration for visualization type 'viz.pie'"""

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )
    """NRQL queries."""


class DashboardRevokeLiveUrlResult(sgqlc.types.Type):
    """Revoke live URL result."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "uuid")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardLiveUrlError), graphql_name="errors"
    )
    """The list of errors, if any."""

    uuid = sgqlc.types.Field(ID, graphql_name="uuid")
    """The unique identifier of the public live URL if revoked
    successfully, null otherwise.
    """


class DashboardTableWidgetConfiguration(sgqlc.types.Type):
    """Configuration for visualization type 'viz.table'"""

    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )
    """NRQL queries."""


class DashboardUndeleteError(sgqlc.types.Type):
    """Expected error types that can be returned by undelete operation."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Error description."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardUndeleteErrorType), graphql_name="type"
    )
    """Error type."""


class DashboardUndeleteResult(sgqlc.types.Type):
    """Result of undelete operation."""

    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardUndeleteError), graphql_name="errors"
    )
    """Expected errors while processing request. No errors means
    successful request.
    """


class DashboardUpdateError(sgqlc.types.Type):
    """Expected errors that can be returned by update operation."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Error description."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardUpdateErrorType), graphql_name="type"
    )
    """Error type."""


class DashboardUpdatePageError(sgqlc.types.Type):
    """Expected errors that can be returned by updatePage operation."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Error description."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardUpdatePageErrorType), graphql_name="type"
    )
    """Error type."""


class DashboardUpdatePageResult(sgqlc.types.Type):
    """Result of updatePage operation."""

    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardUpdatePageError), graphql_name="errors"
    )
    """Expected errors while processing request. No errors means
    successful request.
    """


class DashboardUpdateResult(sgqlc.types.Type):
    """Result of update operation."""

    __schema__ = nerdgraph
    __field_names__ = ("entity_result", "errors")
    entity_result = sgqlc.types.Field(
        DashboardEntityResult, graphql_name="entityResult"
    )
    """Dashboard update result."""

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardUpdateError), graphql_name="errors"
    )
    """Expected errors while processing request."""


class DashboardUpdateWidgetsInPageError(sgqlc.types.Type):
    """Expected errors that can be returned by updateWidgetsInPage
    operation.
    """

    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Error description."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardUpdateWidgetsInPageErrorType), graphql_name="type"
    )
    """Error type."""


class DashboardUpdateWidgetsInPageResult(sgqlc.types.Type):
    """Result of updateWidgetsInPage operation."""

    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardUpdateWidgetsInPageError), graphql_name="errors"
    )
    """Expected errors while processing request. No errors means
    successful request.
    """


class DashboardWidget(sgqlc.types.Type):
    """Widgets in a Dashboard Page."""

    __schema__ = nerdgraph
    __field_names__ = (
        "configuration",
        "id",
        "layout",
        "linked_entities",
        "raw_configuration",
        "title",
        "visualization",
    )
    configuration = sgqlc.types.Field(
        "DashboardWidgetConfiguration", graphql_name="configuration"
    )
    """Typed widgets are area, bar, billboard, line, markdown, pie, and
    table.
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """ID of the widget."""

    layout = sgqlc.types.Field("DashboardWidgetLayout", graphql_name="layout")
    """The widget's position and size in the dashboard."""

    linked_entities = sgqlc.types.Field(
        sgqlc.types.list_of("EntityOutline"), graphql_name="linkedEntities"
    )
    """Entities related to the widget. Currently only supports one
    Dashboard entity guid, but may allow other cases in the future.
    """

    raw_configuration = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardWidgetRawConfiguration),
        graphql_name="rawConfiguration",
    )
    """Untyped widgets are all other widgets, such as bullet, histogram,
    inventory, etc.
    """

    title = sgqlc.types.Field(String, graphql_name="title")
    """A title for the widget."""

    visualization = sgqlc.types.Field(
        sgqlc.types.non_null("DashboardWidgetVisualization"),
        graphql_name="visualization",
    )
    """Specifies how this widget will be visualized."""


class DashboardWidgetConfiguration(sgqlc.types.Type):
    """Typed configuration for known visualizations. Only one (at most)
    will be populated for a given widget.
    """

    __schema__ = nerdgraph
    __field_names__ = ("area", "bar", "billboard", "line", "markdown", "pie", "table")
    area = sgqlc.types.Field(DashboardAreaWidgetConfiguration, graphql_name="area")
    """Configuration for visualization type 'viz.area' """

    bar = sgqlc.types.Field(DashboardBarWidgetConfiguration, graphql_name="bar")
    """Configuration for visualization type 'viz.bar' """

    billboard = sgqlc.types.Field(
        DashboardBillboardWidgetConfiguration, graphql_name="billboard"
    )
    """Configuration for visualization type 'viz.billboard' """

    line = sgqlc.types.Field(DashboardLineWidgetConfiguration, graphql_name="line")
    """Configuration for visualization type 'viz.line' """

    markdown = sgqlc.types.Field(
        DashboardMarkdownWidgetConfiguration, graphql_name="markdown"
    )
    """Configuration for visualization type 'viz.markdown' """

    pie = sgqlc.types.Field(DashboardPieWidgetConfiguration, graphql_name="pie")
    """Configuration for visualization type 'viz.pie' """

    table = sgqlc.types.Field(DashboardTableWidgetConfiguration, graphql_name="table")
    """Configuration for visualization type 'viz.table' """


class DashboardWidgetLayout(sgqlc.types.Type):
    """Widget layout."""

    __schema__ = nerdgraph
    __field_names__ = ("column", "height", "row", "width")
    column = sgqlc.types.Field(Int, graphql_name="column")
    """Column position of widget from top left, starting at 1."""

    height = sgqlc.types.Field(Int, graphql_name="height")
    """Height of the widget. Valid values are 1 to 12 inclusive. Defaults
    to 3.
    """

    row = sgqlc.types.Field(Int, graphql_name="row")
    """Row position of widget from top left, starting at 1."""

    width = sgqlc.types.Field(Int, graphql_name="width")
    """Width of the widget. Valid values are 1 to 12 inclusive. Defaults
    to 4.
    """


class DashboardWidgetNrqlQuery(sgqlc.types.Type):
    """Single NRQL query for a widget."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "query")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """New Relic account ID to issue the query against."""

    query = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="query")
    """NRQL formatted query."""


class DashboardWidgetVisualization(sgqlc.types.Type):
    """Visualization configuration."""

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(String, graphql_name="id")
    """This field can either have a known type like `viz.area` or
    `<nerdpack-id>.<visualization-id>` in the case of custom
    visualizations.
    """


class DataDictionaryAttribute(sgqlc.types.Type):
    """Attribute object that contains data about the attribute"""

    __schema__ = nerdgraph
    __field_names__ = ("definition", "docs_url", "name", "units")
    definition = sgqlc.types.Field(
        sgqlc.types.non_null(String),
        graphql_name="definition",
        args=sgqlc.types.ArgDict(
            (
                (
                    "format",
                    sgqlc.types.Arg(
                        DataDictionaryTextFormat, graphql_name="format", default="PLAIN"
                    ),
                ),
            )
        ),
    )
    """Description of what this attribute represents, how it's measured,
    etc

    Arguments:

    * `format` (`DataDictionaryTextFormat`): Specify the text format
      for the definition (default: `PLAIN`)
    """

    docs_url = sgqlc.types.Field(String, graphql_name="docsUrl")
    """URL of this attribute on the New Relic docs site"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The official name of this attribute"""

    units = sgqlc.types.Field("DataDictionaryUnit", graphql_name="units")
    """Unit this attribute is measuring (if applicable)"""


class DataDictionaryDataSource(sgqlc.types.Type):
    """The source generating the event data"""

    __schema__ = nerdgraph
    __field_names__ = ("name",)
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the source"""


class DataDictionaryDocsStitchedFields(sgqlc.types.Type):
    """Event data definitions, where they come from, and information
    about the attributes they contain
    """

    __schema__ = nerdgraph
    __field_names__ = ("events",)
    events = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("DataDictionaryEvent"))
        ),
        graphql_name="events",
        args=sgqlc.types.ArgDict(
            (
                (
                    "names",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(String), graphql_name="names", default=None
                    ),
                ),
            )
        ),
    )
    """List of events

    Arguments:

    * `names` (`[String]`): The official name of this event
    """


class DataDictionaryEvent(sgqlc.types.Type):
    """Event object that contains data about the event and its attributes"""

    __schema__ = nerdgraph
    __field_names__ = ("attributes", "data_sources", "definition", "name")
    attributes = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(DataDictionaryAttribute))
        ),
        graphql_name="attributes",
    )
    """List of attributes in this event"""

    data_sources = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(DataDictionaryDataSource))
        ),
        graphql_name="dataSources",
    )
    """List of places where this event comes from"""

    definition = sgqlc.types.Field(
        String,
        graphql_name="definition",
        args=sgqlc.types.ArgDict(
            (
                (
                    "format",
                    sgqlc.types.Arg(
                        DataDictionaryTextFormat, graphql_name="format", default="PLAIN"
                    ),
                ),
            )
        ),
    )
    """A description of the event

    Arguments:

    * `format` (`DataDictionaryTextFormat`): Specify the text format
      for the definition (default: `PLAIN`)
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The official name of this event"""


class DataDictionaryUnit(sgqlc.types.Type):
    """The unit of measurement"""

    __schema__ = nerdgraph
    __field_names__ = ("label",)
    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="label")
    """Name and abbreviation (if applicable) of the unit"""


class DataManagementAccountLimit(sgqlc.types.Type):
    """Account Limit"""

    __schema__ = nerdgraph
    __field_names__ = (
        "category",
        "description",
        "documentation_link",
        "limit_reached_behavior_description",
        "name",
        "time_interval",
        "unit",
        "value",
    )
    category = sgqlc.types.Field(DataManagementCategory, graphql_name="category")
    """Category for the limit"""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of the uses for this limit"""

    documentation_link = sgqlc.types.Field(String, graphql_name="documentationLink")
    """Link to documentation for this limit"""

    limit_reached_behavior_description = sgqlc.types.Field(
        String, graphql_name="limitReachedBehaviorDescription"
    )
    """What happens when the limit is reached?"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Unique name for the limit"""

    time_interval = sgqlc.types.Field(Nrql, graphql_name="timeInterval")
    """Time between limit resets"""

    unit = sgqlc.types.Field(DataManagementUnit, graphql_name="unit")
    """Unit for the limit value"""

    value = sgqlc.types.Field(Int, graphql_name="value")
    """Value for the limit"""


class DataManagementAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "customizable_retention",
        "event_retention_policies",
        "event_retention_rule",
        "event_retention_rules",
        "feature_settings",
        "limits",
        "retention_audit",
        "retentions",
    )
    customizable_retention = sgqlc.types.Field(
        "DataManagementCustomizableRetention", graphql_name="customizableRetention"
    )
    """List all customizable event namespaces"""

    event_retention_policies = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementRenderedRetention"),
        graphql_name="eventRetentionPolicies",
    )
    """Get the event retention policies for an account"""

    event_retention_rule = sgqlc.types.Field(
        "DataManagementRule",
        graphql_name="eventRetentionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "namespace",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="namespace",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Get the event retention rule for a namespace on an account, if it
    exists

    Arguments:

    * `namespace` (`String!`): Namespace of the requested event
      retention rule
    """

    event_retention_rules = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementRule"), graphql_name="eventRetentionRules"
    )
    """List all the event retention rules for an account"""

    feature_settings = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementFeatureSetting"),
        graphql_name="featureSettings",
    )
    """Query for all feature settings"""

    limits = sgqlc.types.Field(
        sgqlc.types.list_of(DataManagementAccountLimit), graphql_name="limits"
    )
    """Query for all limits"""

    retention_audit = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementRetentionValues"),
        graphql_name="retentionAudit",
    )
    """Audit of retention values per namespace for an account"""

    retentions = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementRetention"), graphql_name="retentions"
    )
    """List of all namespaces"""


class DataManagementAppliedRules(sgqlc.types.Type):
    """Applied rules"""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "retention_in_days")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The account id for namespace rule"""

    retention_in_days = sgqlc.types.Field(Int, graphql_name="retentionInDays")
    """Length of time data will be retained (in days)"""


class DataManagementBulkCopyResult(sgqlc.types.Type):
    """Result for bulk retention copy to an account"""

    __schema__ = nerdgraph
    __field_names__ = ("failure", "success")
    failure = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name="failure")
    """The failure destination accounts"""

    success = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name="success")
    """The successful destination accounts"""


class DataManagementCustomizableRetention(sgqlc.types.Type):
    """Wrapper object for customizable retention namespaces"""

    __schema__ = nerdgraph
    __field_names__ = ("event_namespaces",)
    event_namespaces = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementEventNamespaces"),
        graphql_name="eventNamespaces",
    )
    """List of customizable event namespaces"""


class DataManagementEventNamespaces(sgqlc.types.Type):
    """Event namespace"""

    __schema__ = nerdgraph
    __field_names__ = ("max_retention_in_days", "min_retention_in_days", "namespace")
    max_retention_in_days = sgqlc.types.Field(Int, graphql_name="maxRetentionInDays")
    """The upper limit for the retention value"""

    min_retention_in_days = sgqlc.types.Field(Int, graphql_name="minRetentionInDays")
    """The lower limit for the retention value"""

    namespace = sgqlc.types.Field(String, graphql_name="namespace")
    """The name of a namespace"""


class DataManagementFeatureSetting(sgqlc.types.Type):
    """Feature Setting"""

    __schema__ = nerdgraph
    __field_names__ = ("enabled", "key", "locked", "name")
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")
    """Enabled state for the feature setting"""

    key = sgqlc.types.Field(String, graphql_name="key")
    """Key to identify the feature setting"""

    locked = sgqlc.types.Field(Boolean, graphql_name="locked")
    """Locked state for the feature setting"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Unique name for the feature setting"""


class DataManagementNamespaceLevelRetention(sgqlc.types.Type):
    """Namespace level retention"""

    __schema__ = nerdgraph
    __field_names__ = ("retention_in_days",)
    retention_in_days = sgqlc.types.Field(Int, graphql_name="retentionInDays")
    """Length of time data will be retained (in days)"""


class DataManagementRenderedRetention(sgqlc.types.Type):
    """An account's current retention values for a namespace"""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "namespace",
        "namespace_level_retention",
        "updated_at",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The account id for the event retention"""

    namespace = sgqlc.types.Field(String, graphql_name="namespace")
    """The namespace for the event retention"""

    namespace_level_retention = sgqlc.types.Field(
        DataManagementNamespaceLevelRetention, graphql_name="namespaceLevelRetention"
    )
    """Base retention value for an event namespace"""

    updated_at = sgqlc.types.Field(EpochSeconds, graphql_name="updatedAt")
    """The UNIX timestamp when the retention was last updated"""


class DataManagementRetention(sgqlc.types.Type):
    """Wrapper object for retention namespaces"""

    __schema__ = nerdgraph
    __field_names__ = (
        "customizable",
        "max_retention_in_days",
        "min_retention_in_days",
        "namespace",
        "source",
    )
    customizable = sgqlc.types.Field(Boolean, graphql_name="customizable")
    """Is this field customizable?"""

    max_retention_in_days = sgqlc.types.Field(Int, graphql_name="maxRetentionInDays")
    """The upper limit for the retention value"""

    min_retention_in_days = sgqlc.types.Field(Int, graphql_name="minRetentionInDays")
    """The lower limit for the retention value"""

    namespace = sgqlc.types.Field(String, graphql_name="namespace")
    """The name of a namespace"""

    source = sgqlc.types.Field(String, graphql_name="source")
    """The source of the namespace"""


class DataManagementRetentionValues(sgqlc.types.Type):
    """Wrapper object for namespace retention values"""

    __schema__ = nerdgraph
    __field_names__ = ("applied_rules", "namespace", "subscription_retention_in_days")
    applied_rules = sgqlc.types.Field(
        sgqlc.types.list_of(DataManagementAppliedRules), graphql_name="appliedRules"
    )
    """List of rules applied to a namespace"""

    namespace = sgqlc.types.Field(String, graphql_name="namespace")
    """The name of a namespace"""

    subscription_retention_in_days = sgqlc.types.Field(
        Int, graphql_name="subscriptionRetentionInDays"
    )
    """The retention value from the subscription (in days)"""


class DataManagementRule(sgqlc.types.Type):
    """A rule for setting a data retention value for a particular event
    namespace on an account
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "created_by_id",
        "deleted_at",
        "deleted_by_id",
        "id",
        "namespace",
        "retention_in_days",
    )
    created_at = sgqlc.types.Field(EpochSeconds, graphql_name="createdAt")
    """The UNIX timestamp when the event retention rule went into effect"""

    created_by_id = sgqlc.types.Field(Int, graphql_name="createdById")
    """The New Relic ID of the user who created the event retention rule"""

    deleted_at = sgqlc.types.Field(EpochSeconds, graphql_name="deletedAt")
    """The UNIX timestamp when the event retention rule was deleted"""

    deleted_by_id = sgqlc.types.Field(Int, graphql_name="deletedById")
    """The New Relic ID of the user who deleted the event retention rule"""

    id = sgqlc.types.Field(ID, graphql_name="id")
    """The event retention rule's unique identifier"""

    namespace = sgqlc.types.Field(String, graphql_name="namespace")
    """The namespace the event retention rule applies to"""

    retention_in_days = sgqlc.types.Field(Int, graphql_name="retentionInDays")
    """Length of time data will be retained (in days)"""


class DateTimeWindow(sgqlc.types.Type):
    """Represents a date time window."""

    __schema__ = nerdgraph
    __field_names__ = ("end_time", "start_time")
    end_time = sgqlc.types.Field(DateTime, graphql_name="endTime")
    """The end date and time expressed as an ISO8601 formatted string"""

    start_time = sgqlc.types.Field(DateTime, graphql_name="startTime")
    """The start date and time expressed as an ISO8601 formatted string"""


class DistributedTracingActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("trace",)
    trace = sgqlc.types.Field(
        "DistributedTracingTrace",
        graphql_name="trace",
        args=sgqlc.types.ArgDict(
            (
                (
                    "timestamp",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="timestamp", default=None
                    ),
                ),
                (
                    "trace_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="traceId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Look up the details of a trace based upon the traceId and optional
    start time.

    Arguments:

    * `timestamp` (`EpochMilliseconds`): The start time of the trace.
    * `trace_id` (`String!`): Unique identifier shared by all spans
      within a single trace.
    """


class DistributedTracingEntityTracingSummary(sgqlc.types.Type):
    """Details tracing summary data for the provided `EntityGuid` that
    occurred during the provided `startTime` and `endTime`
    """

    __schema__ = nerdgraph
    __field_names__ = ("error_trace_count", "percent_of_all_error_traces")
    error_trace_count = sgqlc.types.Field(Int, graphql_name="errorTraceCount")
    """The number of traces where this entity produced an error"""

    percent_of_all_error_traces = sgqlc.types.Field(
        Float, graphql_name="percentOfAllErrorTraces"
    )
    """The percentage of error traces produced by this entity compared to
    all error traces in the system
    """


class DistributedTracingSpan(sgqlc.types.Type):
    """The primary building block of a distributed trace.  An individual
    unit of work.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "attributes",
        "client_type",
        "duration_ms",
        "entity_guid",
        "id",
        "name",
        "parent_id",
        "process_boundary",
        "span_anomalies",
        "timestamp",
        "trace_id",
    )
    attributes = sgqlc.types.Field(
        DistributedTracingSpanAttributes, graphql_name="attributes"
    )
    """All attributes for this span. This field is a map of string keys
    to attributes values.
    """

    client_type = sgqlc.types.Field(
        DistributedTracingSpanClientType, graphql_name="clientType"
    )
    """When the span represents a call to another entity, clientType
    indicates the type of the entity that was called.
    """

    duration_ms = sgqlc.types.Field(Milliseconds, graphql_name="durationMs")
    """The duration of this span in milliseconds."""

    entity_guid = sgqlc.types.Field(String, graphql_name="entityGuid")
    """Unique identifier for the entity that created this span. This
    value has a corresponding entry in the entities field of the
    trace.
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")
    """Unique identifier for this span."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of this span."""

    parent_id = sgqlc.types.Field(String, graphql_name="parentId")
    """The identifier of the caller of this span (null if this is the
    root span).
    """

    process_boundary = sgqlc.types.Field(
        sgqlc.types.non_null(DistributedTracingSpanProcessBoundary),
        graphql_name="processBoundary",
    )
    """The position of a span with respect to the boundaries between
    processes in the trace.
    """

    span_anomalies = sgqlc.types.Field(
        sgqlc.types.list_of("DistributedTracingSpanAnomaly"),
        graphql_name="spanAnomalies",
    )
    """Anomalies detected for this span, compared to similar spans that
    occurred over the previous hours before this span occurred.
    """

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="timestamp"
    )
    """Epoch milliseconds timestamp represents this span's start time."""

    trace_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="traceId")
    """Unique identifier shared by all spans within a single trace."""


class DistributedTracingSpanAnomaly(sgqlc.types.Type):
    """An anomaly detected with respect to an attribute of a span."""

    __schema__ = nerdgraph
    __field_names__ = ("anomalous_value", "anomaly_type", "average_measure")
    anomalous_value = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="anomalousValue"
    )
    """The value of the span attribute which was detected as being
    anomalous.
    """

    anomaly_type = sgqlc.types.Field(
        sgqlc.types.non_null(DistributedTracingSpanAnomalyType),
        graphql_name="anomalyType",
    )
    """The attribute of the span which was detected as being anomalous."""

    average_measure = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="averageMeasure"
    )
    """The average value for the attribute on similar spans."""


class DistributedTracingSpanConnection(sgqlc.types.Type):
    """A relationship between a parent and child span."""

    __schema__ = nerdgraph
    __field_names__ = ("child", "parent")
    child = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="child")
    """The span identifier of the child for this connection."""

    parent = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="parent")
    """The span identifier of the parent for this connection."""


class DistributedTracingTrace(sgqlc.types.Type):
    """A collection of spans with context describing those spans.  The
    trace represents the complete processing of a request.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "backend_duration_ms",
        "duration_ms",
        "entities",
        "entity_count",
        "id",
        "span_connections",
        "spans",
        "timestamp",
    )
    backend_duration_ms = sgqlc.types.Field(
        Milliseconds, graphql_name="backendDurationMs"
    )
    """The duration in milliseconds for the back-end part of this trace
    (not from a client such as a Browser application)
    """

    duration_ms = sgqlc.types.Field(Milliseconds, graphql_name="durationMs")
    """The total duration of this trace in milliseconds."""

    entities = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("EntityOutline"))
        ),
        graphql_name="entities",
    )
    """All entities that are part of this trace."""

    entity_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="entityCount"
    )
    """The number of entities that are part of this trace."""

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")
    """Unique identifier for this trace."""

    span_connections = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(DistributedTracingSpanConnection)),
        graphql_name="spanConnections",
    )
    """Parent/child IDs that represent all of the span relationships
    within this trace.
    """

    spans = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(DistributedTracingSpan))
        ),
        graphql_name="spans",
    )
    """Spans associated with this trace. The maximum number of spans
    returned is limited to 10_000. This could be less than the actual
    number of spans sent for the trace.
    """

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="timestamp"
    )
    """Epoch milliseconds timestamp represents this trace's start time."""


class DocumentationFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "agent_features",
        "agent_releases",
        "data_dictionary",
        "open_installation",
        "time_zones",
        "whats_new",
    )
    agent_features = sgqlc.types.Field(
        sgqlc.types.list_of(AgentFeatures),
        graphql_name="agentFeatures",
        args=sgqlc.types.ArgDict(
            (
                (
                    "agent_name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AgentFeaturesFilter),
                        graphql_name="agentName",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """View a list of all features for a chosen Agent

    Arguments:

    * `agent_name` (`AgentFeaturesFilter!`): The Agent to view data
      for
    """

    agent_releases = sgqlc.types.Field(
        sgqlc.types.list_of(AgentRelease),
        graphql_name="agentReleases",
        args=sgqlc.types.ArgDict(
            (
                (
                    "agent_name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AgentReleasesFilter),
                        graphql_name="agentName",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """View a list of all releases for a chosen Agent

    Arguments:

    * `agent_name` (`AgentReleasesFilter!`): The Agent to view data
      for
    """

    data_dictionary = sgqlc.types.Field(
        DataDictionaryDocsStitchedFields, graphql_name="dataDictionary"
    )
    """This field provides access to DataDictionary data."""

    open_installation = sgqlc.types.Field(
        "OpenInstallationDocsStitchedFields", graphql_name="openInstallation"
    )
    """This field provides access to OpenInstallation data."""

    time_zones = sgqlc.types.Field(
        sgqlc.types.list_of("TimeZoneInfo"), graphql_name="timeZones"
    )
    """A list of all the Time Zones from the IANA tz database"""

    whats_new = sgqlc.types.Field("WhatsNewDocsStitchedFields", graphql_name="whatsNew")
    """This field provides access to WhatsNew data."""


class DomainType(sgqlc.types.Type):
    """Details about an entity type"""

    __schema__ = nerdgraph
    __field_names__ = ("domain", "type")
    domain = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="domain")
    """The domain of the entity.  The domain must be a value matching
    /[A-Z][A-Z0-9_]{2,14}/.
    """

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")
    """The type of the entity.  The type must be a value matching
    /[A-Z][A-Z0-9_]{2,49}/.  Some examples are APPLICATION, HOST or
    CONTAINER.
    """


class EdgeAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("tracing",)
    tracing = sgqlc.types.Field("EdgeTracing", graphql_name="tracing")
    """Provides access to Tracing data."""


class EdgeCreateSpanAttributeRuleResponseError(sgqlc.types.Type):
    """Description of errors that may occur while attempting to create a
    span attribute trace filter rule.
    """

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """Error message, with further detail to help resolve the issue."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeCreateSpanAttributeRuleResponseErrorType),
        graphql_name="type",
    )
    """Error that may occur while attempting to create a trace filter
    rule.
    """


class EdgeCreateSpanAttributeRulesResponse(sgqlc.types.Type):
    """Successfully created span attribute trace filter rule, or one or
    more error responses if there were issues.
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "rules")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(EdgeCreateSpanAttributeRuleResponseError),
        graphql_name="errors",
    )
    """Errors that may occur when creating a `SpanAttributeTraceFilter`.
    Defaults to `null` in case of success.
    """

    rules = sgqlc.types.Field(
        sgqlc.types.list_of("EdgeSpanAttributeRule"), graphql_name="rules"
    )
    """The trace filter rules that were created. Defaults to `null` in
    case of failure.
    """


class EdgeCreateTraceFilterRuleResponses(sgqlc.types.Type):
    """Array of responses, one for each span attribute trace filter rule
    creation request.
    """

    __schema__ = nerdgraph
    __field_names__ = ("span_attribute_rules",)
    span_attribute_rules = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeCreateSpanAttributeRulesResponse),
        graphql_name="spanAttributeRules",
    )
    """Span attribute trace filter rule creation response"""


class EdgeCreateTraceObserverResponse(sgqlc.types.Type):
    """Successfully created trace observers, or one or more error
    responses if there were issues.
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "trace_observer")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EdgeCreateTraceObserverResponseError"),
        graphql_name="errors",
    )
    """Errors that may occur when creating a `TraceObserver`. Defaults to
    `null` in case of success.
    """

    trace_observer = sgqlc.types.Field(
        "EdgeTraceObserver", graphql_name="traceObserver"
    )
    """The trace observer defined in `CreateTraceObserverInput`. Defaults
    to `null` in case of failure.
    """


class EdgeCreateTraceObserverResponseError(sgqlc.types.Type):
    """Description of errors that may occur while attempting to create a
    trace observer.
    """

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """Error message, with further detail to help resolve the issue."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeCreateTraceObserverResponseErrorType),
        graphql_name="type",
    )
    """Error that may occur while attempting to create a trace observer."""


class EdgeCreateTraceObserverResponses(sgqlc.types.Type):
    """Array of responses, one for each trace observer creation request."""

    __schema__ = nerdgraph
    __field_names__ = ("responses",)
    responses = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EdgeCreateTraceObserverResponse))
        ),
        graphql_name="responses",
    )
    """Array of trace observer creation responses, one for each
    `CreateTraceObserverInput`.
    """


class EdgeDataSource(sgqlc.types.Type):
    """A data source (i.e., New Relic entity) that is associated with
    this trace observer. Currently, we support adding Browser, Lambda,
    and Mobile entities as data sources.
    """

    __schema__ = nerdgraph
    __field_names__ = ("entity", "status")
    entity = sgqlc.types.Field("EntityOutline", graphql_name="entity")
    """The entity representing this data source."""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeDataSourceStatusType), graphql_name="status"
    )
    """The status of whether data is being sent to this trace observer
    for this data source.
    """


class EdgeDataSourceGroup(sgqlc.types.Type):
    """A group of data sources that are associated with this trace
    observer.
    """

    __schema__ = nerdgraph
    __field_names__ = ("data_sources",)
    data_sources = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EdgeDataSource))),
        graphql_name="dataSources",
    )
    """The list of data sources in this group."""


class EdgeDeleteSpanAttributeRuleResponse(sgqlc.types.Type):
    """Successfully deleted span attribute trace filter rule, or one or
    more error responses if there were issues.
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EdgeDeleteSpanAttributeRuleResponseError"),
        graphql_name="errors",
    )
    """Errors that may occur when deleting a `SpanAttributeRule`.
    Defaults to `null` in case of success.
    """

    rule = sgqlc.types.Field("EdgeSpanAttributeRule", graphql_name="rule")
    """The trace filter rule that was deleted. Defaults to `null` in case
    of failure.
    """


class EdgeDeleteSpanAttributeRuleResponseError(sgqlc.types.Type):
    """Description of errors that may occur while attempting to delete a
    span attribute trace filter.
    """

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """Error message, with further detail to help resolve the issue."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeDeleteSpanAttributeRuleResponseErrorType),
        graphql_name="type",
    )
    """Error that may occur while attempting to delete a span attribute
    trace filter.
    """


class EdgeDeleteTraceFilterRuleResponses(sgqlc.types.Type):
    """Array of responses, one for each trace filter rule deletion
    request
    """

    __schema__ = nerdgraph
    __field_names__ = ("span_attribute_rules",)
    span_attribute_rules = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(EdgeDeleteSpanAttributeRuleResponse)
            )
        ),
        graphql_name="spanAttributeRules",
    )
    """Array of span attribute trace filter rule deletion responses, one
    for each id provided to `DeleteTraceFilterRulesInput`.
    """


class EdgeDeleteTraceObserverResponse(sgqlc.types.Type):
    """Successfully deleted trace observers, or one or more error
    responses if there were issues.
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "trace_observer")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EdgeDeleteTraceObserverResponseError"),
        graphql_name="errors",
    )
    """Errors that may occur when deleting a `TraceObserver`. Defaults to
    `null` in case of success.
    """

    trace_observer = sgqlc.types.Field(
        "EdgeTraceObserver", graphql_name="traceObserver"
    )
    """The trace observer that was deleted. Defaults to `null` in case of
    failure.
    """


class EdgeDeleteTraceObserverResponseError(sgqlc.types.Type):
    """Description of errors that may occur while attempting to delete a
    trace observer.
    """

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """Error message, with further detail to help resolve the issue."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeDeleteTraceObserverResponseErrorType),
        graphql_name="type",
    )
    """Error that may occur while attempting to delete a trace observer."""


class EdgeDeleteTraceObserverResponses(sgqlc.types.Type):
    """Array of responses, one for each trace observer deletion request."""

    __schema__ = nerdgraph
    __field_names__ = ("responses",)
    responses = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EdgeDeleteTraceObserverResponse))
        ),
        graphql_name="responses",
    )
    """Array of trace observer deletion responses, one for each
    `DeleteTraceObserverInput`.
    """


class EdgeEndpoint(sgqlc.types.Type):
    """An `Endpoint` describes access to an endpoint pointing to a trace
    observer. Currently, only one endpoint per trace observer is
    supported.
    """

    __schema__ = nerdgraph
    __field_names__ = ("agent", "endpoint_type", "https", "status")
    agent = sgqlc.types.Field(
        sgqlc.types.non_null("EdgeAgentEndpointDetail"), graphql_name="agent"
    )
    """Connection information related to the agent configuration."""

    endpoint_type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeEndpointType), graphql_name="endpointType"
    )
    """Type of the endpoint."""

    https = sgqlc.types.Field(
        sgqlc.types.non_null("EdgeHttpsEndpointDetail"), graphql_name="https"
    )
    """Connection information related to the Infinite Tracing Trace API
    (HTTP 1.1) configuration.
    """

    status = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeEndpointStatus), graphql_name="status"
    )
    """Status of the endpoint."""


class EdgeEndpointDetail(sgqlc.types.Interface):
    """The information common to all endpoints."""

    __schema__ = nerdgraph
    __field_names__ = ("host", "port")
    host = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="host")
    """Full host name that is used to connect to the endpoint."""

    port = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="port")
    """Port that is used to connect to the endpoint."""


class EdgeRandomTraceFilter(sgqlc.types.Type):
    """Contains all of the data that is used to sample traces based on
    random selection.
    """

    __schema__ = nerdgraph
    __field_names__ = ("percent_kept",)
    percent_kept = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="percentKept"
    )
    """The percent of traces to keep when selected at random."""


class EdgeSpanAttributeRule(sgqlc.types.Type):
    """A `SpanAttributeRule` applies a filtering rule (keep or discard)
    to traces within a particular `TraceObserver`
    """

    __schema__ = nerdgraph
    __field_names__ = ("action", "id", "key", "key_operator", "value", "value_operator")
    action = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeTraceFilterAction), graphql_name="action"
    )
    """The action that this filter takes if it matches the provided
    attribute name and value
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """Globally unique identifier of this trace filter."""

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """Name of the attribute that this filter matches on"""

    key_operator = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeSpanAttributeKeyOperator), graphql_name="keyOperator"
    )
    """Type of match to apply to the attribute name (EQUALS, LIKE)."""

    value = sgqlc.types.Field(String, graphql_name="value")
    """Value of the attribute that this filter matches on."""

    value_operator = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeSpanAttributeValueOperator),
        graphql_name="valueOperator",
    )
    """Type of match to apply to the attribute value (EQUALS, LIKE,
    IS_NOT_NULL).
    """


class EdgeSpanAttributesTraceFilter(sgqlc.types.Type):
    """Contains all of the data that is used to sample traces based on
    their attributes.
    """

    __schema__ = nerdgraph
    __field_names__ = ("span_attribute_rules",)
    span_attribute_rules = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EdgeSpanAttributeRule))
        ),
        graphql_name="spanAttributeRules",
    )
    """The list of rules that determine whether to keep or drop a trace
    based on a span attribute.
    """


class EdgeTraceFilters(sgqlc.types.Type):
    """A container for all trace filter rule types"""

    __schema__ = nerdgraph
    __field_names__ = ("random_trace_filter", "span_attributes_trace_filter")
    random_trace_filter = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeRandomTraceFilter), graphql_name="randomTraceFilter"
    )
    """Random trace filter configuration applied to the trace observer."""

    span_attributes_trace_filter = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeSpanAttributesTraceFilter),
        graphql_name="spanAttributesTraceFilter",
    )
    """Span attribute trace filter configuration applied to the trace
    observer.
    """


class EdgeTraceObserver(sgqlc.types.Type):
    """A `TraceObserver` handles a group of tracing services for an
    account family.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "compliance_types",
        "data_source_group",
        "endpoints",
        "id",
        "monitoring_account_id",
        "name",
        "provider_region",
        "status",
        "trace_filters",
    )
    compliance_types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EdgeComplianceTypeCode)),
        graphql_name="complianceTypes",
    )
    """Optional list of compliance types (e.g., FedRAMP) applied to this
    trace observer.
    """

    data_source_group = sgqlc.types.Field(
        EdgeDataSourceGroup, graphql_name="dataSourceGroup"
    )
    """The group of data sources if any have been assigned to this trace
    observer.
    """

    endpoints = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EdgeEndpoint))),
        graphql_name="endpoints",
    )
    """List of endpoints associated with this trace observer. Currently,
    only one endpoint per trace observer is supported.
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """Globally unique identifier of this trace observer."""

    monitoring_account_id = sgqlc.types.Field(Int, graphql_name="monitoringAccountId")
    """Which account monitoring metrics are being written to for this
    trace observer (if specified)
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Human-readable name of this trace observer."""

    provider_region = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeProviderRegion), graphql_name="providerRegion"
    )
    """Provider-specific region of this endpoint (for example,
    `AWS_US_EAST_1`). Currently, only AWS regions are supported.
    """

    status = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeTraceObserverStatus), graphql_name="status"
    )
    """Status of the trace observer."""

    trace_filters = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeTraceFilters), graphql_name="traceFilters"
    )
    """Trace filters applied to the trace observer."""


class EdgeTracing(sgqlc.types.Type):
    """This field provides access to Tracing data."""

    __schema__ = nerdgraph
    __field_names__ = ("trace_observers",)
    trace_observers = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EdgeTraceObserver)),
        graphql_name="traceObservers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(Int)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Lists the existing trace observers for this account family.

    Arguments:

    * `ids` (`[Int!]`): Optional IDs of trace observers to return.
    """


class EdgeUpdateTraceObserverResponse(sgqlc.types.Type):
    """Successfully updated trace observers, or one or more error
    responses if there were issues.
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "trace_observer")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EdgeUpdateTraceObserverResponseError"),
        graphql_name="errors",
    )
    """Errors that may occur when creating a `TraceObserver`. Defaults to
    `null` in case of success.
    """

    trace_observer = sgqlc.types.Field(EdgeTraceObserver, graphql_name="traceObserver")
    """The trace observer defined in `UpdateTraceObserverInput`. Defaults
    to `null` in case of failure.
    """


class EdgeUpdateTraceObserverResponseError(sgqlc.types.Type):
    """Description of errors that may occur while attempting to update a
    trace observer.
    """

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """Error message, with further detail to help resolve the issue."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeUpdateTraceObserverResponseErrorType),
        graphql_name="type",
    )
    """Error that may occur while attempting to create a trace observer."""


class EdgeUpdateTraceObserverResponses(sgqlc.types.Type):
    """Array of responses, one for each trace observer update request."""

    __schema__ = nerdgraph
    __field_names__ = ("responses",)
    responses = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EdgeUpdateTraceObserverResponse))
        ),
        graphql_name="responses",
    )
    """Array of trace observer update responses, one for each
    `UpdateTraceObserverInput`.
    """


class Entity(sgqlc.types.Interface):
    """The `Entity` interface allows fetching detailed entity information
    for a single entity.  To understand more about entities and entity
    types, look at [our docs](https://docs.newrelic.com/docs/what-are-
    new-relic-entities).
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "account_id",
        "alert_severity",
        "alert_violations",
        "domain",
        "entity_type",
        "golden_metrics",
        "golden_tags",
        "guid",
        "indexed_at",
        "last_reporting_change_at",
        "name",
        "nerd_storage",
        "nrdb_query",
        "nrdb_query_progress",
        "permalink",
        "recent_alert_violations",
        "related_entities",
        "relationships",
        "reporting",
        "service_level",
        "tags",
        "tags_with_metadata",
        "tracing_summary",
        "type",
    )
    account = sgqlc.types.Field(AccountOutline, graphql_name="account")

    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The New Relic account ID associated with this entity."""

    alert_severity = sgqlc.types.Field(
        EntityAlertSeverity, graphql_name="alertSeverity"
    )
    """The current alerting severity of the entity."""

    alert_violations = sgqlc.types.Field(
        sgqlc.types.list_of("EntityAlertViolation"),
        graphql_name="alertViolations",
        args=sgqlc.types.ArgDict(
            (
                (
                    "end_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EpochMilliseconds),
                        graphql_name="endTime",
                        default=None,
                    ),
                ),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EpochMilliseconds),
                        graphql_name="startTime",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Violations on the entity that were open during the specified time
    window. This will return up to 500 violations - if there are more
    in the time window selected, you must narrow the timewindow or
    look at fewer entities.

    Arguments:

    * `end_time` (`EpochMilliseconds!`): End of time window for
      violations.
    * `start_time` (`EpochMilliseconds!`): Start of time window for
      violations.
    """

    domain = sgqlc.types.Field(String, graphql_name="domain")
    """The entity's domain"""

    entity_type = sgqlc.types.Field(EntityType, graphql_name="entityType")
    """A value representing the combination of the entity's domain and
    type.
    """

    golden_metrics = sgqlc.types.Field(
        "EntityGoldenContextScopedGoldenMetrics",
        graphql_name="goldenMetrics",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        EntityGoldenContextInput, graphql_name="context", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        EntityGoldenNrqlTimeWindowInput,
                        graphql_name="timeWindow",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """The list of golden metrics for a specific entity

    Arguments:

    * `context` (`EntityGoldenContextInput`): Context used to fetch
      the golden metrics
    * `time_window` (`EntityGoldenNrqlTimeWindowInput`): Time range to
      apply to the golden metric NRQL query result field
    """

    golden_tags = sgqlc.types.Field(
        "EntityGoldenContextScopedGoldenTags",
        graphql_name="goldenTags",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        EntityGoldenContextInput, graphql_name="context", default=None
                    ),
                ),
            )
        ),
    )
    """The list of golden tags for a specific entityType.

    Arguments:

    * `context` (`EntityGoldenContextInput`): Context used to fetch
      the golden tags
    """

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """A unique entity identifier."""

    indexed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="indexedAt")
    """The time the entity was indexed."""

    last_reporting_change_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="lastReportingChangeAt"
    )
    """The last time the entity's reporting status changed."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of this entity."""

    nerd_storage = sgqlc.types.Field(
        "NerdStorageEntityScope", graphql_name="nerdStorage"
    )

    nrdb_query = sgqlc.types.Field(
        "NrdbResultContainer",
        graphql_name="nrdbQuery",
        args=sgqlc.types.ArgDict(
            (
                (
                    "async_",
                    sgqlc.types.Arg(Boolean, graphql_name="async", default=False),
                ),
                (
                    "nrql",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Nrql), graphql_name="nrql", default=None
                    ),
                ),
                (
                    "options",
                    sgqlc.types.Arg(
                        NrqlQueryOptions, graphql_name="options", default=None
                    ),
                ),
                (
                    "timeout",
                    sgqlc.types.Arg(Seconds, graphql_name="timeout", default=None),
                ),
            )
        ),
    )
    """Make an `Entity` scoped query to NRDB with a NRQL string.  A
    relevant `WHERE` clause will be added to your query to scope data
    to the entity in question.  See the [NRQL
    Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-
    query-language/nrql-resources/nrql-syntax-components-functions)
    for more information about generating a query string.

    Arguments:

    * `async_` (`Boolean`): When true, the query will begin
      asynchronous resolution after the allotted `timeout`. Include
      `queryProgress` fields in your GraphQL query to receive the
      information you will need to poll the `nrdbQueryProgress` field
      for the results of your async NRQL query.  See [this page](https
      ://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-
      nrql-tutorial) for additional asynchronous query documentation.
      (default: `false`)
    * `nrql` (`Nrql!`): The
      [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-
      query-language/nrql-resources/nrql-syntax-components-functions)
      query string.
    * `options` (`NrqlQueryOptions`): Additional options for NRQL
      queries.
    * `timeout` (`Seconds`): The timeout we will apply to the NRQL
      Query. The value will be clamped to between 5 and 120 seconds
      and defaults to 5 seconds.  For `async` queries, if the query is
      still incomplete after this amount of time, resolution will
      become asynchronous and return `queryProgress` data if
      requested.
    """

    nrdb_query_progress = sgqlc.types.Field(
        "NrdbResultContainer",
        graphql_name="nrdbQueryProgress",
        args=sgqlc.types.ArgDict(
            (
                (
                    "query_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="queryId", default=None
                    ),
                ),
            )
        ),
    )
    """Poll for the results of a previously-executed asychronous NRDB
    query.  The `queryId` is available in the `queryProgress` data
    returned by the original asynchronous query.  See [this page](http
    s://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-
    nrql-tutorial) for additional asynchronous query documentation.

    Arguments:

    * `query_id` (`ID!`): A token for retrieving the results of a
      previously executed asynchronous query.
    """

    permalink = sgqlc.types.Field(String, graphql_name="permalink")
    """The url to the entity."""

    recent_alert_violations = sgqlc.types.Field(
        sgqlc.types.list_of("EntityAlertViolation"),
        graphql_name="recentAlertViolations",
        args=sgqlc.types.ArgDict(
            (("count", sgqlc.types.Arg(Int, graphql_name="count", default=10)),)
        ),
    )
    """Recent violations on the entity.

    Arguments:

    * `count` (`Int`): The desired number of alert violations to be
      returned. (default: `10`)
    """

    related_entities = sgqlc.types.Field(
        "EntityRelationshipRelatedEntitiesResult",
        graphql_name="relatedEntities",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        EntityRelationshipEdgeFilter,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                ("limit", sgqlc.types.Arg(Int, graphql_name="limit", default=None)),
            )
        ),
    )
    """Related entities result with optional filtering.

    Arguments:

    * `cursor` (`String`): The cursor to fetch paginated results.
    * `filter` (`EntityRelationshipEdgeFilter`): Apply an optional
      filter to the related entities.
    * `limit` (`Int`): A limit to apply to the number of relationships
      returned. Note: this option can only lower the default limits
      (2000 relationships).
    """

    relationships = sgqlc.types.Field(
        sgqlc.types.list_of("EntityRelationship"),
        graphql_name="relationships",
        args=sgqlc.types.ArgDict(
            (
                (
                    "end_time",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="endTime", default=None
                    ),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        EntityRelationshipFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )
    """A list of the entities' relationships.  For more information,
    visit [our docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/graphql-relationships-api-tutorial).

    Arguments:

    * `end_time` (`EpochMilliseconds`): Return relationships as they
      existed in the past. The duration of the time window queried is
      fixed at 75 minutes.
    * `filter` (`EntityRelationshipFilter`): Apply an optional filter
      to the relationships.
    """

    reporting = sgqlc.types.Field(Boolean, graphql_name="reporting")
    """The reporting status of the entity. If New Relic is successfully
    collecting data from your application, this will be true.
    """

    service_level = sgqlc.types.Field(
        "ServiceLevelDefinition", graphql_name="serviceLevel"
    )
    """The service level defined for the entity."""

    tags = sgqlc.types.Field(sgqlc.types.list_of("EntityTag"), graphql_name="tags")
    """The tags applied to the entity.  For details on tags, as well as
    query and mutation examples, visit [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/graphql-tagging-api-tutorial).
    """

    tags_with_metadata = sgqlc.types.Field(
        sgqlc.types.list_of("EntityTagWithMetadata"), graphql_name="tagsWithMetadata"
    )
    """The tags applied to the entity with their metadata."""

    tracing_summary = sgqlc.types.Field(
        DistributedTracingEntityTracingSummary,
        graphql_name="tracingSummary",
        args=sgqlc.types.ArgDict(
            (
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Look up Distributed Tracing summary data for the selected
    `EntityGuid`

    Arguments:

    * `time_window` (`TimeWindowInput`): The start and end of the
      tracing data. Defaults to the last 30 minutes
    """

    type = sgqlc.types.Field(String, graphql_name="type")
    """The entity's type"""


class EntityAlertViolation(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "agent_url",
        "alert_severity",
        "closed_at",
        "label",
        "level",
        "opened_at",
        "violation_id",
        "violation_url",
    )
    agent_url = sgqlc.types.Field(String, graphql_name="agentUrl")
    """A link to the agent in the time window in which the violation
    occurred.
    """

    alert_severity = sgqlc.types.Field(
        EntityAlertSeverity, graphql_name="alertSeverity"
    )
    """The severity of the violation."""

    closed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="closedAt")
    """Timestamp of when the violation was closed."""

    label = sgqlc.types.Field(String, graphql_name="label")
    """The description of the violation."""

    level = sgqlc.types.Field(String, graphql_name="level")
    """The priority of the violation."""

    opened_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="openedAt")
    """Timestamp of when the violation was opened."""

    violation_id = sgqlc.types.Field(Int, graphql_name="violationId")
    """The id of the violation."""

    violation_url = sgqlc.types.Field(String, graphql_name="violationUrl")
    """A link to the violation if it is connected to an incident."""


class EntityCollection(sgqlc.types.Type):
    """A collection of user defined Entities and Entity Search queries."""

    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "created_by",
        "definition",
        "guid",
        "members",
        "name",
        "type",
    )
    account = sgqlc.types.Field(AccountReference, graphql_name="account")
    """The account the collection is part of"""

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")
    """The user who created the collection"""

    definition = sgqlc.types.Field(
        "EntityCollectionDefinition", graphql_name="definition"
    )
    """The definition of the collection."""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """The GUID of the Entity"""

    members = sgqlc.types.Field("EntitySearch", graphql_name="members")
    """The result of searching for the members of the collection."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the collection."""

    type = sgqlc.types.Field(EntityCollectionType, graphql_name="type")
    """The type of Collection"""


class EntityCollectionDefinition(sgqlc.types.Type):
    """The definition of a collection."""

    __schema__ = nerdgraph
    __field_names__ = (
        "entity_guids",
        "entity_search_query",
        "scope_accounts",
        "search_queries",
    )
    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(EntityGuid), graphql_name="entityGuids"
    )
    """A list of entity GUIDs. These entities will belong to the
    collection as long as their accounts are included in the scope
    accounts of the collection.
    """

    entity_search_query = sgqlc.types.Field(String, graphql_name="entitySearchQuery")
    """The Entity Search query that returns the full collection of
    entities.
    """

    scope_accounts = sgqlc.types.Field(
        "EntityCollectionScopeAccounts", graphql_name="scopeAccounts"
    )
    """The Accounts that will be used to scope the collection."""

    search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="searchQueries"
    )
    """A list of entity search queries. The resulting entities will be
    limited to the scope accounts of the collection.
    """


class EntityCollectionScopeAccounts(sgqlc.types.Type):
    """The Accounts used to scope a collection."""

    __schema__ = nerdgraph
    __field_names__ = ("account_ids",)
    account_ids = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name="accountIds")
    """The Account IDs that make up the account scoping."""


class EntityDeleteError(sgqlc.types.Type):
    """Type that wraps the errors from a entity delete operation."""

    __schema__ = nerdgraph
    __field_names__ = ("guid", "message", "type")
    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """Guid related to the error."""

    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """User-friendly message describing the error."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityDeleteErrorType), graphql_name="type"
    )
    """Describes all potential error types that a delete operation might
    return.
    """


class EntityDeleteResult(sgqlc.types.Type):
    """Response type for delete operations over entities."""

    __schema__ = nerdgraph
    __field_names__ = ("deleted_entities", "failures")
    deleted_entities = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))),
        graphql_name="deletedEntities",
    )
    """List that contains the guids of the deleted entities"""

    failures = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EntityDeleteError))
        ),
        graphql_name="failures",
    )
    """List of failures for the delete operation."""


class EntityGoldenContext(sgqlc.types.Type):
    """An object that represent the context."""

    __schema__ = nerdgraph
    __field_names__ = ("account", "guid")
    account = sgqlc.types.Field(Int, graphql_name="account")
    """Account context."""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """Collection guid context."""


class EntityGoldenContextScopedGoldenMetrics(sgqlc.types.Type):
    """An object that represents the golden metrics scoped by context"""

    __schema__ = nerdgraph
    __field_names__ = ("context", "metrics")
    context = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenContext), graphql_name="context"
    )
    """Context for the golden metric"""

    metrics = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("EntityGoldenMetric"))
        ),
        graphql_name="metrics",
    )
    """Metrics for the domain and type"""


class EntityGoldenContextScopedGoldenTags(sgqlc.types.Type):
    """An object that represents the golden tags scoped by context"""

    __schema__ = nerdgraph
    __field_names__ = ("context", "tags")
    context = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenContext), graphql_name="context"
    )
    """Context for the golden tags"""

    tags = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("EntityGoldenTag"))
        ),
        graphql_name="tags",
    )
    """Tags for the domain and type"""


class EntityGoldenGoldenMetricsError(sgqlc.types.Type):
    """The different error types in golden metrics"""

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")
    """The error description"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenGoldenMetricsErrorType), graphql_name="type"
    )
    """An error type"""


class EntityGoldenMetric(sgqlc.types.Type):
    """An object that represents a golden metric."""

    __schema__ = nerdgraph
    __field_names__ = ("definition", "metric_name", "name", "query", "title", "unit")
    definition = sgqlc.types.Field(
        sgqlc.types.non_null("EntityGoldenMetricDefinition"), graphql_name="definition"
    )
    """The definition of the golden metric."""

    metric_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="metricName"
    )
    """The synthesised metric name. i.e:
    newrelic.goldenmetrics.apm.application.throughput
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the golden metric."""

    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")
    """The golden metric NRQL query."""

    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="title")
    """The title of the golden metric."""

    unit = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenMetricUnit), graphql_name="unit"
    )
    """The unit used to represent the golden metric."""


class EntityGoldenMetricDefinition(sgqlc.types.Type):
    """The definition of the metric."""

    __schema__ = nerdgraph
    __field_names__ = (
        "event_id",
        "event_object_id",
        "facet",
        "from_",
        "select",
        "where",
    )
    event_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="eventId")
    """The field used to filter the entity in the metric. This will be
    added to the WHERE by default.
    """

    event_object_id = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenEventObjectId), graphql_name="eventObjectId"
    )
    """Indicates if the eventId field references a GUID, a domainId or an
    entity name.
    """

    facet = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="facet")
    """The field to FACET by."""

    from_ = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="from")
    """The FROM clause of the query."""

    select = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="select")
    """The SELECT clause of the query."""

    where = sgqlc.types.Field(String, graphql_name="where")
    """If a complementary WHERE clause is required to identify the entity
    type this field will contain it.
    """


class EntityGoldenMetricsDomainTypeScoped(sgqlc.types.Type):
    """An object that represents the golden metrics scoped by domain and
    type
    """

    __schema__ = nerdgraph
    __field_names__ = ("context", "domain_type", "metrics")
    context = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenContext), graphql_name="context"
    )
    """Context for the golden metric"""

    domain_type = sgqlc.types.Field(
        sgqlc.types.non_null(DomainType), graphql_name="domainType"
    )
    """Domain type for the golden metrics"""

    metrics = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EntityGoldenMetric))
        ),
        graphql_name="metrics",
    )
    """Metrics for the domain and type"""


class EntityGoldenMetricsDomainTypeScopedResponse(sgqlc.types.Type):
    """An object that represents the golden metrics scoped by domain and
    type mutation result
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "metrics")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGoldenGoldenMetricsError)),
        graphql_name="errors",
    )
    """The list of the errors"""

    metrics = sgqlc.types.Field(
        EntityGoldenMetricsDomainTypeScoped, graphql_name="metrics"
    )
    """The metrics results of the mutations"""


class EntityGoldenTag(sgqlc.types.Type):
    """An object that represents a golden tag."""

    __schema__ = nerdgraph
    __field_names__ = ("key",)
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """The golden tag key."""


class EntityGoldenTagsDomainTypeScoped(sgqlc.types.Type):
    """An object that represents the golden tags scoped by domain and
    type
    """

    __schema__ = nerdgraph
    __field_names__ = ("context", "domain_type", "tags")
    context = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenContext), graphql_name="context"
    )
    """Context for the golden tags"""

    domain_type = sgqlc.types.Field(
        sgqlc.types.non_null(DomainType), graphql_name="domainType"
    )
    """Domain type for the golden tags"""

    tags = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EntityGoldenTag))
        ),
        graphql_name="tags",
    )
    """Tags for the domain and type"""


class EntityGoldenTagsDomainTypeScopedResponse(sgqlc.types.Type):
    """An object that represents the golden tags scoped by domain and
    type mutation result
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "tags")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGoldenGoldenMetricsError)),
        graphql_name="errors",
    )
    """The list of the errors"""

    tags = sgqlc.types.Field(EntityGoldenTagsDomainTypeScoped, graphql_name="tags")
    """The tags results of the mutations"""


class EntityOutline(sgqlc.types.Interface):
    """The `EntityOutline` interface object allows fetching basic entity
    data for many entities at a time.  To understand more about
    entities and entity types, look at [our
    docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "account_id",
        "alert_severity",
        "domain",
        "entity_type",
        "golden_metrics",
        "golden_tags",
        "guid",
        "indexed_at",
        "last_reporting_change_at",
        "name",
        "permalink",
        "reporting",
        "service_level",
        "tags",
        "type",
    )
    account = sgqlc.types.Field(AccountOutline, graphql_name="account")

    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The New Relic account ID associated with this entity."""

    alert_severity = sgqlc.types.Field(
        EntityAlertSeverity, graphql_name="alertSeverity"
    )
    """The current alerting severity of the entity."""

    domain = sgqlc.types.Field(String, graphql_name="domain")
    """The entity's domain"""

    entity_type = sgqlc.types.Field(EntityType, graphql_name="entityType")
    """A value representing the combination of the entity's domain and
    type.
    """

    golden_metrics = sgqlc.types.Field(
        EntityGoldenContextScopedGoldenMetrics,
        graphql_name="goldenMetrics",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        EntityGoldenContextInput, graphql_name="context", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        EntityGoldenNrqlTimeWindowInput,
                        graphql_name="timeWindow",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """The list of golden metrics for a specific entity

    Arguments:

    * `context` (`EntityGoldenContextInput`): Context used to fetch
      the golden metrics
    * `time_window` (`EntityGoldenNrqlTimeWindowInput`): Time range to
      apply to the golden metric NRQL query result field
    """

    golden_tags = sgqlc.types.Field(
        EntityGoldenContextScopedGoldenTags,
        graphql_name="goldenTags",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        EntityGoldenContextInput, graphql_name="context", default=None
                    ),
                ),
            )
        ),
    )
    """The list of golden tags for a specific entityType.

    Arguments:

    * `context` (`EntityGoldenContextInput`): Context used to fetch
      the golden tags
    """

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """A unique entity identifier."""

    indexed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="indexedAt")
    """The time the entity was indexed."""

    last_reporting_change_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="lastReportingChangeAt"
    )
    """The last time the entity's reporting status changed."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of this entity."""

    permalink = sgqlc.types.Field(String, graphql_name="permalink")
    """The url to the entity."""

    reporting = sgqlc.types.Field(Boolean, graphql_name="reporting")
    """The reporting status of the entity. If New Relic is successfully
    collecting data from your application, this will be true.
    """

    service_level = sgqlc.types.Field(
        "ServiceLevelDefinition", graphql_name="serviceLevel"
    )
    """The service level defined for the entity."""

    tags = sgqlc.types.Field(sgqlc.types.list_of("EntityTag"), graphql_name="tags")
    """The tags applied to the entity.  For details on tags, as well as
    query and mutation examples, visit [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/graphql-tagging-api-tutorial).
    """

    type = sgqlc.types.Field(String, graphql_name="type")
    """The entity's type"""


class EntityRelationship(sgqlc.types.Type):
    """An entity relationship"""

    __schema__ = nerdgraph
    __field_names__ = ("source", "target", "type")
    source = sgqlc.types.Field("EntityRelationshipNode", graphql_name="source")
    """The source entity of the relationship."""

    target = sgqlc.types.Field("EntityRelationshipNode", graphql_name="target")
    """The target entity of the relationship."""

    type = sgqlc.types.Field(EntityRelationshipType, graphql_name="type")
    """The type of the relationship. For details, visit [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/graphql-relationships-api-tutorial).
    """


class EntityRelationshipEdge(sgqlc.types.Interface):
    """An entity relationship."""

    __schema__ = nerdgraph
    __field_names__ = ("created_at", "source", "target", "type")
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """The time the relationship was created."""

    source = sgqlc.types.Field(
        sgqlc.types.non_null("EntityRelationshipVertex"), graphql_name="source"
    )
    """The source entity of the relationship."""

    target = sgqlc.types.Field(
        sgqlc.types.non_null("EntityRelationshipVertex"), graphql_name="target"
    )
    """The target entity of the relationship."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityRelationshipEdgeType), graphql_name="type"
    )
    """The type of the relationship."""


class EntityRelationshipNode(sgqlc.types.Type):
    """A node in an Entity relationship."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "entity", "entity_type", "guid")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The Account ID for the relationship node."""

    entity = sgqlc.types.Field(EntityOutline, graphql_name="entity")

    entity_type = sgqlc.types.Field(EntityType, graphql_name="entityType")
    """The `EntityType` of the relationship node."""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """The Entity `guid` for the relationship node."""


class EntityRelationshipRelatedEntitiesResult(sgqlc.types.Type):
    """Response containing entity relationships."""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """The next cursor for fetching additional paginated results."""

    results = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EntityRelationshipEdge))
        ),
        graphql_name="results",
    )
    """The list of  entity relationships."""


class EntityRelationshipUserDefinedCreateOrReplaceResult(sgqlc.types.Type):
    """The result of the entityRelationshipUserDefinedCreateOrReplace
    mutation.
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(
                "EntityRelationshipUserDefinedCreateOrReplaceResultError"
            )
        ),
        graphql_name="errors",
    )
    """The list of errors that occurred when executing the mutation."""


class EntityRelationshipUserDefinedCreateOrReplaceResultError(sgqlc.types.Type):
    """The entityRelationshipUserDefinedCreateOrReplace result error."""

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """A message explaining what the error is about."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityRelationshipUserDefinedCreateOrReplaceErrorType),
        graphql_name="type",
    )
    """The mutation error type."""


class EntityRelationshipUserDefinedDeleteResult(sgqlc.types.Type):
    """The result of the entityRelationshipUserDefinedDelete mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("EntityRelationshipUserDefinedDeleteResultError")
        ),
        graphql_name="errors",
    )
    """The list of errors that occurred when executing the mutation."""


class EntityRelationshipUserDefinedDeleteResultError(sgqlc.types.Type):
    """The entityRelationshipUserDefinedDelete result error."""

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """A message explaining what the error is about."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityRelationshipUserDefinedDeleteErrorType),
        graphql_name="type",
    )
    """The mutation error type."""


class EntityRelationshipVertex(sgqlc.types.Type):
    """A vertex in an entity relationship edge."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "entity", "guid")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account ID of the relationship node."""

    entity = sgqlc.types.Field(EntityOutline, graphql_name="entity")
    """The entity of the relationship node."""

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")
    """The entity guid of the relationship node."""


class EntitySearch(sgqlc.types.Type):
    """A data structure that contains the detailed response of an entity
    search.  The direct search result is available through `results`.
    Information about the query itself is available through `query`,
    `types`, and `count`.
    """

    __schema__ = nerdgraph
    __field_names__ = ("count", "counts", "query", "results", "types")
    count = sgqlc.types.Field(Int, graphql_name="count")
    """The number of entities returned by the entity search."""

    counts = sgqlc.types.Field(
        sgqlc.types.list_of("EntitySearchCounts"),
        graphql_name="counts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "facet",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(EntitySearchCountsFacet)
                        ),
                        graphql_name="facet",
                        default=None,
                    ),
                ),
                (
                    "facet_tags",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(String)),
                        graphql_name="facetTags",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """A count of the Entity Search results faceted by a chosen set of
    criteria.  Note: Unlike a NRQL facet, the facet results do not
    include entities where the facet value does not exist.
    Additionally, entities can be tagged with multiple tag values for
    one tag key. For these reasons, depending on the facet values
    chosen, the `counts` field will not always equal the
    `entitySearch.count` field.

    Arguments:

    * `facet` (`[EntitySearchCountsFacet!]`): A list of criteria to
      facet entities by.  This can be combined with the `facetTags`
      argument to facet by a combination of criteria and tags.
    * `facet_tags` (`[String!]`): A list of tags to facet entities by.
      For example: `"environment"`, `"region"`.  This can be combined
      with the `facet` argument to facet by a combination of criteria
      and tags.  Note: If a tag does not exist on an entity, the
      entity will not be counted in the facet results. If an entity
      tag has multiple values, it will be counted in all facets that
      apply.
    """

    query = sgqlc.types.Field(String, graphql_name="query")
    """The entity search query string that was generated by the `query`
    argument or the `queryBuilder` argument.
    """

    results = sgqlc.types.Field(
        "EntitySearchResult",
        graphql_name="results",
        args=sgqlc.types.ArgDict(
            (("cursor", sgqlc.types.Arg(String, graphql_name="cursor", default=None)),)
        ),
    )
    """The paginated results of the entity search.

    Arguments:

    * `cursor` (`String`): The cursor to fetch paginated entity search
      results.
    """

    types = sgqlc.types.Field(
        sgqlc.types.list_of("EntitySearchTypes"), graphql_name="types"
    )
    """The entity types returned by the entity search."""


class EntitySearchCounts(sgqlc.types.Type):
    """The groupings and counts of entities returned for the specified
    criteria.
    """

    __schema__ = nerdgraph
    __field_names__ = ("count", "facet")
    count = sgqlc.types.Field(Int, graphql_name="count")
    """The number of entities that match the specified criteria."""

    facet = sgqlc.types.Field(AttributeMap, graphql_name="facet")
    """The group of entities returned for the specified criteria."""


class EntitySearchResult(sgqlc.types.Type):
    """A section of the entity search results. If there is a `nextCursor`
    present, there are more results available.
    """

    __schema__ = nerdgraph
    __field_names__ = ("entities", "next_cursor")
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(EntityOutline), graphql_name="entities"
    )
    """The entities contained in this section of the entity search
    results.  For information on New Relic entities, visit [our
    docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
    To see some query examples of entity information, visit [our
    entity GraphQL API
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/use-new-relic-graphql-api-query-entities).
    """

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """The next cursor for fetching additional paginated entity search
    results.
    """


class EntitySearchTypes(sgqlc.types.Type):
    """A detailed entity search response object type."""

    __schema__ = nerdgraph
    __field_names__ = ("count", "domain", "entity_type", "type")
    count = sgqlc.types.Field(Int, graphql_name="count")
    """The number of results with this type."""

    domain = sgqlc.types.Field(String, graphql_name="domain")
    """The domain of the search result group."""

    entity_type = sgqlc.types.Field(EntityType, graphql_name="entityType")
    """The combined domain & type of the search result group."""

    type = sgqlc.types.Field(String, graphql_name="type")
    """The type of the search result group."""


class EntityTag(sgqlc.types.Type):
    """A tag that has been applied to an entity."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "values")
    key = sgqlc.types.Field(String, graphql_name="key")
    """The tag's key"""

    values = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="values")
    """A list of the tag values"""


class EntityTagValueWithMetadata(sgqlc.types.Type):
    """The value and metadata of a single entity tag."""

    __schema__ = nerdgraph
    __field_names__ = ("mutable", "value")
    mutable = sgqlc.types.Field(Boolean, graphql_name="mutable")
    """Whether or not the tag can be mutated by the user."""

    value = sgqlc.types.Field(String, graphql_name="value")
    """The tag value."""


class EntityTagWithMetadata(sgqlc.types.Type):
    """The tags with metadata of the entity."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "values")
    key = sgqlc.types.Field(String, graphql_name="key")
    """The tag's key."""

    values = sgqlc.types.Field(
        sgqlc.types.list_of(EntityTagValueWithMetadata), graphql_name="values"
    )
    """A list of tag values with metadata information."""


class ErrorsInboxActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error_group", "error_group_state_types", "error_groups")
    error_group = sgqlc.types.Field(
        "ErrorsInboxErrorGroup",
        graphql_name="errorGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "error_event",
                    sgqlc.types.Arg(
                        ErrorsInboxErrorEventInput,
                        graphql_name="errorEvent",
                        default=None,
                    ),
                ),
                ("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),
            )
        ),
    )
    """Retrieve metadata on a specific error group.

    Arguments:

    * `error_event` (`ErrorsInboxErrorEventInput`): Error event that
      will be encoded to a unique error group id.
    * `id` (`ID`): The unique identifier of the group being fetched.
    """

    error_group_state_types = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("ErrorsInboxErrorGroupStateTypeResult")
        ),
        graphql_name="errorGroupStateTypes",
    )
    """List of error group state values"""

    error_groups = sgqlc.types.Field(
        "ErrorsInboxErrorGroupsResponse",
        graphql_name="errorGroups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ErrorsInboxErrorGroupSearchFilterInput),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Search error groups.

    Arguments:

    * `cursor` (`String`): Current query cursor
    * `filter` (`ErrorsInboxErrorGroupSearchFilterInput!`): Set of
      filters to be applied to the search.
    * `time_window` (`TimeWindowInput`): Time Window for search
    """


class ErrorsInboxAssignErrorGroupResponse(sgqlc.types.Type):
    """Response for error group assignment mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("assigned_user", "assignment", "errors")
    assigned_user = sgqlc.types.Field("UserReference", graphql_name="assignedUser")
    """User that was assigned to the error group."""

    assignment = sgqlc.types.Field("ErrorsInboxAssignment", graphql_name="assignment")
    """User that was assigned to the error group."""

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("ErrorsInboxAssignErrorGroupError")),
        graphql_name="errors",
    )
    """List of errors encountered."""


class ErrorsInboxAssignment(sgqlc.types.Type):
    """User assigned to an error group."""

    __schema__ = nerdgraph
    __field_names__ = ("email", "user_info")
    email = sgqlc.types.Field(String, graphql_name="email")
    """Email address of the user."""

    user_info = sgqlc.types.Field("UserReference", graphql_name="userInfo")
    """Additional user data for New Relic users."""


class ErrorsInboxDeleteErrorGroupResourceResponse(sgqlc.types.Type):
    """Response for delete resource mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("resource_id",)
    resource_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="resourceId")
    """Id of the deleted resource"""


class ErrorsInboxErrorGroup(sgqlc.types.Type):
    """A grouping of similar error events."""

    __schema__ = nerdgraph
    __field_names__ = (
        "assigned_user",
        "assignment",
        "entity_guid",
        "events_query",
        "first_seen_at",
        "id",
        "last_seen_at",
        "message",
        "name",
        "regressed_at",
        "resources",
        "state",
        "url",
    )
    assigned_user = sgqlc.types.Field("UserReference", graphql_name="assignedUser")
    """User assigned to the error group"""

    assignment = sgqlc.types.Field(ErrorsInboxAssignment, graphql_name="assignment")
    """User assigned to the error group"""

    entity_guid = sgqlc.types.Field(EntityGuid, graphql_name="entityGuid")
    """Source entity Guid"""

    events_query = sgqlc.types.Field(Nrql, graphql_name="eventsQuery")
    """NRQL formatted query for retrieving error events"""

    first_seen_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="firstSeenAt")
    """Time of first occurrence"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """A unique identifier for the error group"""

    last_seen_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="lastSeenAt")
    """Time of last occurrence"""

    message = sgqlc.types.Field(String, graphql_name="message")
    """Error group message"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Error group name"""

    regressed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="regressedAt")
    """Time of regression occurrence for regressed error groups"""

    resources = sgqlc.types.Field(
        sgqlc.types.non_null("ErrorsInboxResourcesResponse"),
        graphql_name="resources",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        ErrorsInboxResourceFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """List of resources associated with this error group

    Arguments:

    * `cursor` (`String`): Current query cursor
    * `filter` (`ErrorsInboxResourceFilterInput`): Set of filters to
      be applied to the search.
    """

    state = sgqlc.types.Field(ErrorsInboxErrorGroupState, graphql_name="state")
    """Value to indicate the current state of the group."""

    url = sgqlc.types.Field(String, graphql_name="url")
    """The public URL of the error group detail view."""


class ErrorsInboxErrorGroupStateTypeResult(sgqlc.types.Type):
    """Information about the error group state type"""

    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(ErrorsInboxErrorGroupState, graphql_name="type")
    """Type of the error group state"""


class ErrorsInboxErrorGroupsResponse(sgqlc.types.Type):
    """Response for error groups."""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor to get the next page of results."""

    results = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ErrorsInboxErrorGroup)),
        graphql_name="results",
    )
    """List of error groups."""

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")
    """Total error groups matching query"""


class ErrorsInboxResource(sgqlc.types.Interface):
    """Basic external resource"""

    __schema__ = nerdgraph
    __field_names__ = ("id", "url")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Unique resource identifier"""

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """External resource url"""


class ErrorsInboxResourcesResponse(sgqlc.types.Type):
    """Response for error group resources."""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor used to fetch the next set of results"""

    results = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(ErrorsInboxResource))
        ),
        graphql_name="results",
    )
    """The list of search results"""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """The total number of results that match the search"""


class ErrorsInboxResponseError(sgqlc.types.Interface):
    """Response error interface"""

    __schema__ = nerdgraph
    __field_names__ = ("description",)
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """The description of the error"""


class ErrorsInboxUpdateErrorGroupStateResponse(sgqlc.types.Type):
    """Response for error group state mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "state")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("ErrorsInboxUpdateErrorGroupStateError")
        ),
        graphql_name="errors",
    )
    """List of errors encountered."""

    state = sgqlc.types.Field(ErrorsInboxErrorGroupState, graphql_name="state")
    """Updated state value."""


class EventAttributeDefinition(sgqlc.types.Type):
    """A human-readable definition of an NRDB Event Type Attribute"""

    __schema__ = nerdgraph
    __field_names__ = ("category", "definition", "documentation_url", "label", "name")
    category = sgqlc.types.Field(String, graphql_name="category")
    """This attribute's category"""

    definition = sgqlc.types.Field(String, graphql_name="definition")
    """A short description of this attribute"""

    documentation_url = sgqlc.types.Field(String, graphql_name="documentationUrl")
    """The New Relic docs page for this attribute"""

    label = sgqlc.types.Field(String, graphql_name="label")
    """The human-friendly formatted name of the attribute"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the attribute"""


class EventDefinition(sgqlc.types.Type):
    """A human-readable definition of an NRDB Event Type"""

    __schema__ = nerdgraph
    __field_names__ = ("attributes", "definition", "label", "name")
    attributes = sgqlc.types.Field(
        sgqlc.types.list_of(EventAttributeDefinition), graphql_name="attributes"
    )
    """A list of attribute definitions for this event type"""

    definition = sgqlc.types.Field(String, graphql_name="definition")
    """A short description of this event"""

    label = sgqlc.types.Field(String, graphql_name="label")
    """The human-friendly formatted name of the event"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the event"""


class EventsToMetricsAccountStitchedFields(sgqlc.types.Type):
    """Account stitched fields to enable autostitching in NerdGraph"""

    __schema__ = nerdgraph
    __field_names__ = ("all_rules", "rules_by_id")
    all_rules = sgqlc.types.Field(
        "EventsToMetricsListRuleResult", graphql_name="allRules"
    )
    """List all rules for your account."""

    rules_by_id = sgqlc.types.Field(
        "EventsToMetricsListRuleResult",
        graphql_name="rulesById",
        args=sgqlc.types.ArgDict(
            (
                (
                    "rule_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ruleIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """List rules for your account by id.

    Arguments:

    * `rule_ids` (`[ID]!`): Rule ids you want to list (as strings).
    """


class EventsToMetricsCreateRuleFailure(sgqlc.types.Type):
    """Error details about the events to metrics rule that failed to be
    created and why.
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "submitted")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EventsToMetricsError"), graphql_name="errors"
    )
    """Information about why the create failed."""

    submitted = sgqlc.types.Field(
        "EventsToMetricsCreateRuleSubmission", graphql_name="submitted"
    )
    """Input information about a submitted rule that was unable to be
    created.
    """


class EventsToMetricsCreateRuleResult(sgqlc.types.Type):
    """The result of which submitted events to metrics rules were
    successfully and unsuccessfully created
    """

    __schema__ = nerdgraph
    __field_names__ = ("failures", "successes")
    failures = sgqlc.types.Field(
        sgqlc.types.list_of(EventsToMetricsCreateRuleFailure), graphql_name="failures"
    )
    """Rules that were not created and why."""

    successes = sgqlc.types.Field(
        sgqlc.types.list_of("EventsToMetricsRule"), graphql_name="successes"
    )
    """Rules that were successfully created."""


class EventsToMetricsCreateRuleSubmission(sgqlc.types.Type):
    """The details that were submitted when creating an events to metrics
    conversion rule.
    """

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "description", "name", "nrql")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account where the events exist and the metrics will be put."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Provides additional information about the rule."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the rule. This must be unique within a given account."""

    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")
    """Explains how to create one or more metrics from events."""


class EventsToMetricsDeleteRuleFailure(sgqlc.types.Type):
    """Error details about the events to metrics rule that failed to be
    deleted and why.
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "submitted")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EventsToMetricsError"), graphql_name="errors"
    )
    """Information about why the delete failed."""

    submitted = sgqlc.types.Field(
        "EventsToMetricsDeleteRuleSubmission", graphql_name="submitted"
    )
    """Input information about a submitted rule that was unable to be
    deleted.
    """


class EventsToMetricsDeleteRuleResult(sgqlc.types.Type):
    """The result of which submitted events to metrics rules were
    successfully and unsuccessfully deleted.
    """

    __schema__ = nerdgraph
    __field_names__ = ("failures", "successes")
    failures = sgqlc.types.Field(
        sgqlc.types.list_of(EventsToMetricsDeleteRuleFailure), graphql_name="failures"
    )
    """Information about the rules that could not be deleted."""

    successes = sgqlc.types.Field(
        sgqlc.types.list_of("EventsToMetricsRule"), graphql_name="successes"
    )
    """Rules that were successfully deleted."""


class EventsToMetricsDeleteRuleSubmission(sgqlc.types.Type):
    """The details that were submitted when deleteing an events to
    metrics conversion rule.
    """

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "rule_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """A submitted account id."""

    rule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="ruleId")
    """A submitted rule id."""


class EventsToMetricsError(sgqlc.types.Type):
    """Error details when processing events to metrics rule requests."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "reason")
    description = sgqlc.types.Field(String, graphql_name="description")
    """A detailed error message."""

    reason = sgqlc.types.Field(EventsToMetricsErrorReason, graphql_name="reason")
    """The category of error that occurred."""


class EventsToMetricsListRuleResult(sgqlc.types.Type):
    """A list of rule details to be returned."""

    __schema__ = nerdgraph
    __field_names__ = ("rules",)
    rules = sgqlc.types.Field(
        sgqlc.types.list_of("EventsToMetricsRule"), graphql_name="rules"
    )
    """Event-to-metric rules to be returned."""


class EventsToMetricsRule(sgqlc.types.Type):
    """Information about an event-to-metric rule which creates metrics
    from events.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_at",
        "description",
        "enabled",
        "id",
        "name",
        "nrql",
        "updated_at",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """Account with the event and where the metrics will be placed."""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """The time at which the rule was created"""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Additional information about the rule."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """True means this rule is enabled. False means the rule is currently
    not creating metrics.
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The id, uniquely identifying the rule."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the rule. This must be unique within an account."""

    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")
    """Explains how to create metrics from events."""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )
    """The time at which the rule was updated"""


class EventsToMetricsUpdateRuleFailure(sgqlc.types.Type):
    """Error details about the events to metrics rule that failed to be
    updated and why.
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "submitted")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(EventsToMetricsError), graphql_name="errors"
    )
    """Information about why the update failed."""

    submitted = sgqlc.types.Field(
        "EventsToMetricsUpdateRuleSubmission", graphql_name="submitted"
    )
    """Input information about a failed update."""


class EventsToMetricsUpdateRuleResult(sgqlc.types.Type):
    """The result of which submitted events to metrics rules were
    successfully and unsuccessfully update.
    """

    __schema__ = nerdgraph
    __field_names__ = ("failures", "successes")
    failures = sgqlc.types.Field(
        sgqlc.types.list_of(EventsToMetricsUpdateRuleFailure), graphql_name="failures"
    )
    """Rules that failed to get updated."""

    successes = sgqlc.types.Field(
        sgqlc.types.list_of(EventsToMetricsRule), graphql_name="successes"
    )
    """Rules that were successfully enabled or disabled."""


class EventsToMetricsUpdateRuleSubmission(sgqlc.types.Type):
    """The details that were submitted when updating an events to metrics
    conversion rule.
    """

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "enabled", "rule_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """A submitted account id."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Changes the state of the rule as being enabled or disabled."""

    rule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="ruleId")
    """A submitted rule id."""


class IncidentIntelligenceEnvironmentAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("current_environment",)
    current_environment = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentCurrentEnvironmentResult",
        graphql_name="currentEnvironment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "kind",
                    sgqlc.types.Arg(
                        IncidentIntelligenceEnvironmentSupportedEnvironmentKind,
                        graphql_name="kind",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Retrieves the incident intelligence environment based on the
    user's authentication and product entitlement

    Arguments:

    * `kind`
      (`IncidentIntelligenceEnvironmentSupportedEnvironmentKind`):
      Which environment kind to support when evaluating the query
    """


class IncidentIntelligenceEnvironmentActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "authorized_environments",
        "consented_accounts",
        "current_environment",
    )
    authorized_environments = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(
                "IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment"
            )
        ),
        graphql_name="authorizedEnvironments",
        args=sgqlc.types.ArgDict(
            (
                (
                    "kind",
                    sgqlc.types.Arg(
                        IncidentIntelligenceEnvironmentSupportedEnvironmentKind,
                        graphql_name="kind",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """A list of potential environments is returned based on the
    authorized accounts list

    Arguments:

    * `kind`
      (`IncidentIntelligenceEnvironmentSupportedEnvironmentKind`):
      Which environment kind to support when evaluating the query
    """

    consented_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("IncidentIntelligenceEnvironmentConsentedAccount")
        ),
        graphql_name="consentedAccounts",
    )
    """Retrieves a list of authorized accounts the user is authorized for
    that have been marked with consent by an admin of that account.
    """

    current_environment = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentCurrentEnvironmentResult",
        graphql_name="currentEnvironment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "kind",
                    sgqlc.types.Arg(
                        IncidentIntelligenceEnvironmentSupportedEnvironmentKind,
                        graphql_name="kind",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Retrieves the incident intelligence environment based on the
    user's authentication and product entitlement, if an account id is
    not provided, the environment is detected based on the authorized
    accounts.In cases where a user have more then one potential
    environment, the account must be provided.

    Arguments:

    * `kind`
      (`IncidentIntelligenceEnvironmentSupportedEnvironmentKind`):
      Which environment kind to support when evaluating the query
    """


class IncidentIntelligenceEnvironmentConsentAccounts(sgqlc.types.Type):
    """Consent accounts to usage of the Incident Intelligence product for
    EU or FedRAMP
    """

    __schema__ = nerdgraph
    __field_names__ = ("consented_accounts", "result")
    consented_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("IncidentIntelligenceEnvironmentConsentedAccount")
        ),
        graphql_name="consentedAccounts",
    )
    """The list of accounts marked with consent"""

    result = sgqlc.types.Field(
        sgqlc.types.non_null(IncidentIntelligenceEnvironmentConsentAccountsResult),
        graphql_name="result",
    )
    """The outcome of the consent marking"""


class IncidentIntelligenceEnvironmentConsentAuthorizedAccounts(sgqlc.types.Type):
    """Consent all the user's authorized accounts for the Incident
    Intelligence product for EU or FedRAMP
    """

    __schema__ = nerdgraph
    __field_names__ = ("consented_accounts", "result")
    consented_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("IncidentIntelligenceEnvironmentConsentedAccount")
        ),
        graphql_name="consentedAccounts",
    )
    """The list of accounts marked with consent"""

    result = sgqlc.types.Field(
        sgqlc.types.non_null(IncidentIntelligenceEnvironmentConsentAccountsResult),
        graphql_name="result",
    )
    """The outcome of the consent marking"""


class IncidentIntelligenceEnvironmentConsentedAccount(sgqlc.types.Type):
    """Represent an account that is mark with consent for Incident
    Intelligence usage
    """

    __schema__ = nerdgraph
    __field_names__ = ("account",)
    account = sgqlc.types.Field(AccountReference, graphql_name="account")
    """The account marked with consent"""


class IncidentIntelligenceEnvironmentCreateEnvironment(sgqlc.types.Type):
    """Creates a new Incident Intelligence Environment, will fail if an
    environment is already attached to the same parent account
    """

    __schema__ = nerdgraph
    __field_names__ = ("environment", "result", "result_details")
    environment = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment",
        graphql_name="environment",
    )
    """The created environment"""

    result = sgqlc.types.Field(
        sgqlc.types.non_null(IncidentIntelligenceEnvironmentCreateEnvironmentResult),
        graphql_name="result",
    )
    """The outcome of the creation"""

    result_details = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentCreateEnvironmentResultDetails",
        graphql_name="resultDetails",
    )
    """Additional result details"""


class IncidentIntelligenceEnvironmentCurrentEnvironmentResult(sgqlc.types.Type):
    """An environment will be populated only if the user is attached to a
    single environment.
    """

    __schema__ = nerdgraph
    __field_names__ = ("environment", "reason", "reason_details")
    environment = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment",
        graphql_name="environment",
    )
    """The current environment attached to the user"""

    reason = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentCurrentEnvironmentResultReason,
        graphql_name="reason",
    )
    """The explanation for the environment field result"""

    reason_details = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentCurrentEnvironmentResultReasonDetails",
        graphql_name="reasonDetails",
    )
    """The current environment result details"""


class IncidentIntelligenceEnvironmentDeleteEnvironment(sgqlc.types.Type):
    """Deletes an existing environment"""

    __schema__ = nerdgraph
    __field_names__ = ("result",)
    result = sgqlc.types.Field(
        sgqlc.types.non_null(IncidentIntelligenceEnvironmentDeleteEnvironmentResult),
        graphql_name="result",
    )
    """The deletion outcome"""


class IncidentIntelligenceEnvironmentDissentAccounts(sgqlc.types.Type):
    """Dissent accounts to usage of the Incident Intelligence product in
    the EU/FedRAMP (removes the consent marking).
    """

    __schema__ = nerdgraph
    __field_names__ = ("dissented_accounts", "result")
    dissented_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(IncidentIntelligenceEnvironmentConsentedAccount)
        ),
        graphql_name="dissentedAccounts",
    )
    """The list of previously consented accounts, now dissented"""

    result = sgqlc.types.Field(
        sgqlc.types.non_null(IncidentIntelligenceEnvironmentDissentAccountsResult),
        graphql_name="result",
    )
    """The outcome of the dissent marking"""


class IncidentIntelligenceEnvironmentEnvironmentAlreadyExists(sgqlc.types.Type):
    """Environment already exists detailed result"""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "environment", "master_account_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account id of the already exists environment"""

    environment = sgqlc.types.Field(
        sgqlc.types.non_null(
            "IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment"
        ),
        graphql_name="environment",
    )
    """The already exists environment"""

    master_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="masterAccountId"
    )
    """The parent account id of the already exists environment"""


class IncidentIntelligenceEnvironmentEnvironmentCreated(sgqlc.types.Type):
    """Environment created detailed result"""

    __schema__ = nerdgraph
    __field_names__ = ("environment",)
    environment = sgqlc.types.Field(
        sgqlc.types.non_null(
            "IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment"
        ),
        graphql_name="environment",
    )
    """The created environment"""


class IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment(sgqlc.types.Type):
    """Represents an AI Incident Intelligence environment. An environment
    crosses the account boundary and allows correlating data as long
    as the data's accounts are attached to the same environment.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "associated_authorized_accounts",
        "billing_cycle_quota",
        "created_at",
        "created_by",
        "incident_intelligence_account",
        "is_consent_required",
        "is_entitled_for_ai",
        "is_free_tier",
        "kind",
        "master_account",
        "name",
        "was_consented",
    )
    associated_authorized_accounts = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(AccountReference)),
        graphql_name="associatedAuthorizedAccounts",
    )
    """Authorized accounts associated with the environment. Events from
    these accounts can be correlated with one another (across the
    account boundary). The resulting correlated issue will be stored
    in the Incident Intelligence account
    """

    billing_cycle_quota = sgqlc.types.Field(Int, graphql_name="billingCycleQuota")
    """The assigned quota on the current billing cycle"""

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """When the environment was created"""

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")
    """The user that created the environment"""

    incident_intelligence_account = sgqlc.types.Field(
        AccountReference, graphql_name="incidentIntelligenceAccount"
    )
    """The account attached to the environment"""

    is_consent_required = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isConsentRequired"
    )
    """True indicates that a consent has to be asked when an environment
    is created. The consent is to acknowledge that if the account is
    overaging an additional usage charge may be charged based on extra
    usage
    """

    is_entitled_for_ai = sgqlc.types.Field(Boolean, graphql_name="isEntitledForAi")
    """Whether the environment is entitled for AI"""

    is_free_tier = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isFreeTier"
    )
    """True if the environment is part of the free-tier package"""

    kind = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentEnvironmentKind, graphql_name="kind"
    )
    """The environment kind"""

    master_account = sgqlc.types.Field(AccountReference, graphql_name="masterAccount")
    """The parent account related to the environment"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The environment name"""

    was_consented = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="wasConsented"
    )
    """True if the environment was consented, false otherwise"""


class IncidentIntelligenceEnvironmentMultipleEnvironmentsAvailable(sgqlc.types.Type):
    """The user has access to more than one environment from the context
    of this account (only one is allowed)
    """

    __schema__ = nerdgraph
    __field_names__ = ("account_ids",)
    account_ids = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name="accountIds")
    """The multiple accounts the user has access to in this context"""


class IncidentIntelligenceEnvironmentUserNotAuthorizedForAccount(sgqlc.types.Type):
    """The user is not authorized for this account"""

    __schema__ = nerdgraph
    __field_names__ = ("account_id",)
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account id the user is not authorized to receive an
    environment for
    """


class IncidentIntelligenceEnvironmentUserNotCapableToOperateOnAccount(sgqlc.types.Type):
    """The user is not capable to perform an operation on this account"""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "capability")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The account id the user is not capable to perform the operation on"""

    capability = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="capability"
    )
    """The capability the user is missing"""


class InfrastructureHostSummaryData(sgqlc.types.Type):
    """Summary statistics about the Infra Host."""

    __schema__ = nerdgraph
    __field_names__ = (
        "cpu_utilization_percent",
        "disk_used_percent",
        "memory_used_percent",
        "network_receive_rate",
        "network_transmit_rate",
        "services_count",
    )
    cpu_utilization_percent = sgqlc.types.Field(
        Float, graphql_name="cpuUtilizationPercent"
    )
    """Total CPU utilization as a percentage."""

    disk_used_percent = sgqlc.types.Field(Float, graphql_name="diskUsedPercent")
    """The cumulative disk fullness percentage."""

    memory_used_percent = sgqlc.types.Field(Float, graphql_name="memoryUsedPercent")
    """Total memory utilization as a percentage."""

    network_receive_rate = sgqlc.types.Field(Float, graphql_name="networkReceiveRate")
    """The number of bytes per second received during the sampling
    period.
    """

    network_transmit_rate = sgqlc.types.Field(Float, graphql_name="networkTransmitRate")
    """The number of bytes sent per second during the sampling period."""

    services_count = sgqlc.types.Field(Int, graphql_name="servicesCount")
    """Number of services running on the host."""


class InfrastructureIntegrationEntity(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("integration_type_code",)
    integration_type_code = sgqlc.types.Field(
        String, graphql_name="integrationTypeCode"
    )


class InfrastructureIntegrationEntityOutline(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("integration_type_code",)
    integration_type_code = sgqlc.types.Field(
        String, graphql_name="integrationTypeCode"
    )


class InstallationAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("install_status", "recipe_events", "recipes", "statuses")
    install_status = sgqlc.types.Field(
        "InstallationInstallStatus", graphql_name="installStatus"
    )
    """Look up the install event for a given account. - An install event
    is a representation for when the newrelic-cli has attempted an
    installation."
    """

    recipe_events = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("InstallationRecipeEvent")),
        graphql_name="recipeEvents",
    )
    """Look up all recipe events for a given account. - Recipe events are
    stored in our cache for any given account. - Recipe events are
    used in the nr1-install-newrelic nerdlet to provide an overview of
    all the attempted installation statuses.
    """

    recipes = sgqlc.types.Field(
        "InstallationRecipeEventResult",
        graphql_name="recipes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "install_id",
                    sgqlc.types.Arg(String, graphql_name="installId", default=None),
                ),
            )
        ),
    )
    """Look up recipe events for a given account by installId.

    Arguments:

    * `cursor` (`String`): used to fetch next page of results.  If not
      present, most recent events (first page) will be returned
    * `install_id` (`String`): installId associated to recipe events.
      If not present, all recipe events will be returned for the email
      provided from the service gateway email header
    """

    statuses = sgqlc.types.Field(
        "InstallationInstallStatusResult",
        graphql_name="statuses",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "install_id",
                    sgqlc.types.Arg(String, graphql_name="installId", default=None),
                ),
            )
        ),
    )
    """Look up install statuses for a given account by installId.

    Arguments:

    * `cursor` (`String`): used to fetch next page of results.  If not
      present, most recent install statuses (first page) will be
      returned
    * `install_id` (`String`): installId associated to recipe events.
      If not present, all install statuses will be returned for the
      email provided from the service gateway email header
    """


class InstallationInstallStatus(sgqlc.types.Type):
    """An object that contains the overall installation status that is
    created from within the newrelic-cli.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "cli_version",
        "enabled_proxy",
        "error",
        "host_name",
        "install_id",
        "install_library_version",
        "is_unsupported",
        "kernel_arch",
        "kernel_version",
        "log_file_path",
        "os",
        "platform",
        "platform_family",
        "platform_version",
        "redirect_url",
        "state",
        "targeted_install",
        "timestamp",
    )
    cli_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="cliVersion"
    )
    """The version of the newrelic-cli that was used for a given
    installation attempt.
    """

    enabled_proxy = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="enabledProxy"
    )
    """Whether or not the installation is using a proxy."""

    error = sgqlc.types.Field(
        sgqlc.types.non_null("InstallationStatusError"), graphql_name="error"
    )
    """The error returned for a given installation attempt."""

    host_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="hostName")
    """The host name of the customer's machine."""

    install_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="installId")
    """The unique ID that corresponds to an install status."""

    install_library_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="installLibraryVersion"
    )
    """The version of the open-install-library that is being used."""

    is_unsupported = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isUnsupported"
    )
    """Whether or not the installation is supported on the host machine."""

    kernel_arch = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="kernelArch"
    )
    """The kernel architecture of the customer's machine."""

    kernel_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="kernelVersion"
    )
    """The kernel version of the customer's machine."""

    log_file_path = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="logFilePath"
    )
    """The path to the log file on the customer's host."""

    os = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="os")
    """The OS of the customer's machine."""

    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="platform")
    """The platform name provided by the open-install-library."""

    platform_family = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="platformFamily"
    )
    """The platform family name provided by the open-install-library."""

    platform_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="platformVersion"
    )
    """The platform version provided by the open-install-library."""

    redirect_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="redirectUrl"
    )
    """A URL generated by the newrelic-cli that redirects to the
    appropriate entity once an installation is complete.
    """

    state = sgqlc.types.Field(
        sgqlc.types.non_null(InstallationInstallStateType), graphql_name="state"
    )
    """The state of the installation."""

    targeted_install = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="targetedInstall"
    )
    """Whether or not the installation is a targeted install."""

    timestamp = sgqlc.types.Field(EpochSeconds, graphql_name="timestamp")
    """The timestamp for when the install event occurred."""


class InstallationInstallStatusResult(sgqlc.types.Type):
    """A wrapper object that contains paginated install statuses along
    with counts and a pagination cursor
    """

    __schema__ = nerdgraph
    __field_names__ = ("cursor", "install_statuses", "total_count")
    cursor = sgqlc.types.Field(String, graphql_name="cursor")
    """Cursor for fetching next page of results.  Results are ordered by
    descending timestamp (most recent first)
    """

    install_statuses = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(InstallationInstallStatus)),
        graphql_name="installStatuses",
    )
    """List of InstallStatus objects"""

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")
    """Total number of InstallStatus results across all pages for a given
    query
    """


class InstallationRecipeEvent(sgqlc.types.Type):
    """An object that contains an installation event created from within
    the newrelic-cli.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "cli_version",
        "complete",
        "display_name",
        "entity_guid",
        "error",
        "host_name",
        "install_id",
        "install_library_version",
        "kernel_arch",
        "kernel_version",
        "log_file_path",
        "metadata",
        "name",
        "os",
        "platform",
        "platform_family",
        "platform_version",
        "redirect_url",
        "status",
        "targeted_install",
        "task_path",
        "timestamp",
        "validation_duration_milliseconds",
    )
    cli_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="cliVersion"
    )
    """The version of the newrelic-cli that was used for a given recipe."""

    complete = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="complete")
    """Whether or not the recipe has been installed and all steps have
    been completed.
    """

    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )
    """The display name for a given recipe."""

    entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="entityGuid"
    )
    """The entity Guid for a given recipe."""

    error = sgqlc.types.Field(
        sgqlc.types.non_null("InstallationStatusError"), graphql_name="error"
    )
    """The error returned for a given recipe."""

    host_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="hostName")
    """The host name of the customer's machine."""

    install_id = sgqlc.types.Field(ID, graphql_name="installId")
    """The unique ID that corresponds to an install event."""

    install_library_version = sgqlc.types.Field(
        SemVer, graphql_name="installLibraryVersion"
    )
    """The version of the open-install-library that is being used."""

    kernel_arch = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="kernelArch"
    )
    """The kernel architecture of the customer's machine."""

    kernel_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="kernelVersion"
    )
    """The kernel version of the customer's machine."""

    log_file_path = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="logFilePath"
    )
    """The path to the log file on the customer's host."""

    metadata = sgqlc.types.Field(InstallationRawMetadata, graphql_name="metadata")
    """Additional key:value data related to the environment where the
    installation occurred.
    """

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The unique name for a given recipe."""

    os = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="os")
    """The OS of the customer's machine."""

    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="platform")
    """The platform name provided by the open-install-library."""

    platform_family = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="platformFamily"
    )
    """The platform family name provided by the open-install-library."""

    platform_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="platformVersion"
    )
    """The platform version provided by the open-install-library."""

    redirect_url = sgqlc.types.Field(String, graphql_name="redirectUrl")
    """The redirect URL created by the CLI used for redirecting to a
    particular entity.
    """

    status = sgqlc.types.Field(
        sgqlc.types.non_null(InstallationRecipeStatusType), graphql_name="status"
    )
    """The status for a given recipe."""

    targeted_install = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="targetedInstall"
    )
    """Whether or not the recipe being installed is a targeted install."""

    task_path = sgqlc.types.Field(String, graphql_name="taskPath")
    """The path to the installation task as defined in the open-install-
    library.
    """

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="timestamp"
    )
    """The timestamp for when the recipe event occurred."""

    validation_duration_milliseconds = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds),
        graphql_name="validationDurationMilliseconds",
    )
    """The number of milliseconds it took to validate the recipe."""


class InstallationRecipeEventResult(sgqlc.types.Type):
    """A wrapper object that contains paginated recipe events along with
    counts and a pagination cursor
    """

    __schema__ = nerdgraph
    __field_names__ = ("cursor", "recipe_events", "total_count")
    cursor = sgqlc.types.Field(String, graphql_name="cursor")
    """Cursor for fetching next page of results.  Results are ordered by
    descending timestamp (most recent first)
    """

    recipe_events = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(InstallationRecipeEvent)),
        graphql_name="recipeEvents",
    )
    """List of RecipeEvent objects"""

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")
    """Total number of RecipeEvent results across all pages for a given
    query
    """


class InstallationStatusError(sgqlc.types.Type):
    """An object that represents a status error whenever an recipe has
    failed to install.
    """

    __schema__ = nerdgraph
    __field_names__ = ("details", "message")
    details = sgqlc.types.Field(String, graphql_name="details")
    """Error details, if any."""

    message = sgqlc.types.Field(String, graphql_name="message")
    """The actual error message."""


class JavaFlightRecorderFlamegraph(sgqlc.types.Type):
    """The flamegraph built from the strack trace samples"""

    __schema__ = nerdgraph
    __field_names__ = ("all_frames",)
    all_frames = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of("JavaFlightRecorderStackFrame")),
        graphql_name="allFrames",
    )
    """List of stack frames for the flamegraph"""


class JavaFlightRecorderStackFrame(sgqlc.types.Type):
    """A method within the flamegraph"""

    __schema__ = nerdgraph
    __field_names__ = ("count", "id", "name", "parent_id")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """The number of stack traces that this frame is in"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """This stackframe's id"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The stackframe's class and method name"""

    parent_id = sgqlc.types.Field(ID, graphql_name="parentId")
    """This stackframe's parent id"""


class LogConfigurationsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "data_partition_rules",
        "obfuscation_expressions",
        "obfuscation_rules",
        "parsing_rules",
        "pipeline_configuration",
        "test_grok",
    )
    data_partition_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("LogConfigurationsDataPartitionRule")),
        graphql_name="dataPartitionRules",
    )
    """Look up for all data partition rules for a given account."""

    obfuscation_expressions = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("LogConfigurationsObfuscationExpression")
        ),
        graphql_name="obfuscationExpressions",
    )
    """Look up for all obfuscation expressions for a given account"""

    obfuscation_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("LogConfigurationsObfuscationRule")),
        graphql_name="obfuscationRules",
    )
    """Look up for all obfuscation rules for a given account."""

    parsing_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("LogConfigurationsParsingRule")),
        graphql_name="parsingRules",
    )
    """Look up for all parsing rules for a given account."""

    pipeline_configuration = sgqlc.types.Field(
        "LogConfigurationsPipelineConfiguration", graphql_name="pipelineConfiguration"
    )
    """Look up pipeline configuration for a given account."""

    test_grok = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("LogConfigurationsGrokTestResult")),
        graphql_name="testGrok",
        args=sgqlc.types.ArgDict(
            (
                (
                    "grok",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="grok", default=None
                    ),
                ),
                (
                    "log_lines",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(String))
                        ),
                        graphql_name="logLines",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Test a Grok pattern against a list of log lines.

    Arguments:

    * `grok` (`String!`): The Grok pattern to test.
    * `log_lines` (`[String!]!`): The log lines to test the Grok
      pattern against.
    """


class LogConfigurationsCreateDataPartitionRuleError(sgqlc.types.Type):
    """Expected errors as a result of creating a new data partition rule."""

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")
    """The message with the error cause."""

    type = sgqlc.types.Field(
        LogConfigurationsCreateDataPartitionRuleErrorType, graphql_name="type"
    )
    """Type of error."""


class LogConfigurationsCreateDataPartitionRuleResponse(sgqlc.types.Type):
    """The result after creating a new data partition rule."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(LogConfigurationsCreateDataPartitionRuleError),
        graphql_name="errors",
    )
    """List of errors, if any."""

    rule = sgqlc.types.Field("LogConfigurationsDataPartitionRule", graphql_name="rule")
    """The created data partition rule."""


class LogConfigurationsCreateParsingRuleResponse(sgqlc.types.Type):
    """The result after creating a new parsing rule."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("LogConfigurationsParsingRuleMutationError"),
        graphql_name="errors",
    )
    """List of errors, if any."""

    rule = sgqlc.types.Field("LogConfigurationsParsingRule", graphql_name="rule")
    """The created parsing rule."""


class LogConfigurationsDataPartitionRule(sgqlc.types.Type):
    """The data partition rule for an account."""

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "created_by",
        "deleted",
        "description",
        "enabled",
        "id",
        "matching_criteria",
        "retention_policy",
        "target_data_partition",
        "updated_at",
        "updated_by",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """Identifies the date and time when the rule was created."""

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")
    """Identifies the user who has created the rule."""

    deleted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="deleted")
    """Whether or not this data partition rule is deleted. Deleting a
    data partition rule does not delete the already persisted data.
    This data will be retained for a given period of time specified in
    the retention policy field.
    """

    description = sgqlc.types.Field(String, graphql_name="description")
    """A description of what this data partition rule represents."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether or not this data partition rule is enabled."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Unique data partition rule identifier."""

    matching_criteria = sgqlc.types.Field(
        sgqlc.types.non_null("LogConfigurationsDataPartitionRuleMatchingCriteria"),
        graphql_name="matchingCriteria",
    )
    """The matching criteria for this data partition rule. Logs matching
    this criteria will be routed to the specified data partition once
    the rule is enabled.
    """

    retention_policy = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsDataPartitionRuleRetentionPolicyType),
        graphql_name="retentionPolicy",
    )
    """The retention policy of the data partition data."""

    target_data_partition = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsLogDataPartitionName),
        graphql_name="targetDataPartition",
    )
    """The name of the data partition."""

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")
    """Identifies the date and time when the rule was last updated."""

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")
    """Identifies the user who has last updated the rule."""


class LogConfigurationsDataPartitionRuleMatchingCriteria(sgqlc.types.Type):
    """The data partition rule matching criteria."""

    __schema__ = nerdgraph
    __field_names__ = ("attribute_name", "matching_expression", "matching_operator")
    attribute_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attributeName"
    )
    """The attribute name against which this matching condition will be
    evaluated.
    """

    matching_expression = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="matchingExpression"
    )
    """The matching expression of the data partition rule definition."""

    matching_operator = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsDataPartitionRuleMatchingOperator),
        graphql_name="matchingOperator",
    )
    """The matching method of the data partition rule definition."""


class LogConfigurationsDataPartitionRuleMutationError(sgqlc.types.Type):
    """An object that contains expected errors as a result of mutating an
    existing data partition rule.
    """

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")
    """The message with the error cause."""

    type = sgqlc.types.Field(
        LogConfigurationsDataPartitionRuleMutationErrorType, graphql_name="type"
    )
    """Type of error."""


class LogConfigurationsDeleteDataPartitionRuleResponse(sgqlc.types.Type):
    """The result after deleting a data partition rule."""

    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(LogConfigurationsDataPartitionRuleMutationError),
        graphql_name="errors",
    )
    """List of errors, if any."""


class LogConfigurationsDeleteParsingRuleResponse(sgqlc.types.Type):
    """The result after deleting a parsing rule."""

    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("LogConfigurationsParsingRuleMutationError"),
        graphql_name="errors",
    )
    """List of errors, if any."""


class LogConfigurationsGrokTestExtractedAttribute(sgqlc.types.Type):
    """An attribute that was extracted from a Grok test."""

    __schema__ = nerdgraph
    __field_names__ = ("name", "value")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The attribute name."""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """A string representation of the extracted value (which might not be
    a String).
    """


class LogConfigurationsGrokTestResult(sgqlc.types.Type):
    """The result of testing Grok on a log line."""

    __schema__ = nerdgraph
    __field_names__ = ("attributes", "log_line", "matched")
    attributes = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(LogConfigurationsGrokTestExtractedAttribute)
        ),
        graphql_name="attributes",
    )
    """Any attributes that were extracted."""

    log_line = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="logLine")
    """The log line that was tested against."""

    matched = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="matched")
    """Whether the Grok pattern matched."""


class LogConfigurationsObfuscationAction(sgqlc.types.Type):
    """Application of an obfuscation expression with specific a
    replacement method.
    """

    __schema__ = nerdgraph
    __field_names__ = ("attributes", "expression", "id", "method")
    attributes = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="attributes",
    )
    """Log record attributes to apply this expression to. An empty list
    applies the action to all the attributes.
    """

    expression = sgqlc.types.Field(
        sgqlc.types.non_null("LogConfigurationsObfuscationExpression"),
        graphql_name="expression",
    )
    """Obfuscation expression applied by this action."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The id of the obfuscation action."""

    method = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsObfuscationMethod), graphql_name="method"
    )
    """How to obfuscate matches for the applied expression."""


class LogConfigurationsObfuscationExpression(sgqlc.types.Type):
    """Reusable obfuscation expression."""

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "created_by",
        "description",
        "id",
        "name",
        "regex",
        "updated_at",
        "updated_by",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """Identifies the date and time when the expression was created."""

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")
    """Identifies the user who has created the expression."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of the expression."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The id of the obfuscation expression."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the expression."""

    regex = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="regex")
    """Regular expression for this obfuscation expression. Capture groups
    will be obscured on matching.
    """

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )
    """Identifies the date and time when the expression was last updated."""

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")
    """Identifies the user who has last updated the expression."""


class LogConfigurationsObfuscationRule(sgqlc.types.Type):
    """Rule for identifying a set of log data to apply specific
    obfuscation actions to.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "actions",
        "created_at",
        "created_by",
        "description",
        "enabled",
        "filter",
        "id",
        "name",
        "updated_at",
        "updated_by",
    )
    actions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(LogConfigurationsObfuscationAction)),
        graphql_name="actions",
    )
    """Obfuscation actions to take if a record passes the matching
    criteria.
    """

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """Identifies the date and time when the rule was created."""

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")
    """Identifies the user who has created the rule."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of the obfuscation rule."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the rule should be applied to incoming logs"""

    filter = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="filter")
    """NRQL filter to determine if a log record should have obfuscation
    actions applied.
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The id of the obfuscation rule."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the obfuscation rule."""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )
    """Identifies the date and time when the rule was last updated."""

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")
    """Identifies the user who has last updated the rule."""


class LogConfigurationsParsingRule(sgqlc.types.Type):
    """A parsing rule for an account."""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_by",
        "deleted",
        "description",
        "enabled",
        "grok",
        "id",
        "lucene",
        "nrql",
        "updated_at",
        "updated_by",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account id associated with the rule."""

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")
    """Identifies the user who has created the rule."""

    deleted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="deleted")
    """Whether or not this rule is deleted."""

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """A description of what this parsing rule represents."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether or not this rule is enabled."""

    grok = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="grok")
    """The Grok of what to parse."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Unique parsing rule identifier."""

    lucene = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="lucene")
    """The Lucene to match events to the parsing rule."""

    nrql = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="nrql")
    """The NRQL to match events to the parsing rule."""

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")
    """Identifies the date and time when the rule was last updated."""

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")
    """Identifies the user who has last updated the rule."""


class LogConfigurationsParsingRuleMutationError(sgqlc.types.Type):
    """Expected errors as a result of mutating a parsing rule."""

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")
    """The message with the error cause."""

    type = sgqlc.types.Field(
        LogConfigurationsParsingRuleMutationErrorType, graphql_name="type"
    )
    """Type of error."""


class LogConfigurationsPipelineConfiguration(sgqlc.types.Type):
    """The pipeline configuration for an account, with metadata."""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "enrichment_disabled",
        "json_parsing_disabled",
        "obfuscation_disabled",
        "parsing_disabled",
        "patterns_enabled",
        "recursive_json_parsing_disabled",
        "transformation_disabled",
        "updated_at",
        "updated_by",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account id."""

    enrichment_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="enrichmentDisabled"
    )
    """Whether or not enrichment is disabled."""

    json_parsing_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="jsonParsingDisabled"
    )
    """Whether or not JSON parsing is disabled."""

    obfuscation_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="obfuscationDisabled"
    )
    """Whether or not obfuscation is disabled."""

    parsing_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="parsingDisabled"
    )
    """Whether or not parsing is disabled."""

    patterns_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="patternsEnabled"
    )
    """Whether or not patterns are enabled."""

    recursive_json_parsing_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="recursiveJsonParsingDisabled"
    )
    """Whether or not recursive JSON parsing is disabled."""

    transformation_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="transformationDisabled"
    )
    """Whether or not transformation is disabled."""

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")
    """Identifies the date and time when the configuration was last
    updated, or null if this has never been changed from the defaults.
    """

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")
    """Identifies the user who has updated the configuration, or null if
    this has never been changed from the defaults.
    """


class LogConfigurationsUpdateDataPartitionRuleResponse(sgqlc.types.Type):
    """An object that represents the result after updating a data
    partition rule.
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(LogConfigurationsDataPartitionRuleMutationError),
        graphql_name="errors",
    )
    """List of errors, if any."""

    rule = sgqlc.types.Field(LogConfigurationsDataPartitionRule, graphql_name="rule")
    """The updated data partition rule."""


class LogConfigurationsUpdateParsingRuleResponse(sgqlc.types.Type):
    """The result after updating a parsing rule."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(LogConfigurationsParsingRuleMutationError),
        graphql_name="errors",
    )
    """List of errors, if any."""

    rule = sgqlc.types.Field(LogConfigurationsParsingRule, graphql_name="rule")
    """The updated parsing rule."""


class LogConfigurationsUpsertPipelineConfigurationResponse(sgqlc.types.Type):
    """The result after upserting pipeline configuration for an account."""

    __schema__ = nerdgraph
    __field_names__ = ("pipeline_configuration",)
    pipeline_configuration = sgqlc.types.Field(
        LogConfigurationsPipelineConfiguration, graphql_name="pipelineConfiguration"
    )
    """The updated pipeline configuration."""


class MetricNormalizationAccountStitchedFields(sgqlc.types.Type):
    """Return type for queries given an account ID."""

    __schema__ = nerdgraph
    __field_names__ = ("metric_normalization_rule", "metric_normalization_rules")
    metric_normalization_rule = sgqlc.types.Field(
        "MetricNormalizationRule",
        graphql_name="metricNormalizationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Retrieves a rule.

    Arguments:

    * `id` (`Int!`): Rule Id
    """

    metric_normalization_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("MetricNormalizationRule")),
        graphql_name="metricNormalizationRules",
    )
    """Retrieves the rules for the account."""


class MetricNormalizationRule(sgqlc.types.Type):
    """An object that represents a metric rename rule."""

    __schema__ = nerdgraph
    __field_names__ = (
        "action",
        "application_guid",
        "application_name",
        "created_at",
        "enabled",
        "eval_order",
        "id",
        "match_expression",
        "notes",
        "replacement",
        "terminate_chain",
    )
    action = sgqlc.types.Field(MetricNormalizationRuleAction, graphql_name="action")
    """Rule action."""

    application_guid = sgqlc.types.Field(EntityGuid, graphql_name="applicationGuid")
    """Application GUID"""

    application_name = sgqlc.types.Field(String, graphql_name="applicationName")
    """Application Name"""

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """Date of rule creation."""

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Is rule enabled?"""

    eval_order = sgqlc.types.Field(Int, graphql_name="evalOrder")
    """Rule evaluation order"""

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """Rule Id"""

    match_expression = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="matchExpression"
    )
    """Metric Match Expression."""

    notes = sgqlc.types.Field(String, graphql_name="notes")
    """Notes."""

    replacement = sgqlc.types.Field(String, graphql_name="replacement")
    """Metric Replacement Expression."""

    terminate_chain = sgqlc.types.Field(Boolean, graphql_name="terminateChain")
    """Whether it terminates the evaluation chain or not"""


class MetricNormalizationRuleMutationError(sgqlc.types.Type):
    """Error for mutation results"""

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")
    """Details of error"""

    type = sgqlc.types.Field(MetricNormalizationRuleErrorType, graphql_name="type")
    """Type of error"""


class MetricNormalizationRuleMutationResponse(sgqlc.types.Type):
    """The result of a metric rename rule mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(MetricNormalizationRuleMutationError), graphql_name="errors"
    )
    """An array containing errors, if any."""

    rule = sgqlc.types.Field(MetricNormalizationRule, graphql_name="rule")
    """The created rule"""


class MobileAppSummaryData(sgqlc.types.Type):
    """Mobile application summary data"""

    __schema__ = nerdgraph
    __field_names__ = (
        "app_launch_count",
        "crash_count",
        "crash_rate",
        "http_error_rate",
        "http_request_count",
        "http_request_rate",
        "http_response_time_average",
        "mobile_session_count",
        "network_failure_rate",
        "users_affected_count",
    )
    app_launch_count = sgqlc.types.Field(Int, graphql_name="appLaunchCount")
    """The number of times the app has been launched."""

    crash_count = sgqlc.types.Field(Int, graphql_name="crashCount")
    """The number of crashes."""

    crash_rate = sgqlc.types.Field(Float, graphql_name="crashRate")
    """Crash rate is percentage of crashes per sessions."""

    http_error_rate = sgqlc.types.Field(Float, graphql_name="httpErrorRate")
    """Error rate is the percentage of http errors per successful
    requests.
    """

    http_request_count = sgqlc.types.Field(Int, graphql_name="httpRequestCount")
    """The number of http requests."""

    http_request_rate = sgqlc.types.Field(Float, graphql_name="httpRequestRate")
    """The rate of http requests per minute."""

    http_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="httpResponseTimeAverage"
    )
    """The average response time for all http calls."""

    mobile_session_count = sgqlc.types.Field(Int, graphql_name="mobileSessionCount")
    """The number of mobile sessions."""

    network_failure_rate = sgqlc.types.Field(Float, graphql_name="networkFailureRate")
    """Network failure rate is the percentage of network failures per
    successful requests.
    """

    users_affected_count = sgqlc.types.Field(Int, graphql_name="usersAffectedCount")
    """The number of users affected by crashes."""


class MobilePushNotificationActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("devices",)
    devices = sgqlc.types.Field(
        sgqlc.types.list_of("MobilePushNotificationDevice"), graphql_name="devices"
    )
    """A list of mobile devices the user has registered for push
    notifications.
    """


class MobilePushNotificationDevice(sgqlc.types.Type):
    """Device info used for push notifications."""

    __schema__ = nerdgraph
    __field_names__ = (
        "app_version",
        "device_id",
        "device_name",
        "operating_system",
        "user_id",
    )
    app_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="appVersion"
    )
    """The version of the app."""

    device_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="deviceId")
    """The uuid of the device."""

    device_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="deviceName"
    )
    """The name of the device."""

    operating_system = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="operatingSystem"
    )
    """The OS this device is running (android/ios)."""

    user_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="userId")
    """The id of the user this device belongs to."""


class MobilePushNotificationRemoveDeviceResult(sgqlc.types.Type):
    """Result from removing a device."""

    __schema__ = nerdgraph
    __field_names__ = ("device_id", "message")
    device_id = sgqlc.types.Field(String, graphql_name="deviceId")
    """The uuid of the device that was removed."""

    message = sgqlc.types.Field(String, graphql_name="message")
    """The success or failure message from the attempted remove."""


class MobilePushNotificationSendPushResult(sgqlc.types.Type):
    """Result from sending a test push notification."""

    __schema__ = nerdgraph
    __field_names__ = ("message",)
    message = sgqlc.types.Field(String, graphql_name="message")
    """The success or failure message from the attempted test push."""


class NerdStorageAccountScope(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("collection", "document")
    collection = sgqlc.types.Field(
        sgqlc.types.list_of("NerdStorageCollectionMember"),
        graphql_name="collection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """The collection to be retrieved.

    Arguments:

    * `collection` (`String!`): The collection from which documents
      will be retrieved.
    """

    document = sgqlc.types.Field(
        NerdStorageDocument,
        graphql_name="document",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """A Nerdpack document is formed by an identifier (called documentId)
    and a set of data associated with it.

    Arguments:

    * `collection` (`String!`): The collection that the document
      belongs to.
    * `document_id` (`String!`): The documentId to be retrieved.
    """


class NerdStorageActorScope(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("collection", "document")
    collection = sgqlc.types.Field(
        sgqlc.types.list_of("NerdStorageCollectionMember"),
        graphql_name="collection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Nerdpack documents are stored inside a collection. A collection
    can be thought of as a key-value storage where each document is
    one of these key-value pairs.  To use the NerdStorage schema you
    must specify a Nerdpack ID using the NewRelic-Package-Id header in
    your request.

    Arguments:

    * `collection` (`String!`): The collection from which documents
      will be retrieved.
    """

    document = sgqlc.types.Field(
        NerdStorageDocument,
        graphql_name="document",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """A Nerdpack document is formed by an identifier (called documentId)
    and a set of data associated with it.  To use the NerdStorage
    schema you must specify a Nerdpack ID using the NewRelic-Package-
    Id header in your request.

    Arguments:

    * `collection` (`String!`): The collection that the document
      belongs to.
    * `document_id` (`String!`): The documentId to be retrieved.
    """


class NerdStorageCollectionMember(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("document", "id")
    document = sgqlc.types.Field(NerdStorageDocument, graphql_name="document")
    """The NerdStorage document."""

    id = sgqlc.types.Field(String, graphql_name="id")
    """The documentId."""


class NerdStorageDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("deleted",)
    deleted = sgqlc.types.Field(Int, graphql_name="deleted")


class NerdStorageEntityScope(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("collection", "document")
    collection = sgqlc.types.Field(
        sgqlc.types.list_of(NerdStorageCollectionMember),
        graphql_name="collection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "scope_by_actor",
                    sgqlc.types.Arg(Boolean, graphql_name="scopeByActor", default=None),
                ),
            )
        ),
    )
    """Arguments:

    * `collection` (`String!`)None
    * `scope_by_actor` (`Boolean`)None
    """

    document = sgqlc.types.Field(
        NerdStorageDocument,
        graphql_name="document",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
                (
                    "scope_by_actor",
                    sgqlc.types.Arg(Boolean, graphql_name="scopeByActor", default=None),
                ),
            )
        ),
    )
    """Arguments:

    * `collection` (`String!`)None
    * `document_id` (`String!`)None
    * `scope_by_actor` (`Boolean`)None
    """


class NerdStorageVaultActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("secret", "secrets")
    secret = sgqlc.types.Field(
        "NerdStorageVaultSecret",
        graphql_name="secret",
        args=sgqlc.types.ArgDict(
            (
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
            )
        ),
    )
    """Fetch a single secret by key.

    Arguments:

    * `key` (`String!`): The unique identifier used to look up the
      secret value
    """

    secrets = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("NerdStorageVaultSecret"))
        ),
        graphql_name="secrets",
    )
    """List the keys and values of all secrets you have access to for the
    current scope and nerdpack.
    """


class NerdStorageVaultDeleteSecretResult(sgqlc.types.Type):
    """Result of a mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "status")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("NerdStorageVaultResultError")),
        graphql_name="errors",
    )
    """Any errors that happend during the mutation."""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(NerdStorageVaultResultStatus), graphql_name="status"
    )
    """The status of the mutation."""


class NerdStorageVaultResultError(sgqlc.types.Type):
    """Mutation error information."""

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")
    """The error message."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(NerdStorageVaultErrorType), graphql_name="type"
    )
    """The type of error that occured when performing the mutation."""


class NerdStorageVaultSecret(sgqlc.types.Type):
    """Secret key and value."""

    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")
    """The unique identifier of the secret."""

    value = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="value")
    """The value of the secret."""


class NerdStorageVaultWriteSecretResult(sgqlc.types.Type):
    """Information about the result of the write secret mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "status")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(NerdStorageVaultResultError)),
        graphql_name="errors",
    )
    """Any errors that happend during the mutation."""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(NerdStorageVaultResultStatus), graphql_name="status"
    )
    """The status of the mutation."""


class NerdpackAllowListResult(sgqlc.types.Type):
    """Result of an allow list mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("nerdpack", "results_per_account")
    nerdpack = sgqlc.types.Field(
        sgqlc.types.non_null("NerdpackData"), graphql_name="nerdpack"
    )
    """Nerdpack to allow to subscribe."""

    results_per_account = sgqlc.types.Field(
        sgqlc.types.list_of("NerdpackMutationResultPerAccount"),
        graphql_name="resultsPerAccount",
    )
    """Subscription allow list result per account."""


class NerdpackAllowedAccount(sgqlc.types.Type):
    """Information about an account present on the allow-list"""

    __schema__ = nerdgraph
    __field_names__ = ("account_id",)
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """Allowed account id"""


class NerdpackAssetInfo(sgqlc.types.Type):
    """Info about Nerdpack assets."""

    __schema__ = nerdgraph
    __field_names__ = ("name", "size_in_bytes")
    name = sgqlc.types.Field(String, graphql_name="name")
    """Name of the asset."""

    size_in_bytes = sgqlc.types.Field(Int, graphql_name="sizeInBytes")
    """Size of the asset, in Bytes."""


class NerdpackData(sgqlc.types.Type):
    """The Nerdpack root object. Contains the Nerdpack information
    including the list of versions and subscriptions.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "allowed_accounts",
        "id",
        "subscription_model",
        "subscriptions",
        "versions",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """Unique identifier of the account that owns the Nerdpack."""

    allowed_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackAllowedAccount), graphql_name="allowedAccounts"
    )
    """Get the list of accounts specified on the allow list. If the user
    is authorized to the nerdpack owner account all the allowed
    accounts will be displayed, otherwise, only the intersection of
    allowed accounts and user authorized accounts will be displayed.
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Unique V5 uuid that identifies the Nerdpack."""

    subscription_model = sgqlc.types.Field(
        NerdpackSubscriptionModel, graphql_name="subscriptionModel"
    )
    """Type that defines the rules for account subscription."""

    subscriptions = sgqlc.types.Field(
        sgqlc.types.list_of("NerdpackSubscription"), graphql_name="subscriptions"
    )
    """List of subscriptions on versions of the given Nerdpack."""

    versions = sgqlc.types.Field(
        "NerdpackVersionsResult",
        graphql_name="versions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        NerdpackVersionFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )
    """Retrieve the versions for the given Nerdpack.

    Arguments:

    * `cursor` (`String`): Pagination cursor. Defaults to first page
    * `filter` (`NerdpackVersionFilter`): Version filter
    """


class NerdpackMutationResultPerAccount(sgqlc.types.Type):
    """Mutation result for the given acccount."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "reason", "result")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """Given account ID."""

    reason = sgqlc.types.Field(NerdpackMutationErrorType, graphql_name="reason")
    """Error type if mutation failed."""

    result = sgqlc.types.Field(
        sgqlc.types.non_null(NerdpackMutationResult), graphql_name="result"
    )
    """Mutation result for the given acccount."""


class NerdpackNerdpacks(sgqlc.types.Type):
    """Provides fields to query nerdpacks by different conditions"""

    __schema__ = nerdgraph
    __field_names__ = ("effective_subscribed_versions", "nerdpack", "subscribable")
    effective_subscribed_versions = sgqlc.types.Field(
        sgqlc.types.list_of("NerdpackVersion"),
        graphql_name="effectiveSubscribedVersions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "overrides",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(NerdpackOverrideVersionRules),
                        graphql_name="overrides",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Get the list of Nerdpack versions to which the requesting user's
    account is subscribed. This query allows for version or channel
    overrides by providing OverrideVersionRules objects.

    Arguments:

    * `overrides` (`[NerdpackOverrideVersionRules]`): List of version
      override rules per Nerdpack. The query will return the version
      that matches the specified rules (if it exists) for a given
      nerdpack instead of deciding which version has priority
    """

    nerdpack = sgqlc.types.Field(
        NerdpackData,
        graphql_name="nerdpack",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """If a Nerdpack with the given uuid exists, retrieve the Nerdpack
    object.

    Arguments:

    * `id` (`ID!`): Nerdpack id.
    """

    subscribable = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackData),
        graphql_name="subscribable",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_filter",
                    sgqlc.types.Arg(
                        NerdpackDataFilter, graphql_name="nerdpackFilter", default=None
                    ),
                ),
            )
        ),
    )
    """Returns the list of subscribable Nerdpacks of the current user.

    Arguments:

    * `nerdpack_filter` (`NerdpackDataFilter`): Nerdpack filter data.
    """


class NerdpackRemovedTagInfo(sgqlc.types.Type):
    """Information about removed tag"""

    __schema__ = nerdgraph
    __field_names__ = ("nerdpack_id", "tag_name", "version")
    nerdpack_id = sgqlc.types.Field(ID, graphql_name="nerdpackId")
    """UUID of the nerdpack"""

    tag_name = sgqlc.types.Field(NerdpackTagName, graphql_name="tagName")
    """Tag removed"""

    version = sgqlc.types.Field(SemVer, graphql_name="version")
    """Version affected"""


class NerdpackRemovedTagResponse(sgqlc.types.Type):
    """Removed Tag response"""

    __schema__ = nerdgraph
    __field_names__ = ("removed_tag_info", "status")
    removed_tag_info = sgqlc.types.Field(
        NerdpackRemovedTagInfo, graphql_name="removedTagInfo"
    )
    """Optional removed tag information"""

    status = sgqlc.types.Field(NerdpackRemovedTagResponseType, graphql_name="status")
    """The status of the response. Tells is the tag was deleted or not"""


class NerdpackSubscribeResult(sgqlc.types.Type):
    """Subscription result."""

    __schema__ = nerdgraph
    __field_names__ = ("nerdpack", "results_per_account", "tag")
    nerdpack = sgqlc.types.Field(
        sgqlc.types.non_null(NerdpackData), graphql_name="nerdpack"
    )
    """Nerdpack to be subscribed to."""

    results_per_account = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackMutationResultPerAccount),
        graphql_name="resultsPerAccount",
    )
    """Subscription result per account."""

    tag = sgqlc.types.Field(NerdpackTagName, graphql_name="tag")
    """Tag associated with the version."""


class NerdpackSubscription(sgqlc.types.Type):
    """Nerdpack subscription information."""

    __schema__ = nerdgraph
    __field_names__ = ("access_type", "account_id", "nerdpack_version", "tag")
    access_type = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackSubscriptionAccessType), graphql_name="accessType"
    )
    """What type of access the user has over this subscription. Eg:
    direct or inherited.
    """

    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """Unique identifier of the account that has subscribed to the
    Nerdpack.
    """

    nerdpack_version = sgqlc.types.Field(
        "NerdpackVersion", graphql_name="nerdpackVersion"
    )
    """Nerdpack associated to the subscribed version."""

    tag = sgqlc.types.Field(NerdpackTagName, graphql_name="tag")
    """Tag associated with the version."""


class NerdpackUnsubscribeResult(sgqlc.types.Type):
    """Result of trying to remove the subscription."""

    __schema__ = nerdgraph
    __field_names__ = ("nerdpack", "results_per_account")
    nerdpack = sgqlc.types.Field(
        sgqlc.types.non_null(NerdpackData), graphql_name="nerdpack"
    )
    """Nerdpack to be unsubscribed from."""

    results_per_account = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackMutationResultPerAccount),
        graphql_name="resultsPerAccount",
    )
    """Unsubscribe result per account."""


class NerdpackVersion(sgqlc.types.Type):
    """Contains files and information associated with a specific version
    of a Nerdpack.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "assets",
        "cli_version",
        "created_at",
        "created_by_user",
        "description",
        "display_name",
        "icon",
        "nerdpack_id",
        "repository_url",
        "sdk_version",
        "subscription_model",
        "tags",
        "version",
    )
    assets = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackAssetInfo), graphql_name="assets"
    )
    """List of assets present on this Nerdpack version."""

    cli_version = sgqlc.types.Field(SemVer, graphql_name="cliVersion")
    """Version of the CLI used to generate the Nerdpack."""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """Timestamp for the creation on the Nerdpack version."""

    created_by_user = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="createdByUser"
    )
    """Unique identifier of the user who created the version."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """A brief description of the artifact."""

    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """Human-readable Nerdpack's name."""

    icon = sgqlc.types.Field(String, graphql_name="icon")
    """Icon URL of Package"""

    nerdpack_id = sgqlc.types.Field(ID, graphql_name="nerdpackId")
    """Unique uuid V5 that identifies the Nerdpack."""

    repository_url = sgqlc.types.Field(String, graphql_name="repositoryUrl")
    """URL to the repository with the Nerdpack source code."""

    sdk_version = sgqlc.types.Field(String, graphql_name="sdkVersion")
    """Version of the SDK used to generate the Nerdpack."""

    subscription_model = sgqlc.types.Field(
        NerdpackSubscriptionModel, graphql_name="subscriptionModel"
    )
    """Nerdpack subscription model to filter."""

    tags = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(NerdpackTagName)), graphql_name="tags"
    )
    """List of tags associated with the Nerdpack version."""

    version = sgqlc.types.Field(sgqlc.types.non_null(SemVer), graphql_name="version")
    """Semver-compliant Nerdpack version."""


class NerdpackVersionsResult(sgqlc.types.Type):
    """Results of the nerdpack versions query."""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor that can be used to retrieve the next results page."""

    results = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackVersion), graphql_name="results"
    )
    """List of nerdpack version objects."""

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")
    """Total amount of available version objects for the given nerdpack
    (including the ones not showed in the current page)
    """


class Nr1CatalogActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "alert_policy_template",
        "categories",
        "dashboard_template",
        "data_source",
        "nerdpack",
        "nerdpacks",
        "quickstart",
        "quickstarts",
        "search",
    )
    alert_policy_template = sgqlc.types.Field(
        "Nr1CatalogAlertPolicyTemplate",
        graphql_name="alertPolicyTemplate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Information related to a alert policy template

    Arguments:

    * `id` (`ID!`): The ID associated with the alert policy template
    """

    categories = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogCategory")),
        graphql_name="categories",
    )
    """List of available categories for filtering and searching"""

    dashboard_template = sgqlc.types.Field(
        "Nr1CatalogDashboardTemplate",
        graphql_name="dashboardTemplate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Information related to a dashboard template

    Arguments:

    * `id` (`ID!`): The ID associated with the dashboard template
    """

    data_source = sgqlc.types.Field(
        "Nr1CatalogDataSource",
        graphql_name="dataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Information related to a data source

    Arguments:

    * `id` (`ID!`): The ID associated with the data source
    """

    nerdpack = sgqlc.types.Field(
        "Nr1CatalogNerdpack",
        graphql_name="nerdpack",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Information related to a deployed Nerdpack

    Arguments:

    * `id` (`ID!`): The ID associated with the Nerdpack
    """

    nerdpacks = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogNerdpack")),
        graphql_name="nerdpacks",
    )
    """List of nerdpacks available in the catalog"""

    quickstart = sgqlc.types.Field(
        "Nr1CatalogQuickstart",
        graphql_name="quickstart",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Catalog information related to a quickstart

    Arguments:

    * `id` (`ID!`): The ID associated with the quickstart
    """

    quickstarts = sgqlc.types.Field(
        "Nr1CatalogQuickstartsListing",
        graphql_name="quickstarts",
        args=sgqlc.types.ArgDict(
            (("cursor", sgqlc.types.Arg(String, graphql_name="cursor", default=None)),)
        ),
    )
    """List of Quickstarts available in New Relic I/O

    Arguments:

    * `cursor` (`String`): Cursor for pagination. Supplied by a
      previous Quickstarts query.
    """

    search = sgqlc.types.Field(
        "Nr1CatalogSearchResponse",
        graphql_name="search",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        Nr1CatalogSearchFilter, graphql_name="filter", default=None
                    ),
                ),
                ("query", sgqlc.types.Arg(String, graphql_name="query", default=None)),
                (
                    "sort_by",
                    sgqlc.types.Arg(
                        Nr1CatalogSearchSortOption,
                        graphql_name="sortBy",
                        default="ALPHABETICAL",
                    ),
                ),
            )
        ),
    )
    """Search for items in the catalog

    Arguments:

    * `cursor` (`String`): Cursor for pagination. Supplied by a
      previous search.
    * `filter` (`Nr1CatalogSearchFilter`): Set of filters to apply to
      the search
    * `query` (`String`): Search query string
    * `sort_by` (`Nr1CatalogSearchSortOption`): Method used to sort
      the search results (default: `ALPHABETICAL`)
    """


class Nr1CatalogAlertConditionOutline(sgqlc.types.Type):
    """An outline of a created alert condition"""

    __schema__ = nerdgraph
    __field_names__ = ("alert_condition_template", "id")
    alert_condition_template = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogAlertConditionTemplate"),
        graphql_name="alertConditionTemplate",
    )
    """The template id of the created alert condition"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The id of the created alert condition"""


class Nr1CatalogAlertConditionTemplate(sgqlc.types.Type):
    """Information about an alert condition template"""

    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the alert condition template"""

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogAlertConditionTemplateMetadata"),
        graphql_name="metadata",
    )
    """Metadata associated with the alert condition template"""


class Nr1CatalogAlertConditionTemplateMetadata(sgqlc.types.Type):
    """Metadata associated with the alert condition template"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "display_name", "type")
    description = sgqlc.types.Field(String, graphql_name="description")
    """A short form description for the alert condition template"""

    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """The human-readable name for the alert condition template"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogAlertConditionType), graphql_name="type"
    )
    """Determines the type of alert condition template that will be
    created
    """


class Nr1CatalogAlertPolicyOutline(sgqlc.types.Type):
    """An outline of a created alert policy"""

    __schema__ = nerdgraph
    __field_names__ = ("conditions", "id")
    conditions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogAlertConditionOutline)),
        graphql_name="conditions",
    )
    """A list of created alert conditions under this policy"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The id of the created alert policy"""


class Nr1CatalogAlertPolicyTemplate(sgqlc.types.Type):
    """Information about an alert policy template"""

    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata", "support_level", "updated_at")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the alert policy template"""

    metadata = sgqlc.types.Field(
        "Nr1CatalogAlertPolicyTemplateMetadata", graphql_name="metadata"
    )
    """Metadata associated with the alert policy template"""

    support_level = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSupportLevel), graphql_name="supportLevel"
    )
    """Level of support expected for the alert policy template"""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )
    """A timestamp that indicates when the alert policy template was last
    updated
    """


class Nr1CatalogAlertPolicyTemplateMetadata(sgqlc.types.Type):
    """Metadata associated with the alert policy template"""

    __schema__ = nerdgraph
    __field_names__ = (
        "authors",
        "categories",
        "category_terms",
        "conditions",
        "display_name",
        "icon",
        "required_data_sources",
    )
    authors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogAuthor"))
        ),
        graphql_name="authors",
    )
    """A list of authors that created the alert policy template"""

    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogCategory"))
        ),
        graphql_name="categories",
    )
    """The list of categories for filtering, searching, and grouping
    associated with the alert policy template
    """

    category_terms = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="categoryTerms",
    )
    """The list of category terms associated with the alert policy
    template
    """

    conditions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogAlertConditionTemplate))
        ),
        graphql_name="conditions",
    )
    """The list of alert condition templates attached to the alert policy
    template
    """

    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """The human-readable name for the alert policy template"""

    icon = sgqlc.types.Field("Nr1CatalogIcon", graphql_name="icon")
    """The corresponding icon for the alert policy template"""

    required_data_sources = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogDataSource"))
        ),
        graphql_name="requiredDataSources",
    )
    """A list of required data sources needed to populate data in the
    alert policy.
    """


class Nr1CatalogAuthor(sgqlc.types.Type):
    """Information about an author"""

    __schema__ = nerdgraph
    __field_names__ = ("name",)
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the author"""


class Nr1CatalogCategory(sgqlc.types.Type):
    """A thematic grouping for catalog items"""

    __schema__ = nerdgraph
    __field_names__ = ("display_name", "slug", "terms")
    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )
    """The human readable name of the category"""

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="slug")
    """The url friendly name of the category"""

    terms = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="terms",
    )
    """A list of terms that match catalog items to this category"""


class Nr1CatalogCategoryFacet(sgqlc.types.Type):
    """Information about a facet count on a category"""

    __schema__ = nerdgraph
    __field_names__ = ("count", "display_name")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """The count of results for this category"""

    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )
    """The category's display name"""


class Nr1CatalogCommunityContactChannel(sgqlc.types.Type):
    """A contact channel where users can get support via the community"""

    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """The URL linking to a website for support"""


class Nr1CatalogComponentFacet(sgqlc.types.Type):
    """Information about a facet count on a component"""

    __schema__ = nerdgraph
    __field_names__ = ("component", "count")
    component = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSearchComponentType), graphql_name="component"
    )
    """The type of component"""

    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """The count of results for this component"""


class Nr1CatalogDashboardOutline(sgqlc.types.Type):
    """An outline of a created dashboard"""

    __schema__ = nerdgraph
    __field_names__ = ("dashboard_guid",)
    dashboard_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="dashboardGuid"
    )
    """The guid of the created dashboard"""


class Nr1CatalogDashboardTemplate(sgqlc.types.Type):
    """Information about a dashboard template"""

    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata", "support_level", "updated_at")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the dashboard template"""

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogDashboardTemplateMetadata"),
        graphql_name="metadata",
    )
    """Metadata associated with the dashboard template"""

    support_level = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSupportLevel), graphql_name="supportLevel"
    )
    """Level of support expected for the dashboard template"""

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )
    """A timestamp that indicates when the dashboard template was last
    updated
    """


class Nr1CatalogDashboardTemplateMetadata(sgqlc.types.Type):
    """Metadata associated with a dashboard template"""

    __schema__ = nerdgraph
    __field_names__ = (
        "authors",
        "categories",
        "category_terms",
        "description",
        "display_name",
        "previews",
        "required_data_sources",
    )
    authors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogAuthor))
        ),
        graphql_name="authors",
    )
    """A list of authors that created the dashboard template"""

    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogCategory))
        ),
        graphql_name="categories",
    )
    """The list of categories for filtering, searching, and grouping
    associated with the dashboard template
    """

    category_terms = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="categoryTerms",
    )
    """The list of category terms associated with the dashboard template"""

    description = sgqlc.types.Field(String, graphql_name="description")
    """A short form description for a dashboard template."""

    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """The human-readable name for a dashboard template."""

    previews = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogPreview"))
        ),
        graphql_name="previews",
    )
    """A list of previews for a dashboard template, such as screenshots."""

    required_data_sources = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogDataSource"))
        ),
        graphql_name="requiredDataSources",
    )
    """A list of required data sources needed to populate data in the
    dashboard.
    """


class Nr1CatalogDataSource(sgqlc.types.Type):
    """Information about a data source"""

    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the data source"""

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogDataSourceMetadata"), graphql_name="metadata"
    )
    """Metadata associated with the data source"""


class Nr1CatalogDataSourceInstall(sgqlc.types.Type):
    """Information about a data source install"""

    __schema__ = nerdgraph
    __field_names__ = ("fallback", "primary")
    fallback = sgqlc.types.Field(
        "Nr1CatalogDataSourceInstallDirective", graphql_name="fallback"
    )
    """Provides context about how the fallback install should proceed"""

    primary = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogDataSourceInstallDirective"),
        graphql_name="primary",
    )
    """Provides context about how the primary install should proceed"""


class Nr1CatalogDataSourceMetadata(sgqlc.types.Type):
    """Metadata associated with a data source"""

    __schema__ = nerdgraph
    __field_names__ = (
        "auto_install_alert_policy_templates",
        "auto_install_dashboard_templates",
        "categories",
        "description",
        "display_name",
        "icon",
        "install",
        "keywords",
    )
    auto_install_alert_policy_templates = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogAlertPolicyTemplate))
        ),
        graphql_name="autoInstallAlertPolicyTemplates",
    )
    """A list of alert policy templates that are auto installed upon data
    source installation
    """

    auto_install_dashboard_templates = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogDashboardTemplate))
        ),
        graphql_name="autoInstallDashboardTemplates",
    )
    """A list of dashboard templates that are auto installed upon data
    source installation
    """

    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogCategory))
        ),
        graphql_name="categories",
    )
    """The categories for the data source"""

    description = sgqlc.types.Field(String, graphql_name="description")
    """A short form description for the data source"""

    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """The human-readable name for the data source"""

    icon = sgqlc.types.Field("Nr1CatalogIcon", graphql_name="icon")
    """The corresponding icon for the data source"""

    install = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogDataSourceInstall), graphql_name="install"
    )
    """Install information for the data source"""

    keywords = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="keywords",
    )
    """A list of keywords for filtering and searching"""


class Nr1CatalogEmailContactChannel(sgqlc.types.Type):
    """A contact channel where users can get support via email"""

    __schema__ = nerdgraph
    __field_names__ = ("address",)
    address = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="address")
    """The email address for email support"""


class Nr1CatalogIcon(sgqlc.types.Type):
    """Information about an icon"""

    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """The publicly accessible URL for the icon"""


class Nr1CatalogInstallAlertPolicyTemplateResult(sgqlc.types.Type):
    """Information about the mutation result when installing an alert
    policy template
    """

    __schema__ = nerdgraph
    __field_names__ = ("alert_policy_template", "created_alert_policy")
    alert_policy_template = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogAlertPolicyTemplate),
        graphql_name="alertPolicyTemplate",
    )
    """The template that was used for the installation"""

    created_alert_policy = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogAlertPolicyOutline),
        graphql_name="createdAlertPolicy",
    )
    """An outline of the created alert policy"""


class Nr1CatalogInstallDashboardTemplateResult(sgqlc.types.Type):
    """Information about the mutation result when installing a dashboard
    template
    """

    __schema__ = nerdgraph
    __field_names__ = ("created_dashboard", "dashboard_template")
    created_dashboard = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogDashboardOutline),
        graphql_name="createdDashboard",
    )
    """An outline of the created dashboard"""

    dashboard_template = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogDashboardTemplate),
        graphql_name="dashboardTemplate",
    )
    """The template that was used for the installation"""


class Nr1CatalogInstallPlanDirective(sgqlc.types.Interface):
    """Information about an install plan directive"""

    __schema__ = nerdgraph
    __field_names__ = ("mode",)
    mode = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogInstallPlanDirectiveMode), graphql_name="mode"
    )
    """The mode of the install plan directive"""


class Nr1CatalogInstallPlanStep(sgqlc.types.Type):
    """Information pertaining to a specific step in the installation plan"""

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "display_name",
        "fallback",
        "heading",
        "id",
        "primary",
        "target",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """A short form description for the install plan step"""

    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )
    """The human-readable name for the install plan step"""

    fallback = sgqlc.types.Field(
        Nr1CatalogInstallPlanDirective, graphql_name="fallback"
    )
    """Provides context about how the fallback install plan step should
    proceed
    """

    heading = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="heading")
    """Used as a heading for the install plan step"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the install plan step"""

    primary = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogInstallPlanDirective), graphql_name="primary"
    )
    """Provides context about how the primary install plan step should
    proceed
    """

    target = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogInstallPlanTarget"), graphql_name="target"
    )
    """Provides context about where the install will occur"""


class Nr1CatalogInstallPlanTarget(sgqlc.types.Type):
    """Represents the location of an install"""

    __schema__ = nerdgraph
    __field_names__ = ("destination", "os", "type")
    destination = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogInstallPlanDestination),
        graphql_name="destination",
    )
    """Provides context on the location the install will take place"""

    os = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(Nr1CatalogInstallPlanOperatingSystem)
            )
        ),
        graphql_name="os",
    )
    """Provides context for the operating system that will be targeted"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogInstallPlanTargetType), graphql_name="type"
    )
    """Provides context for the type of installation that will take place"""


class Nr1CatalogInstaller(sgqlc.types.Interface):
    """Information about how a quickstart is installed"""

    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogInstallerType), graphql_name="type"
    )
    """The type of installer"""


class Nr1CatalogIssuesContactChannel(sgqlc.types.Type):
    """A contact channel where users can get support via the repository
    issues page
    """

    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """The URL linking to the repository issues page"""


class Nr1CatalogLinkInstallDirective(sgqlc.types.Type):
    """Information about a link install directive"""

    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """The URL of the external link used to guide the user through
    installation
    """


class Nr1CatalogNerdletInstallDirective(sgqlc.types.Type):
    """Information about a nerdlet install directive"""

    __schema__ = nerdgraph
    __field_names__ = ("nerdlet_id", "nerdlet_state", "requires_account")
    nerdlet_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="nerdletId")
    """The nerdlet ID used to guide the user through installation"""

    nerdlet_state = sgqlc.types.Field(
        Nr1CatalogRawNerdletState, graphql_name="nerdletState"
    )
    """The nerdlet state used to intialize the nerdlet"""

    requires_account = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="requiresAccount"
    )
    """Determines if an account selection needs to be made prior to
    installation
    """


class Nr1CatalogNerdpack(sgqlc.types.Type):
    """Information about the Nerdpack"""

    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata", "visibility")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the Nerdpack"""

    metadata = sgqlc.types.Field("Nr1CatalogNerdpackMetadata", graphql_name="metadata")
    """Metadata associated with the Nerdpack that is available in the New
    Relic One Catalog
    """

    visibility = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogNerdpackVisibility), graphql_name="visibility"
    )
    """Indicates the visibility of the Nerdpack"""


class Nr1CatalogNerdpackItem(sgqlc.types.Interface):
    """Information about an item in a Nerdpack"""

    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the Nerdpack item."""

    metadata = sgqlc.types.Field(
        "Nr1CatalogNerdpackItemMetadata", graphql_name="metadata"
    )
    """Metadata associated with the Nerdpack item"""


class Nr1CatalogNerdpackItemMetadata(sgqlc.types.Interface):
    """Metadata information for an item in a Nerdpack"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "display_name", "previews")
    description = sgqlc.types.Field(String, graphql_name="description")
    """A short form description for the Nerdpack item."""

    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """The human-readable name for the Nerdpack item."""

    previews = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogPreview"))
        ),
        graphql_name="previews",
    )
    """A list of previews for the Nerdpack item, such as screenshots."""


class Nr1CatalogNerdpackMetadata(sgqlc.types.Type):
    """Metadata associated with the Nerdpack that is available in the New
    Relic One Catalog
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "additional_info",
        "categories",
        "category_terms",
        "description",
        "details",
        "display_name",
        "documentation",
        "icon",
        "included_artifact_types",
        "keywords",
        "nerdpack_items",
        "previews",
        "publish_date",
        "release_date",
        "repository",
        "support",
        "tagline",
        "version",
        "whats_new",
    )
    additional_info = sgqlc.types.Field(
        String,
        graphql_name="additionalInfo",
        args=sgqlc.types.ArgDict(
            (
                (
                    "format",
                    sgqlc.types.Arg(
                        Nr1CatalogRenderFormat,
                        graphql_name="format",
                        default="MARKDOWN",
                    ),
                ),
            )
        ),
    )
    """Additional information about the Nerdpack

    Arguments:

    * `format` (`Nr1CatalogRenderFormat`): The output format for the
      additional information (default: `MARKDOWN`)
    """

    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogCategory))
        ),
        graphql_name="categories",
    )
    """The list of categories for filtering, searching, and grouping
    associated with the Nerdpack
    """

    category_terms = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="categoryTerms",
    )
    """The list of category terms associated with the Nerdpack"""

    description = sgqlc.types.Field(String, graphql_name="description")
    """A short form description for the New Relic One Nerdpack. Used
    throughout the platform when displaying the Nerdpack.
    """

    details = sgqlc.types.Field(String, graphql_name="details")
    """The long form description used in the catalog to detail the
    functionality of the Nerdpack
    """

    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """The human-readable name for the Nerdpack. Used throughout the New
    Relic One platform when displaying the Nerdpack.
    """

    documentation = sgqlc.types.Field(
        String,
        graphql_name="documentation",
        args=sgqlc.types.ArgDict(
            (
                (
                    "format",
                    sgqlc.types.Arg(
                        Nr1CatalogRenderFormat,
                        graphql_name="format",
                        default="MARKDOWN",
                    ),
                ),
            )
        ),
    )
    """Additional documentation for the Nerdpack

    Arguments:

    * `format` (`Nr1CatalogRenderFormat`): The output format for the
      documentation (default: `MARKDOWN`)
    """

    icon = sgqlc.types.Field(Nr1CatalogIcon, graphql_name="icon")
    """The corresponding icon for the Nerdpack"""

    included_artifact_types = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="includedArtifactTypes"
    )
    """The types of artifacts (e.g. nerdlet, launcher, etc) contained in
    the nerdpack
    """

    keywords = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="keywords",
    )
    """The list of keywords for filtering and searching"""

    nerdpack_items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogNerdpackItem))
        ),
        graphql_name="nerdpackItems",
    )
    """Information related to items in the nerdpack"""

    previews = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogPreview"))
        ),
        graphql_name="previews",
    )
    """A list of previews for the Nerdpack, such as screenshots."""

    publish_date = sgqlc.types.Field(DateTime, graphql_name="publishDate")
    """The date the Nerdpack was published"""

    release_date = sgqlc.types.Field(DateTime, graphql_name="releaseDate")
    """The date the Nerdpack was deployed"""

    repository = sgqlc.types.Field(String, graphql_name="repository")
    """The URL to the repository where the source code for the Nerdpack
    can be found.
    """

    support = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogSupportChannels"), graphql_name="support"
    )
    """Contact information to get support for the Nerdpack"""

    tagline = sgqlc.types.Field(String, graphql_name="tagline")
    """A tagline for the Nerdpack"""

    version = sgqlc.types.Field(sgqlc.types.non_null(SemVer), graphql_name="version")
    """The nerdpack version the metadata corresponds with"""

    whats_new = sgqlc.types.Field("Nr1CatalogReleaseNote", graphql_name="whatsNew")
    """A description of changes for this version of the Nerdpack"""


class Nr1CatalogPreview(sgqlc.types.Interface):
    """Specifies fields required for types that implement the ability to
    display a media preview in the New Relic One Catalog
    """

    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """The publicly accessible URL for the preview"""


class Nr1CatalogQuickstart(sgqlc.types.Type):
    """Information about the quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ("featured", "id", "metadata", "source_url", "support_level")
    featured = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="featured")
    """Determines if this is a featured quickstart"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the quickstart"""

    metadata = sgqlc.types.Field(
        "Nr1CatalogQuickstartMetadata", graphql_name="metadata"
    )
    """Metadata associated with the quickstart"""

    source_url = sgqlc.types.Field(String, graphql_name="sourceUrl")
    """Specifies the URL where the source definition for the quickstart
    can be found
    """

    support_level = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSupportLevel), graphql_name="supportLevel"
    )
    """Level of support expected for the quickstart"""


class Nr1CatalogQuickstartComponent(sgqlc.types.Interface):
    """Information about a component in a quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ("metadata",)
    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogQuickstartComponentMetadata"),
        graphql_name="metadata",
    )
    """Metadata associated with the quickstart component"""


class Nr1CatalogQuickstartComponentMetadata(sgqlc.types.Interface):
    """Information related to the metadata attached to a quickstart
    component
    """

    __schema__ = nerdgraph
    __field_names__ = ("description", "display_name")
    description = sgqlc.types.Field(String, graphql_name="description")
    """A short form description for the quickstart component."""

    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """The human-readable name for the quickstart component."""


class Nr1CatalogQuickstartMetadata(sgqlc.types.Type):
    """Metadata associated with the quickstart that is available in New
    Relic I/O
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "authors",
        "categories",
        "category_terms",
        "data_sources",
        "description",
        "display_name",
        "icon",
        "installer",
        "keywords",
        "quickstart_components",
        "slug",
        "summary",
    )
    authors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogAuthor))
        ),
        graphql_name="authors",
    )
    """Authors for the quickstart"""

    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogCategory))
        ),
        graphql_name="categories",
    )
    """The list of categories for filtering, searching, and grouping
    associated with the quickstart
    """

    category_terms = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="categoryTerms",
    )
    """The list of category terms associated with the quickstart"""

    data_sources = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogDataSource))
        ),
        graphql_name="dataSources",
    )
    """The list of data sources associated with the quickstart"""

    description = sgqlc.types.Field(String, graphql_name="description")
    """A short form description for the quickstart. Used throughout the
    platform when displaying the quickstart.
    """

    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """The human-readable name for the quickstart. Used throughout the
    New Relic One platform when displaying the quickstart.
    """

    icon = sgqlc.types.Field(Nr1CatalogIcon, graphql_name="icon")
    """The corresponding icon for the quickstart"""

    installer = sgqlc.types.Field(Nr1CatalogInstaller, graphql_name="installer")
    """Information about how a quickstart is installed"""

    keywords = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="keywords",
    )
    """A list of keywords for filtering and searching"""

    quickstart_components = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogQuickstartComponent))
        ),
        graphql_name="quickstartComponents",
    )
    """List of components in a quickstart"""

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="slug")
    """The URL friendly name of the quickstart"""

    summary = sgqlc.types.Field(String, graphql_name="summary")
    """A short summary detailing the functionality of the quickstart"""


class Nr1CatalogQuickstartsListing(sgqlc.types.Type):
    """Paginated information about Quickstarts"""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor used to fetch the next set of results"""

    results = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogQuickstart))
        ),
        graphql_name="results",
    )
    """The list of quickstart results"""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """The total number of quickstart results"""


class Nr1CatalogReleaseNote(sgqlc.types.Type):
    """Information about the changes made to the metadata for a version
    of the Nerdpack
    """

    __schema__ = nerdgraph
    __field_names__ = ("changes", "version")
    changes = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="changes")
    """The description of changes made for this version of the Nerdpack"""

    version = sgqlc.types.Field(sgqlc.types.non_null(SemVer), graphql_name="version")
    """The version of the Nerdpack the changes correspond with"""


class Nr1CatalogSearchFacets(sgqlc.types.Type):
    """Information about facets from a search"""

    __schema__ = nerdgraph
    __field_names__ = ("categories", "components", "featured", "types")
    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogCategoryFacet))
        ),
        graphql_name="categories",
    )
    """Facet counts for each category"""

    components = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogComponentFacet))
        ),
        graphql_name="components",
    )
    """Facet counts for each component"""

    featured = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="featured")
    """Count of the number of featured results"""

    types = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogSearchResultTypeFacet"))
        ),
        graphql_name="types",
    )
    """Facet counts for each search result type"""


class Nr1CatalogSearchResponse(sgqlc.types.Type):
    """Information about results returned from a search"""

    __schema__ = nerdgraph
    __field_names__ = ("facets", "next_cursor", "results", "total_count")
    facets = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSearchFacets), graphql_name="facets"
    )
    """Get count information about the filters"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor used to fetch the next set of results"""

    results = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogSearchResult"))
        ),
        graphql_name="results",
    )
    """The list of search results"""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """The total number of results that match the search"""


class Nr1CatalogSearchResultTypeFacet(sgqlc.types.Type):
    """Information about a facet count on a search result type"""

    __schema__ = nerdgraph
    __field_names__ = ("count", "type")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """The count of results for this search result type"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSearchResultType), graphql_name="type"
    )
    """The type of search result"""


class Nr1CatalogSubmitMetadataError(sgqlc.types.Type):
    """Information about the error that occurred as a result of
    submitting metadata
    """

    __schema__ = nerdgraph
    __field_names__ = ("description", "field", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """A human-readable description of the error when submitting metadata"""

    field = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="field"
    )
    """The field that caused the error when submitting metadata"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSubmitMetadataErrorType), graphql_name="type"
    )
    """The type of error that occurred when submitting metadata"""


class Nr1CatalogSubmitMetadataResult(sgqlc.types.Type):
    """Information about the mutation result when submitting metadata"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "nerdpack", "result")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogSubmitMetadataError)),
        graphql_name="errors",
    )
    """A list of errors that may have occurred as a result of submitting
    metadata
    """

    nerdpack = sgqlc.types.Field(Nr1CatalogNerdpack, graphql_name="nerdpack")
    """The Nerdpack with updated information as a result of running the
    mutation
    """

    result = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogMutationResult), graphql_name="result"
    )
    """The mutation result when submitting metadata"""


class Nr1CatalogSupportChannels(sgqlc.types.Type):
    """A container for the various support channels"""

    __schema__ = nerdgraph
    __field_names__ = ("community", "email", "issues")
    community = sgqlc.types.Field(
        Nr1CatalogCommunityContactChannel, graphql_name="community"
    )
    """A support channel available via the community"""

    email = sgqlc.types.Field(Nr1CatalogEmailContactChannel, graphql_name="email")
    """A support channel available via email"""

    issues = sgqlc.types.Field(Nr1CatalogIssuesContactChannel, graphql_name="issues")
    """A support channel available via an issues page"""


class Nr1CatalogSupportedEntityTypes(sgqlc.types.Interface):
    """Specifies fields required for types that implement the ability to
    determine the level of supported entity types.
    """

    __schema__ = nerdgraph
    __field_names__ = ("mode",)
    mode = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSupportedEntityTypesMode), graphql_name="mode"
    )
    """Determines the supported entity type mode."""


class NrdbMetadata(sgqlc.types.Type):
    """An object containing metadata about the query and result."""

    __schema__ = nerdgraph
    __field_names__ = ("event_types", "facets", "messages", "time_window")
    event_types = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="eventTypes"
    )
    """A list of the event types that were queried."""

    facets = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="facets")
    """A list of facets that were queried."""

    messages = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="messages")
    """Messages from NRDB included with the result."""

    time_window = sgqlc.types.Field("NrdbMetadataTimeWindow", graphql_name="timeWindow")
    """Details about the query time window."""


class NrdbMetadataTimeWindow(sgqlc.types.Type):
    """An object representing details about a query's time window."""

    __schema__ = nerdgraph
    __field_names__ = ("begin", "compare_with", "end", "since", "until")
    begin = sgqlc.types.Field(EpochMilliseconds, graphql_name="begin")
    """Timestamp marking the query begin time."""

    compare_with = sgqlc.types.Field(String, graphql_name="compareWith")
    """A clause representing the comparison time window."""

    end = sgqlc.types.Field(EpochMilliseconds, graphql_name="end")
    """Timestamp marking the query end time."""

    since = sgqlc.types.Field(String, graphql_name="since")
    """SINCE clause resulting from the query"""

    until = sgqlc.types.Field(String, graphql_name="until")
    """UNTIL clause resulting from the query"""


class NrdbQueryProgress(sgqlc.types.Type):
    """An object containing metadata about the execution of an
    asynchronous NRQL query.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "completed",
        "query_id",
        "result_expiration",
        "retry_after",
        "retry_deadline",
    )
    completed = sgqlc.types.Field(Boolean, graphql_name="completed")
    """Whether the query has finished executing."""

    query_id = sgqlc.types.Field(ID, graphql_name="queryId")
    """A token for retrieving the results of a previously executed
    asynchronous query.
    """

    result_expiration = sgqlc.types.Field(Seconds, graphql_name="resultExpiration")
    """Results of the completed query will expire permanently after this
    long.
    """

    retry_after = sgqlc.types.Field(Seconds, graphql_name="retryAfter")
    """Wait at least this long before querying for completed results with
    the `queryId`.
    """

    retry_deadline = sgqlc.types.Field(Seconds, graphql_name="retryDeadline")
    """The server may cancel the NRDB query after this long if no GraphQL
    queries have been made to check the `queryId`'s status.
    """


class NrdbResultContainer(sgqlc.types.Type):
    """A data structure that contains the results of the NRDB query along
    with other capabilities that enhance those results.  Direct query
    results are available through `results`, `totalResult` and
    `otherResult`. The query you made is accessible through `nrql`,
    along with `metadata` about the query itself. Enhanced
    capabilities include `eventDefinitions`, `suggestedFacets` and
    more.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "current_results",
        "embedded_chart_url",
        "event_definitions",
        "metadata",
        "nrql",
        "other_result",
        "previous_results",
        "query_progress",
        "raw_response",
        "results",
        "static_chart_url",
        "suggested_facets",
        "suggested_queries",
        "total_result",
    )
    current_results = sgqlc.types.Field(
        sgqlc.types.list_of(NrdbResult), graphql_name="currentResults"
    )
    """In a `COMPARE WITH` query, the `currentResults` contain the
    results for the current comparison time window.
    """

    embedded_chart_url = sgqlc.types.Field(
        String,
        graphql_name="embeddedChartUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "chart_type",
                    sgqlc.types.Arg(
                        EmbeddedChartType, graphql_name="chartType", default=None
                    ),
                ),
            )
        ),
    )
    """Generate a publicly sharable Embedded Chart URL for the NRQL
    query.  For more details, see [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/query-nrql-through-new-relic-graphql-api#embeddable-
    charts).

    Arguments:

    * `chart_type` (`EmbeddedChartType`): The type of chart
      visualization you want rendered.  We will default to the best
      fit for the provided NRQL query if omitted.
    """

    event_definitions = sgqlc.types.Field(
        sgqlc.types.list_of(EventDefinition), graphql_name="eventDefinitions"
    )
    """Retrieve a list of event type definitions, providing descriptions
    of the event types returned by this query, as well as details of
    their attributes.
    """

    metadata = sgqlc.types.Field(NrdbMetadata, graphql_name="metadata")
    """Metadata about the query and result."""

    nrql = sgqlc.types.Field(Nrql, graphql_name="nrql")
    """The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-
    query-language/nrql-resources/nrql-syntax-components-functions)
    query that was executed to yield these results.
    """

    other_result = sgqlc.types.Field(NrdbResult, graphql_name="otherResult")
    """In a `FACET` query, the `otherResult` contains the aggregates
    representing the events _not_ contained in an individual `results`
    facet.
    """

    previous_results = sgqlc.types.Field(
        sgqlc.types.list_of(NrdbResult), graphql_name="previousResults"
    )
    """In a `COMPARE WITH` query, the `previousResults` contain the
    results for the previous comparison time window.
    """

    query_progress = sgqlc.types.Field(NrdbQueryProgress, graphql_name="queryProgress")
    """Metadata about the execution of an asynchronous NRQL query."""

    raw_response = sgqlc.types.Field(NrdbRawResults, graphql_name="rawResponse")
    """The raw query results exactly as they are returned from NRDB.
    NerdGraph provides no additional transformation.
    """

    results = sgqlc.types.Field(sgqlc.types.list_of(NrdbResult), graphql_name="results")
    """The query results. This is a flat list of objects who's structure
    matches the query submitted.
    """

    static_chart_url = sgqlc.types.Field(
        String,
        graphql_name="staticChartUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "chart_type",
                    sgqlc.types.Arg(
                        ChartImageType, graphql_name="chartType", default=None
                    ),
                ),
                (
                    "format",
                    sgqlc.types.Arg(
                        ChartFormatType, graphql_name="format", default="PNG"
                    ),
                ),
                ("height", sgqlc.types.Arg(Int, graphql_name="height", default=None)),
                ("width", sgqlc.types.Arg(Int, graphql_name="width", default=None)),
            )
        ),
    )
    """Generate a publicly sharable static chart URL for the NRQL query.

    Arguments:

    * `chart_type` (`ChartImageType`): The type of static chart
      visualization you want rendered.  We will default to the best
      fit for the provided NRQL query if omitted.
    * `format` (`ChartFormatType`): The type of static chart format
      you want rendered. (default: `PNG`)
    * `height` (`Int`): The height of static chart format you want
      rendered.
    * `width` (`Int`): The width of static chart format you want
      rendered.
    """

    suggested_facets = sgqlc.types.Field(
        sgqlc.types.list_of("NrqlFacetSuggestion"), graphql_name="suggestedFacets"
    )
    """Retrieve a list of suggested NRQL facets for this NRDB query, to
    be used with the `FACET` keyword in NRQL.  Results are based on
    historical query behaviors.  If the query already has a `FACET`
    clause, it will be ignored for the purposes of suggesting facets.
    For more details, see [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/nerdgraph-graphiql-nrql-tutorial#suggest-facets).
    """

    suggested_queries = sgqlc.types.Field(
        "SuggestedNrqlQueryResponse",
        graphql_name="suggestedQueries",
        args=sgqlc.types.ArgDict(
            (
                (
                    "anomaly_time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="anomalyTimeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Suggested queries that could help explain an anomaly in your
    timeseries based on either statistical differences in the data or
    historical usage.  If no `anomalyTimeWindow` is supplied, we will
    attempt to detect a spike in the NRQL results. If no spike is
    found, the suggested query results will be empty.  Input NRQL must
    be a TIMESERIES query and must have exactly one result.

    Arguments:

    * `anomaly_time_window` (`TimeWindowInput`): The time window of a
      specific anomaly in milliseconds since Epoch time.
    """

    total_result = sgqlc.types.Field(NrdbResult, graphql_name="totalResult")
    """In a `FACET` query, the `totalResult` contains the aggregates
    representing _all_ the events, whether or not they are contained
    in an individual `results` facet.
    """


class NrqlDropRulesAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("list",)
    list = sgqlc.types.Field("NrqlDropRulesListDropRulesResult", graphql_name="list")
    """List the drop rules for the given account"""


class NrqlDropRulesCreateDropRuleFailure(sgqlc.types.Type):
    """Error details about the rule that failed to be created and why."""

    __schema__ = nerdgraph
    __field_names__ = ("error", "submitted")
    error = sgqlc.types.Field(
        sgqlc.types.non_null("NrqlDropRulesError"), graphql_name="error"
    )
    """Information about why the create failed."""

    submitted = sgqlc.types.Field(
        sgqlc.types.non_null("NrqlDropRulesCreateDropRuleSubmission"),
        graphql_name="submitted",
    )
    """Input information about a submitted rule that was unable to be
    created.
    """


class NrqlDropRulesCreateDropRuleResult(sgqlc.types.Type):
    """The result of which submitted drop rules were successfully and
    unsuccessfully created.
    """

    __schema__ = nerdgraph
    __field_names__ = ("failures", "successes")
    failures = sgqlc.types.Field(
        sgqlc.types.list_of(NrqlDropRulesCreateDropRuleFailure), graphql_name="failures"
    )
    """Rules that were not created and why."""

    successes = sgqlc.types.Field(
        sgqlc.types.list_of("NrqlDropRulesDropRule"), graphql_name="successes"
    )
    """Rules that were successfully created."""


class NrqlDropRulesCreateDropRuleSubmission(sgqlc.types.Type):
    """The details that were submitted when creating a drop rule."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "action", "description", "nrql")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account the targeted data report to."""

    action = sgqlc.types.Field(
        sgqlc.types.non_null(NrqlDropRulesAction), graphql_name="action"
    )
    """The type of drop rule you want. This changes the way your NRQL
    string is interpreted.
    """

    description = sgqlc.types.Field(String, graphql_name="description")
    """Additional information about the rule."""

    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")
    """The NRQL string used to match data you want to take the specified
    action on.
    """


class NrqlDropRulesDeleteDropRuleFailure(sgqlc.types.Type):
    """Error details about the rule that failed to be deleted and why."""

    __schema__ = nerdgraph
    __field_names__ = ("error", "submitted")
    error = sgqlc.types.Field(
        sgqlc.types.non_null("NrqlDropRulesError"), graphql_name="error"
    )
    """Information about why the delete failed."""

    submitted = sgqlc.types.Field(
        sgqlc.types.non_null("NrqlDropRulesDeleteDropRuleSubmission"),
        graphql_name="submitted",
    )
    """Input information about on what was unable to be deleted."""


class NrqlDropRulesDeleteDropRuleResult(sgqlc.types.Type):
    """The result of which drop rules were successfully and
    unsuccessfully deleted.
    """

    __schema__ = nerdgraph
    __field_names__ = ("failures", "successes")
    failures = sgqlc.types.Field(
        sgqlc.types.list_of(NrqlDropRulesDeleteDropRuleFailure), graphql_name="failures"
    )
    """Rules that were not deleted and why."""

    successes = sgqlc.types.Field(
        sgqlc.types.list_of("NrqlDropRulesDropRule"), graphql_name="successes"
    )
    """Rules that were successfully deleted."""


class NrqlDropRulesDeleteDropRuleSubmission(sgqlc.types.Type):
    """The rules that were attempted to be deleted."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "rule_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """Account the rule was created on."""

    rule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="ruleId")
    """Id of the rule you want to delete."""


class NrqlDropRulesDropRule(sgqlc.types.Type):
    """Details of a drop rule."""

    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "account_id",
        "action",
        "created_at",
        "created_by",
        "creator",
        "description",
        "id",
        "nrql",
        "source",
    )
    account = sgqlc.types.Field(AccountReference, graphql_name="account")
    """The account this drop rule targets."""

    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The account this drop rule targets."""

    action = sgqlc.types.Field(
        sgqlc.types.non_null(NrqlDropRulesAction), graphql_name="action"
    )
    """The behavior of the drop rule."""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )
    """The time this drop rule was created."""

    created_by = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="createdBy")
    """The id of the user that created the drop rule."""

    creator = sgqlc.types.Field("UserReference", graphql_name="creator")
    """The user reference of the user that created the drop rule"""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Additional information about the rule."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique id for the drop rule."""

    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")
    """The NRQL used to match data that will receive the `action`."""

    source = sgqlc.types.Field(String, graphql_name="source")
    """Who or what registered this rule."""


class NrqlDropRulesError(sgqlc.types.Type):
    """Error details when processing drop rule requests."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "reason")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """A detailed error message."""

    reason = sgqlc.types.Field(
        sgqlc.types.non_null(NrqlDropRulesErrorReason), graphql_name="reason"
    )
    """The category of error that occurred."""


class NrqlDropRulesListDropRulesResult(sgqlc.types.Type):
    """The result of the request to list drop rules for an account."""

    __schema__ = nerdgraph
    __field_names__ = ("error", "rules")
    error = sgqlc.types.Field(NrqlDropRulesError, graphql_name="error")
    """Information about why we could not list rules."""

    rules = sgqlc.types.Field(
        sgqlc.types.list_of(NrqlDropRulesDropRule), graphql_name="rules"
    )
    """The list of drop rules queried on the targeted account."""


class NrqlFacetSuggestion(sgqlc.types.Type):
    """A suggested NRQL facet. Facet suggestions may be either a single
    attribute, or a list of attributes in the case of multi-attribute
    facet suggestions.
    """

    __schema__ = nerdgraph
    __field_names__ = ("attributes", "nrql")
    attributes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="attributes"
    )
    """A list of attribute names comprising the suggested facet.  Raw
    attribute names will be returned here. Attribute names may need to
    be backtick-quoted before inclusion in a NRQL query.
    """

    nrql = sgqlc.types.Field(Nrql, graphql_name="nrql")
    """A modified version of the input NRQL, with a `FACET ...` clause
    appended. If the original NRQL had a `FACET` clause already, it
    will be replaced.
    """


class NrqlHistoricalQuery(sgqlc.types.Type):
    """An NRQL query executed in the past."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "nrql", "timestamp")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The Account ID queried."""

    nrql = sgqlc.types.Field(Nrql, graphql_name="nrql")
    """The NRQL query executed."""

    timestamp = sgqlc.types.Field(EpochSeconds, graphql_name="timestamp")
    """The time the query was executed."""


class OpenInstallationAttributes(sgqlc.types.Type):
    """Custom event data attributes"""

    __schema__ = nerdgraph
    __field_names__ = ("logtype",)
    logtype = sgqlc.types.Field(String, graphql_name="logtype")
    """Built-in parsing rulesets"""


class OpenInstallationDashboardEntityResult(sgqlc.types.Type):
    """A subset of the DashboardEntityResult obtained from calling the
    DashboardCreate mutation
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "component_id",
        "created_at",
        "description",
        "guid",
        "name",
        "updated_at",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """Account ID."""

    component_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="componentId"
    )
    """The componentId of the original dashboard component"""

    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")
    """Dashboard creation timestamp."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Dashboard description."""

    guid = sgqlc.types.Field(ID, graphql_name="guid")
    """Unique entity identifier."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Dashboard name."""

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")
    """Dashboard update timestamp."""


class OpenInstallationDocsStitchedFields(sgqlc.types.Type):
    """Search for and execute installation of additional instrumentation
    and integrations
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "observability_pack",
        "quickstart",
        "quickstart_search",
        "recipe",
        "recipe_search",
    )
    observability_pack = sgqlc.types.Field(
        "OpenInstallationObservabilityPack",
        graphql_name="observabilityPack",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Fetch a observabilityPack by ID

    Arguments:

    * `id` (`ID!`): The observabilityPack ID
    """

    quickstart = sgqlc.types.Field(
        "OpenInstallationQuickstart",
        graphql_name="quickstart",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Fetch a observabilityPack by ID

    Arguments:

    * `id` (`ID!`): The quickstart ID
    """

    quickstart_search = sgqlc.types.Field(
        "OpenInstallationQuickstartResults",
        graphql_name="quickstartSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "criteria",
                    sgqlc.types.Arg(
                        OpenInstallationQuickstartInputCriteria,
                        graphql_name="criteria",
                        default=None,
                    ),
                ),
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
            )
        ),
    )
    """Search all Quickstarts

    Arguments:

    * `criteria` (`OpenInstallationQuickstartInputCriteria`): Criteria
      for searching quickstarts
    * `cursor` (`String`): Cursor for pagination. Supplied by a
      previous QuickstartSearch query.
    """

    recipe = sgqlc.types.Field(
        "OpenInstallationRecipe",
        graphql_name="recipe",
        args=sgqlc.types.ArgDict(
            (("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),)
        ),
    )
    """Fetch a recipe by ID

    Arguments:

    * `id` (`ID`): The recipe ID
    """

    recipe_search = sgqlc.types.Field(
        "OpenInstallationRecipeListResult",
        graphql_name="recipeSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "criteria",
                    sgqlc.types.Arg(
                        OpenInstallationRecipeSearchCriteria,
                        graphql_name="criteria",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Search all recipes

    Arguments:

    * `criteria` (`OpenInstallationRecipeSearchCriteria`): Criteria
      for searching installable integration recipes
    """


class OpenInstallationInstallPlan(sgqlc.types.Type):
    """Defines how to install agents, integrations, and instrumentation
    for a quickstart
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "fallback",
        "id",
        "install",
        "name",
        "target",
        "title",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """Description for display in the Installation Plan UI step"""

    fallback = sgqlc.types.Field(
        "OpenInstallationInstallPlanDirective", graphql_name="fallback"
    )
    """Object representing how the fallback install plan should proceed"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The id of the InstallPlan"""

    install = sgqlc.types.Field(
        sgqlc.types.non_null("OpenInstallationInstallPlanDirective"),
        graphql_name="install",
    )
    """Context about how the primary install plan should proceed"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Name for display in the Installation Plan UI step"""

    target = sgqlc.types.Field(
        sgqlc.types.non_null("OpenInstallationInstallPlanTarget"), graphql_name="target"
    )
    """Context about where the install will occur"""

    title = sgqlc.types.Field(String, graphql_name="title")
    """Title for display in the Installation Plan UI step"""


class OpenInstallationInstallPlanDirective(sgqlc.types.Type):
    """Set of attributes which represent how an install takes place"""

    __schema__ = nerdgraph
    __field_names__ = ("destination", "mode")
    destination = sgqlc.types.Field(
        sgqlc.types.non_null("OpenInstallationInstallPlanDirectiveDestination"),
        graphql_name="destination",
    )
    """Pairs with the mode to form the install directive"""

    mode = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationInstallPlanDirectiveMode),
        graphql_name="mode",
    )
    """Indicates the mode of operation for the install directive"""


class OpenInstallationInstallPlanDirectiveDestination(sgqlc.types.Type):
    """Install plan directive destination"""

    __schema__ = nerdgraph
    __field_names__ = ("nerdlet_id", "nerdlet_state", "recipe_name", "url")
    nerdlet_id = sgqlc.types.Field(ID, graphql_name="nerdletId")
    """Nerdlet Id for nerdlet experience"""

    nerdlet_state = sgqlc.types.Field(OpenInstallationJson, graphql_name="nerdletState")
    """Nerdlet State to be passed to the nerdlet experience"""

    recipe_name = sgqlc.types.Field(String, graphql_name="recipeName")
    """Recipe name for targeted install experience"""

    url = sgqlc.types.Field(String, graphql_name="url")
    """Url for external link experience"""


class OpenInstallationInstallPlanTarget(sgqlc.types.Type):
    """Set of attributes which represent where an install takes place"""

    __schema__ = nerdgraph
    __field_names__ = ("context", "destination", "os", "type")
    context = sgqlc.types.Field(String, graphql_name="context")
    """Gives additional context about installing on this target.
    Displayed in the Installation Plan UI sidebar.
    """

    destination = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationInstallPlanDestination),
        graphql_name="destination",
    )
    """Target destination - context for where the install will take place"""

    os = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(OpenInstallationOperatingSystem)),
        graphql_name="os",
    )
    """Target Operating System"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationInstallPlanTargetType), graphql_name="type"
    )
    """Target type - context for what type of installation is taking
    place
    """


class OpenInstallationLogMatch(sgqlc.types.Type):
    """Matches partial list of the Log forwarding parameters"""

    __schema__ = nerdgraph
    __field_names__ = ("attributes", "file", "name", "pattern", "systemd")
    attributes = sgqlc.types.Field(
        OpenInstallationAttributes, graphql_name="attributes"
    )
    """List of custom attributes, as key-value pairs, that can be used to
    send additional data with the logs which you can then query.
    """

    file = sgqlc.types.Field(String, graphql_name="file")
    """Path to the log file or files."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the log or logs."""

    pattern = sgqlc.types.Field(String, graphql_name="pattern")
    """Regular expression for filtering records."""

    systemd = sgqlc.types.Field(String, graphql_name="systemd")
    """Service name (Linux Only)."""


class OpenInstallationObservabilityPack(sgqlc.types.Type):
    """An Observability Pack (collection of related Observability
    features)
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "alerts",
        "authors",
        "dashboards",
        "description",
        "documentation",
        "icon_url",
        "id",
        "keywords",
        "level",
        "logo_url",
        "name",
        "pack_url",
        "summary",
        "tags",
        "title",
        "website_url",
    )
    alerts = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("OpenInstallationObservabilityPackAlert")
        ),
        graphql_name="alerts",
    )
    """List of Alerts contained in this Observability Pack"""

    authors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="authors",
    )
    """List of contributors for this Observability Pack"""

    dashboards = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("OpenInstallationObservabilityPackDashboard")
        ),
        graphql_name="dashboards",
    )
    """List of Dashboards contained in this Observability Pack"""

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """A short form description for this Observability Pack. Used
    throughout the platform when displaying the pack.
    """

    documentation = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("OpenInstallationObservabilityPackDocumentation")
        ),
        graphql_name="documentation",
    )
    """List of Documentation referenced in this Observability Pack"""

    icon_url = sgqlc.types.Field(String, graphql_name="iconUrl")
    """URL of icon for this Observability Pack"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """A unique Observability Pack identifier"""

    keywords = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="keywords"
    )
    """Tags for filtering / searching criteria"""

    level = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationObservabilityPackLevel),
        graphql_name="level",
    )
    """Level categorization of Observability Pack"""

    logo_url = sgqlc.types.Field(String, graphql_name="logoUrl")
    """URL of logo for this Observability Pack"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of this Observability Pack"""

    pack_url = sgqlc.types.Field(String, graphql_name="packUrl")
    """URL to link to location of this Observability Pack in the open
    source repo
    """

    summary = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="summary")
    """A short form description for this Observability Pack."""

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="tags"
    )
    """Tags for filtering / searching criteria"""

    title = sgqlc.types.Field(String, graphql_name="title")
    """The name of the pack displayed everywhere the pack is referenced"""

    website_url = sgqlc.types.Field(String, graphql_name="websiteUrl")
    """URL of website for this Observability Pack"""


class OpenInstallationObservabilityPackAlert(sgqlc.types.Type):
    """An Observability Pack Alert"""

    __schema__ = nerdgraph
    __field_names__ = ("details", "name", "type", "url")
    details = sgqlc.types.Field(String, graphql_name="details")
    """Details of this Alert"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of this Alert"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationObservabilityPackAlertType),
        graphql_name="type",
    )
    """Type of Alert"""

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """URL of Alert JSON definition"""


class OpenInstallationObservabilityPackAlertConditionCreateResult(sgqlc.types.Type):
    """The resulting response from created alert conditions"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "id", "name", "type")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Alert description."""

    id = sgqlc.types.Field(ID, graphql_name="id")
    """Unique alert condition identifier."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Alert name."""

    type = sgqlc.types.Field(
        OpenInstallationObservabilityPackAlertType, graphql_name="type"
    )
    """Alert type."""


class OpenInstallationObservabilityPackAlertCreateResult(sgqlc.types.Type):
    """The resulting response from calling the alert creation mutations"""

    __schema__ = nerdgraph
    __field_names__ = ("alert_conditions", "policy_id", "policy_name")
    alert_conditions = sgqlc.types.Field(
        sgqlc.types.list_of(
            OpenInstallationObservabilityPackAlertConditionCreateResult
        ),
        graphql_name="alertConditions",
    )
    """Alert conditions created."""

    policy_id = sgqlc.types.Field(ID, graphql_name="policyId")
    """Unique alert policy identifier."""

    policy_name = sgqlc.types.Field(String, graphql_name="policyName")
    """Alert policy name."""


class OpenInstallationObservabilityPackDashboard(sgqlc.types.Type):
    """An Observability Pack Dashboard"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "name", "screenshots", "url")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """Description of this Dashboard"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of this Dashboard"""

    screenshots = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="screenshots",
    )
    """List of screenshot URLs related to this Dashboard"""

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """URL of Dashboard JSON definition"""


class OpenInstallationObservabilityPackDocumentation(sgqlc.types.Type):
    """An Observability Pack Documentation Reference"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "name", "url")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of Documentation"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of this Documentation"""

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """URL of Documentation"""


class OpenInstallationObservabilityPackFilter(sgqlc.types.Type):
    """Metadata used to filter for Observability Packs"""

    __schema__ = nerdgraph
    __field_names__ = ("level", "name")
    level = sgqlc.types.Field(
        OpenInstallationObservabilityPackLevel, graphql_name="level"
    )
    """Level categorization of Observability Pack"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Name of the Observability Pack"""


class OpenInstallationObservabilityPackInstallResult(sgqlc.types.Type):
    """The mutation result from installing an Observability Pack"""

    __schema__ = nerdgraph
    __field_names__ = ("alerts", "dashboards", "errors")
    alerts = sgqlc.types.Field(
        OpenInstallationObservabilityPackAlertCreateResult, graphql_name="alerts"
    )
    """A list of AlertPolicyCreateResult obtained from calling the alert
    creation mutations
    """

    dashboards = sgqlc.types.Field(
        sgqlc.types.list_of(OpenInstallationDashboardEntityResult),
        graphql_name="dashboards",
    )
    """A list of DashboardEntityResult obtained from calling the
    DashboardCreate mutation
    """

    errors = sgqlc.types.Field(
        sgqlc.types.list_of("OpenInstallationObservabilityPackResultError"),
        graphql_name="errors",
    )
    """List of possible expected errors arising from calling underlying
    APIs
    """


class OpenInstallationObservabilityPackResultError(sgqlc.types.Type):
    """Expected errors that can be returned when attempting to install an
    Observability Pack
    """

    __schema__ = nerdgraph
    __field_names__ = ("component_name", "component_type", "description", "type")
    component_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="componentName"
    )
    """Component name the error occurred for"""

    component_type = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationObservabiiltyPackComponentType),
        graphql_name="componentType",
    )
    """Component type the error occurred for"""

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """Error description"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationObservabilityPackInstallErrorType),
        graphql_name="type",
    )
    """Error type"""


class OpenInstallationPostInstallConfiguration(sgqlc.types.Type):
    """Optional post-install configuration items"""

    __schema__ = nerdgraph
    __field_names__ = ("info",)
    info = sgqlc.types.Field(String, graphql_name="info")
    """Message/Docs notice displayed to user after running the recipe"""


class OpenInstallationPreInstallConfiguration(sgqlc.types.Type):
    """Optional pre-install configuration items"""

    __schema__ = nerdgraph
    __field_names__ = ("info", "prompt", "require_at_discovery")
    info = sgqlc.types.Field(String, graphql_name="info")
    """Message/Docs notice displayed to user prior to running recipe"""

    prompt = sgqlc.types.Field(String, graphql_name="prompt")
    """Message/Docs notice displayed to user prior to running recipe"""

    require_at_discovery = sgqlc.types.Field(String, graphql_name="requireAtDiscovery")
    """Script block to be executed during system discovery, a successful
    exit status will mark the recipe for execution
    """


class OpenInstallationQuickstart(sgqlc.types.Type):
    """A Quickstart (collection of related Observability features)"""

    __schema__ = nerdgraph
    __field_names__ = (
        "alerts",
        "authors",
        "dashboards",
        "description",
        "documentation",
        "icon_url",
        "id",
        "install_plans",
        "keywords",
        "level",
        "logo_url",
        "name",
        "pack_url",
        "summary",
        "title",
        "website_url",
    )
    alerts = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("OpenInstallationQuickstartAlert")),
        graphql_name="alerts",
    )
    """List of Alerts contained in this Quickstart"""

    authors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="authors",
    )
    """List of contributors for this Quickstart"""

    dashboards = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("OpenInstallationQuickstartDashboard")
        ),
        graphql_name="dashboards",
    )
    """List of Dashboards contained in this Quickstart"""

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """A short form description for this Quickstart. Used throughout the
    platform when displaying the pack.
    """

    documentation = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("OpenInstallationQuickstartDocumentation")
        ),
        graphql_name="documentation",
    )
    """List of Documentation referenced in this Quickstart"""

    icon_url = sgqlc.types.Field(String, graphql_name="iconUrl")
    """URL of icon for this Quickstart"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """A unique Quickstart identifier"""

    install_plans = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(OpenInstallationInstallPlan)),
        graphql_name="installPlans",
    )
    """List of Install Plans for this Quickstart"""

    keywords = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="keywords"
    )
    """Tags for filtering / searching criteria"""

    level = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationQuickstartLevel), graphql_name="level"
    )
    """Level categorization of Quickstart"""

    logo_url = sgqlc.types.Field(String, graphql_name="logoUrl")
    """URL of logo for this Quickstart"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of this Quickstart"""

    pack_url = sgqlc.types.Field(String, graphql_name="packUrl")
    """URL to link to location of this Quickstart in the open source repo"""

    summary = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="summary")
    """A short form description for this Quickstart."""

    title = sgqlc.types.Field(String, graphql_name="title")
    """The name of the pack displayed everywhere the pack is referenced"""

    website_url = sgqlc.types.Field(String, graphql_name="websiteUrl")
    """URL of website for this Quickstart"""


class OpenInstallationQuickstartAlert(sgqlc.types.Type):
    """A Quickstart Alert"""

    __schema__ = nerdgraph
    __field_names__ = ("details", "id", "name", "type", "url")
    details = sgqlc.types.Field(String, graphql_name="details")
    """Details of this Alert"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Id of this alert"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of this Alert"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationQuickstartAlertType), graphql_name="type"
    )
    """Type of Alert"""

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """URL of Alert JSON definition"""


class OpenInstallationQuickstartAlertConditionCreateResult(sgqlc.types.Type):
    """The resulting response from created alert conditions"""

    __schema__ = nerdgraph
    __field_names__ = ("component_id", "description", "id", "name", "type")
    component_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="componentId"
    )
    """The componentId of the original alertCondition component"""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Alert condition description."""

    id = sgqlc.types.Field(ID, graphql_name="id")
    """Unique alert condition identifier."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Alert condition name."""

    type = sgqlc.types.Field(OpenInstallationQuickstartAlertType, graphql_name="type")
    """Alert condition type."""


class OpenInstallationQuickstartAlertCreateResult(sgqlc.types.Type):
    """The resulting response from created alerts"""

    __schema__ = nerdgraph
    __field_names__ = ("alert_conditions", "alert_policy")
    alert_conditions = sgqlc.types.Field(
        sgqlc.types.list_of(OpenInstallationQuickstartAlertConditionCreateResult),
        graphql_name="alertConditions",
    )
    """Created alert conditions."""

    alert_policy = sgqlc.types.Field(
        "OpenInstallationQuickstartAlertPolicyCreateResult", graphql_name="alertPolicy"
    )
    """Created alert policy"""


class OpenInstallationQuickstartAlertPolicyCreateResult(sgqlc.types.Type):
    """The resulting response from a created alert policy"""

    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(ID, graphql_name="id")
    """Id of the created alert policy"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Name of the created alert policy"""


class OpenInstallationQuickstartDashboard(sgqlc.types.Type):
    """A Quickstart Dashboard"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "id", "name", "screenshots", "url")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """Description of this Dashboard"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """Id of this Dashboard"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of this Dashboard"""

    screenshots = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="screenshots",
    )
    """List of screenshot URLs related to this Dashboard"""

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """URL of Dashboard JSON definition"""


class OpenInstallationQuickstartDocumentation(sgqlc.types.Type):
    """A Quickstart Documentation Reference"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "name", "url")
    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of Documentation"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of this Documentation"""

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """URL of Documentation"""


class OpenInstallationQuickstartEntityType(sgqlc.types.Type):
    """Entity type relation for Quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ("domain", "type")
    domain = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="domain")
    """Domain of Entity"""

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")
    """Type of Entity"""


class OpenInstallationQuickstartInstallResult(sgqlc.types.Type):
    """The mutation result from installing a Quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ("alerts", "dashboards", "errors")
    alerts = sgqlc.types.Field(
        OpenInstallationQuickstartAlertCreateResult, graphql_name="alerts"
    )
    """The result obtained from calling the alert creation mutations"""

    dashboards = sgqlc.types.Field(
        sgqlc.types.list_of(OpenInstallationDashboardEntityResult),
        graphql_name="dashboards",
    )
    """A list of DashboardEntityResult obtained from calling the
    DashboardCreate mutation
    """

    errors = sgqlc.types.Field(
        sgqlc.types.list_of("OpenInstallationQuickstartResultError"),
        graphql_name="errors",
    )
    """List of possible expected errors arising from calling underlying
    APIs
    """


class OpenInstallationQuickstartResultError(sgqlc.types.Type):
    """Expected errors that can be returned when attempting to install a
    Quickstart
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "component_id",
        "component_name",
        "component_type",
        "description",
        "type",
    )
    component_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="componentId"
    )
    """Component ID the error occurred for"""

    component_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="componentName"
    )
    """Component name the error occurred for"""

    component_type = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationQuickstartComponentType),
        graphql_name="componentType",
    )
    """Component type the error occurred for"""

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """Error description"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationQuickstartInstallErrorType),
        graphql_name="type",
    )
    """Error type"""


class OpenInstallationQuickstartResults(sgqlc.types.Type):
    """A data structure that contains the detailed response of a
    Quickstart search.  The direct search result is available through
    results. Information about the query itself is available through
    count.
    """

    __schema__ = nerdgraph
    __field_names__ = ("count", "next_cursor", "results")
    count = sgqlc.types.Field(Int, graphql_name="count")
    """Number of results"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """Cursor pointing to the end of the current page of Quickstarts.
    Null if final page.
    """

    results = sgqlc.types.Field(
        "OpenInstallationQuickstartSearchResult", graphql_name="results"
    )
    """The paginated results of the Quickstart search"""


class OpenInstallationQuickstartSearchResult(sgqlc.types.Type):
    """A data structure that contains Quickstarts and the related
    components.
    """

    __schema__ = nerdgraph
    __field_names__ = ("quickstarts",)
    quickstarts = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(OpenInstallationQuickstart)),
        graphql_name="quickstarts",
    )
    """List of Quickstarts returned for this search"""


class OpenInstallationQuickstartsFilter(sgqlc.types.Type):
    """Metadata used to filter for Quickstarts"""

    __schema__ = nerdgraph
    __field_names__ = ("category", "entity_type", "name")
    category = sgqlc.types.Field(OpenInstallationCategory, graphql_name="category")
    """Categorization of Quickstart"""

    entity_type = sgqlc.types.Field(
        OpenInstallationQuickstartEntityType, graphql_name="entityType"
    )
    """Entity relationship for Quickstart"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the Quickstart"""


class OpenInstallationRecipe(sgqlc.types.Type):
    """Installation instructions and definition of an instrumentation
    integration
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "dependencies",
        "description",
        "display_name",
        "file",
        "id",
        "input_vars",
        "install",
        "install_targets",
        "keywords",
        "log_match",
        "name",
        "observability_packs",
        "post_install",
        "pre_install",
        "process_match",
        "quickstarts",
        "repository",
        "stability",
        "success_link_config",
        "validation_nrql",
    )
    dependencies = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="dependencies"
    )
    """Named list of dependencies for this recipe"""

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """Description of the recipe"""

    display_name = sgqlc.types.Field(String, graphql_name="displayName")
    """Friendly name of the integration"""

    file = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="file")
    """The full contents of the recipe file (yaml)"""

    id = sgqlc.types.Field(ID, graphql_name="id")
    """The ID"""

    input_vars = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("OpenInstallationRecipeInputVariable")
        ),
        graphql_name="inputVars",
    )
    """List of variables to prompt for input from the user"""

    install = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="install")
    """Go-task's taskfile definition (see https://taskfile.dev/#/usage)"""

    install_targets = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null("OpenInstallationRecipeInstallTarget")
            )
        ),
        graphql_name="installTargets",
    )
    """Object representing the intended install target"""

    keywords = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="keywords",
    )
    """Tags"""

    log_match = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(OpenInstallationLogMatch)),
        graphql_name="logMatch",
    )
    """# Partial list of possible Log forwarding parameters"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Short unique handle for the name of the integration"""

    observability_packs = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(OpenInstallationObservabilityPackFilter)
        ),
        graphql_name="observabilityPacks",
    )
    """Metadata used to recommend and install Observability Packs"""

    post_install = sgqlc.types.Field(
        OpenInstallationPostInstallConfiguration, graphql_name="postInstall"
    )
    """Object representing optional post-install configuration items"""

    pre_install = sgqlc.types.Field(
        OpenInstallationPreInstallConfiguration, graphql_name="preInstall"
    )
    """Object representing optional pre-install configuration items"""

    process_match = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="processMatch",
    )
    """List of process definitions used to match CLI process detection"""

    quickstarts = sgqlc.types.Field(
        OpenInstallationQuickstartsFilter, graphql_name="quickstarts"
    )
    """Metadata used to recommend and install Quickstarts"""

    repository = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="repository"
    )
    """Github repository url"""

    stability = sgqlc.types.Field(OpenInstallationStability, graphql_name="stability")
    """Indicates stability level of recipe"""

    success_link_config = sgqlc.types.Field(
        "OpenInstallationSuccessLinkConfig", graphql_name="successLinkConfig"
    )
    """Metadata to support generating a URL after installation success"""

    validation_nrql = sgqlc.types.Field(Nrql, graphql_name="validationNrql")
    """NRQL the newrelic-cli uses to validate this recipe is successfully
    sending data to New Relic
    """


class OpenInstallationRecipeInputVariable(sgqlc.types.Type):
    """Recipe input variable prompts displayed to the user prior to
    execution
    """

    __schema__ = nerdgraph
    __field_names__ = ("default", "name", "prompt", "secret")
    default = sgqlc.types.Field(String, graphql_name="default")
    """Default value of variable"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Name of the variable"""

    prompt = sgqlc.types.Field(String, graphql_name="prompt")
    """Message to present to the user"""

    secret = sgqlc.types.Field(Boolean, graphql_name="secret")
    """Indicates a password field"""


class OpenInstallationRecipeInstallTarget(sgqlc.types.Type):
    """Matrix of supported installation criteria for this recipe"""

    __schema__ = nerdgraph
    __field_names__ = (
        "kernel_arch",
        "kernel_version",
        "os",
        "platform",
        "platform_family",
        "platform_version",
        "type",
    )
    kernel_arch = sgqlc.types.Field(String, graphql_name="kernelArch")
    """OS kernel architecture"""

    kernel_version = sgqlc.types.Field(String, graphql_name="kernelVersion")
    """OS kernel version"""

    os = sgqlc.types.Field(OpenInstallationOperatingSystem, graphql_name="os")
    """Operating system"""

    platform = sgqlc.types.Field(OpenInstallationPlatform, graphql_name="platform")
    """Operating System distribution"""

    platform_family = sgqlc.types.Field(
        OpenInstallationPlatformFamily, graphql_name="platformFamily"
    )
    """Operating System distribution family"""

    platform_version = sgqlc.types.Field(String, graphql_name="platformVersion")
    """OS distribution version"""

    type = sgqlc.types.Field(OpenInstallationTargetType, graphql_name="type")
    """Target type"""


class OpenInstallationRecipeListResult(sgqlc.types.Type):
    """List of recipes"""

    __schema__ = nerdgraph
    __field_names__ = ("count", "results")
    count = sgqlc.types.Field(Int, graphql_name="count")
    """Number of recipes returned"""

    results = sgqlc.types.Field(
        sgqlc.types.list_of(OpenInstallationRecipe), graphql_name="results"
    )
    """List of recipes"""


class OpenInstallationSuccessLinkConfig(sgqlc.types.Type):
    """Metadata to support generating a URL after installation success"""

    __schema__ = nerdgraph
    __field_names__ = ("filter", "type")
    filter = sgqlc.types.Field(String, graphql_name="filter")
    """An optional filter for appending to the URL"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(OpenInstallationSuccessLinkType), graphql_name="type"
    )
    """The type of the link to generate"""


class Organization(sgqlc.types.Type):
    """The `Organization` object provides basic data about an
    organization.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "account_management",
        "authorization_management",
        "customer_id",
        "id",
        "name",
        "user_management",
    )
    account_management = sgqlc.types.Field(
        AccountManagementOrganizationStitchedFields, graphql_name="accountManagement"
    )
    """This field provides access to AccountManagement data."""

    authorization_management = sgqlc.types.Field(
        AuthorizationManagementOrganizationStitchedFields,
        graphql_name="authorizationManagement",
    )
    """This field provides access to AuthorizationManagement data."""

    customer_id = sgqlc.types.Field(String, graphql_name="customerId")
    """The customer id for the organization."""

    id = sgqlc.types.Field(ID, graphql_name="id")
    """The ID of the organization."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the organization."""

    user_management = sgqlc.types.Field(
        "UserManagementOrganizationStitchedFields", graphql_name="userManagement"
    )
    """This field provides access to UserManagement data."""


class OrganizationError(sgqlc.types.Type):
    """A user-readable error"""

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """A description of the error."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(OrganizationUpdateErrorType), graphql_name="type"
    )
    """A description of the type of error."""


class OrganizationInformation(sgqlc.types.Type):
    """The attributes of an organization."""

    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")
    """The ID of the organization."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the organization."""


class OrganizationProvisioningUpdateSubscriptionResult(sgqlc.types.Type):
    """Result of subscription update"""

    __schema__ = nerdgraph
    __field_names__ = ("enqueued", "errors")
    enqueued = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enqueued")
    """Status of enqueuing update in subscription change service"""

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null("OrganizationProvisioningUserError")
            )
        ),
        graphql_name="errors",
    )
    """Error message from enqueuing update in subscription change service"""


class OrganizationProvisioningUserError(sgqlc.types.Type):
    """A user-readable error"""

    __schema__ = nerdgraph
    __field_names__ = ("message", "path")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """A description of the error"""

    path = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="path"
    )
    """Which input value this error came from"""


class OrganizationUpdateResponse(sgqlc.types.Type):
    """The return object for an update mutation."""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "organization_information")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(OrganizationError))
        ),
        graphql_name="errors",
    )
    """A description of any errors with the mutation."""

    organization_information = sgqlc.types.Field(
        OrganizationInformation, graphql_name="organizationInformation"
    )
    """Information about the updated organization."""


class PixieAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("linked_pixie_project", "pixie_access_token")
    linked_pixie_project = sgqlc.types.Field(
        "PixiePixieProject", graphql_name="linkedPixieProject"
    )
    """Details for the linked Pixie project"""

    pixie_access_token = sgqlc.types.Field(SecureValue, graphql_name="pixieAccessToken")
    """Get a Pixie access token"""


class PixieActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("linked_pixie_projects",)
    linked_pixie_projects = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of("PixieLinkedPixieProject")),
        graphql_name="linkedPixieProjects",
    )
    """Details for the linked Pixie projects"""


class PixieLinkPixieProjectError(sgqlc.types.Type):
    """An error object for linking a Pixie project."""

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")
    """A message explaining what the error is about."""

    type = sgqlc.types.Field(PixieLinkPixieProjectErrorType, graphql_name="type")
    """The type of error."""


class PixieLinkPixieProjectResult(sgqlc.types.Type):
    """The response returned when linking a Pixie project to a New Relic
    account
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "linked_pixie_project", "success")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(PixieLinkPixieProjectError), graphql_name="errors"
    )
    """An array containing errors, if any."""

    linked_pixie_project = sgqlc.types.Field(
        "PixiePixieProject", graphql_name="linkedPixieProject"
    )
    """The Pixie project details that were linked. This will be null for
    unlinkAccount.
    """

    success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="success")
    """Whether the linking succeeded or not. Check the "errors" list for
    details
    """


class PixieLinkedPixieProject(sgqlc.types.Type):
    """Pixie Project with the New Relic account"""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "pixie_project")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")
    """The New Relic account id"""

    pixie_project = sgqlc.types.Field(
        sgqlc.types.non_null("PixiePixieProject"), graphql_name="pixieProject"
    )
    """The linked Pixie Project"""


class PixiePixieProject(sgqlc.types.Type):
    """Pixie Project keys linked to a New Relic account"""

    __schema__ = nerdgraph
    __field_names__ = ("api_key", "deploy_key")
    api_key = sgqlc.types.Field(SecureValue, graphql_name="apiKey")
    """Pixie API key"""

    deploy_key = sgqlc.types.Field(SecureValue, graphql_name="deployKey")
    """Pixie Deploy key"""


class PixieRecordPixieTosAcceptanceError(sgqlc.types.Type):
    """An error object for recording the Pixie terms of service
    acceptance
    """

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")
    """A message explaining what the error is about."""

    type = sgqlc.types.Field(
        PixieRecordPixieTosAcceptanceErrorType, graphql_name="type"
    )
    """The type of error."""


class PixieRecordPixieTosAcceptanceResult(sgqlc.types.Type):
    """The reponse returned when record the acceptance of the Pixie terms
    of service on a given account
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors", "success")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(PixieRecordPixieTosAcceptanceError), graphql_name="errors"
    )
    """An array containings errors, if any."""

    success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="success")
    """Whether the Pixie terms of service acceptance was successfully
    recorded or not.
    """


class ReferenceEntityCreateRepositoryError(sgqlc.types.Type):
    """Type that wraps the errors from a entity create operation."""

    __schema__ = nerdgraph
    __field_names__ = ("guid", "message", "type")
    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """Guid related to the error."""

    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")
    """User-friendly message describing the error."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(ReferenceEntityCreateRepositoryErrorType),
        graphql_name="type",
    )
    """Describes all potential error types that a create operation might
    return.
    """


class ReferenceEntityCreateRepositoryResult(sgqlc.types.Type):
    """Response type for create operations over entities."""

    __schema__ = nerdgraph
    __field_names__ = ("created", "failures", "updated")
    created = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))),
        graphql_name="created",
    )
    """The list of entities guids that have been created correctly."""

    failures = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(ReferenceEntityCreateRepositoryError)
            )
        ),
        graphql_name="failures",
    )
    """List of failures for the create operation."""

    updated = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))),
        graphql_name="updated",
    )
    """The list of entities guids that have been updated correctly."""


class RequestContext(sgqlc.types.Type):
    """This object exposes contextual information about an API request."""

    __schema__ = nerdgraph
    __field_names__ = ("api_key", "user_id")
    api_key = sgqlc.types.Field(String, graphql_name="apiKey")
    """The API key used to make this request"""

    user_id = sgqlc.types.Field(ID, graphql_name="userId")
    """The id of the user making this request"""


class RootMutationType(sgqlc.types.Type):
    """This is the root of all GraphQL mutations. Unlike queries,
    mutations represent actions that have a side effects, like
    `create` or `update`.
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "account_management_create_account",
        "account_management_update_account",
        "agent_application_settings_update",
        "ai_decisions_accept_suggestion",
        "ai_decisions_create_implicit_rule",
        "ai_decisions_create_rule",
        "ai_decisions_create_suggestion",
        "ai_decisions_decline_suggestion",
        "ai_decisions_delete_merge_feedback",
        "ai_decisions_delete_rule",
        "ai_decisions_delete_suggestion",
        "ai_decisions_disable_rule",
        "ai_decisions_enable_rule",
        "ai_decisions_find_applicable_incidents",
        "ai_decisions_postpone_suggestion",
        "ai_decisions_record_merge_feedback",
        "ai_decisions_simulate",
        "ai_decisions_update_implicit_rule",
        "ai_decisions_update_rule",
        "ai_issues_ack_issue",
        "ai_issues_resolve_issue",
        "ai_issues_unack_issue",
        "ai_issues_update_grace_period",
        "ai_issues_update_issue_ttl",
        "ai_notifications_create_channel",
        "ai_notifications_create_destination",
        "ai_notifications_delete_channel",
        "ai_notifications_delete_destination",
        "ai_notifications_test_channel",
        "ai_notifications_test_channel_by_id",
        "ai_notifications_test_destination",
        "ai_notifications_test_destination_by_id",
        "ai_notifications_update_channel",
        "ai_notifications_update_destination",
        "ai_topology_collector_create_edges",
        "ai_topology_collector_create_vertices",
        "ai_topology_collector_delete_edges",
        "ai_topology_collector_delete_vertices",
        "ai_workflows_create_workflow",
        "ai_workflows_delete_workflow",
        "ai_workflows_test_workflow",
        "ai_workflows_update_workflow",
        "alerts_condition_delete",
        "alerts_muting_rule_create",
        "alerts_muting_rule_delete",
        "alerts_muting_rule_update",
        "alerts_notification_channel_create",
        "alerts_notification_channel_delete",
        "alerts_notification_channel_update",
        "alerts_notification_channels_add_to_policy",
        "alerts_notification_channels_remove_from_policy",
        "alerts_nrql_condition_baseline_create",
        "alerts_nrql_condition_baseline_update",
        "alerts_nrql_condition_outlier_create",
        "alerts_nrql_condition_outlier_update",
        "alerts_nrql_condition_static_create",
        "alerts_nrql_condition_static_update",
        "alerts_policy_create",
        "alerts_policy_delete",
        "alerts_policy_update",
        "api_access_create_keys",
        "api_access_delete_keys",
        "api_access_update_keys",
        "apm_application_entity_change_settings",
        "authorization_management_grant_access",
        "authorization_management_revoke_access",
        "cloud_configure_integration",
        "cloud_disable_integration",
        "cloud_link_account",
        "cloud_rename_account",
        "cloud_unlink_account",
        "dashboard_add_widgets_to_page",
        "dashboard_create",
        "dashboard_create_snapshot_url",
        "dashboard_delete",
        "dashboard_undelete",
        "dashboard_update",
        "dashboard_update_page",
        "dashboard_update_widgets_in_page",
        "dashboard_widget_revoke_live_url",
        "data_management_copy_retentions",
        "data_management_create_event_retention_rule",
        "data_management_create_retention_rules",
        "data_management_delete_event_retention_rule",
        "data_management_update_feature_settings",
        "edge_create_trace_filter_rules",
        "edge_create_trace_observer",
        "edge_delete_trace_filter_rules",
        "edge_delete_trace_observers",
        "edge_update_trace_observers",
        "entity_delete",
        "entity_golden_metrics_override",
        "entity_golden_metrics_reset",
        "entity_golden_tags_override",
        "entity_golden_tags_reset",
        "entity_relationship_user_defined_create_or_replace",
        "entity_relationship_user_defined_delete",
        "errors_inbox_assign_error_group",
        "errors_inbox_delete_error_group_resource",
        "errors_inbox_update_error_group_state",
        "events_to_metrics_create_rule",
        "events_to_metrics_delete_rule",
        "events_to_metrics_update_rule",
        "incident_intelligence_environment_consent_accounts",
        "incident_intelligence_environment_consent_authorized_accounts",
        "incident_intelligence_environment_create_environment",
        "incident_intelligence_environment_delete_environment",
        "incident_intelligence_environment_dissent_accounts",
        "installation_create_install_status",
        "installation_create_recipe_event",
        "installation_delete_install",
        "log_configurations_create_data_partition_rule",
        "log_configurations_create_obfuscation_expression",
        "log_configurations_create_obfuscation_rule",
        "log_configurations_create_parsing_rule",
        "log_configurations_delete_data_partition_rule",
        "log_configurations_delete_obfuscation_expression",
        "log_configurations_delete_obfuscation_rule",
        "log_configurations_delete_parsing_rule",
        "log_configurations_update_data_partition_rule",
        "log_configurations_update_obfuscation_expression",
        "log_configurations_update_obfuscation_rule",
        "log_configurations_update_parsing_rule",
        "log_configurations_upsert_pipeline_configuration",
        "metric_normalization_create_rule",
        "metric_normalization_disable_rule",
        "metric_normalization_edit_rule",
        "metric_normalization_enable_rule",
        "mobile_push_notification_remove_device",
        "mobile_push_notification_send_test_push",
        "mobile_push_notification_send_test_push_to_all",
        "nerd_storage_delete_collection",
        "nerd_storage_delete_document",
        "nerd_storage_vault_delete_secret",
        "nerd_storage_vault_write_secret",
        "nerd_storage_write_document",
        "nerdpack_add_allowed_accounts",
        "nerdpack_create",
        "nerdpack_remove_allowed_accounts",
        "nerdpack_remove_version_tag",
        "nerdpack_subscribe_accounts",
        "nerdpack_tag_version",
        "nerdpack_unsubscribe_accounts",
        "nr1_catalog_install_alert_policy_template",
        "nr1_catalog_install_dashboard_template",
        "nr1_catalog_submit_metadata",
        "nrql_drop_rules_create",
        "nrql_drop_rules_delete",
        "open_installation_observability_pack_install",
        "open_installation_quickstart_component_install",
        "open_installation_quickstart_install",
        "organization_provisioning_update_partner_subscription",
        "organization_update",
        "pixie_link_pixie_project",
        "pixie_record_pixie_tos_acceptance",
        "pixie_unlink_pixie_project",
        "reference_entity_create_or_update_repository",
        "service_level_create",
        "service_level_delete",
        "service_level_update",
        "synthetics_create_broken_links_monitor",
        "synthetics_create_cert_check_monitor",
        "synthetics_create_private_location",
        "synthetics_create_script_api_monitor",
        "synthetics_create_script_browser_monitor",
        "synthetics_create_secure_credential",
        "synthetics_create_simple_browser_monitor",
        "synthetics_create_simple_monitor",
        "synthetics_create_step_monitor",
        "synthetics_delete_monitor",
        "synthetics_delete_private_location",
        "synthetics_delete_secure_credential",
        "synthetics_purge_private_location_queue",
        "synthetics_update_broken_links_monitor",
        "synthetics_update_cert_check_monitor",
        "synthetics_update_private_location",
        "synthetics_update_script_api_monitor",
        "synthetics_update_script_browser_monitor",
        "synthetics_update_secure_credential",
        "synthetics_update_simple_browser_monitor",
        "synthetics_update_simple_monitor",
        "synthetics_update_step_monitor",
        "tagging_add_tags_to_entity",
        "tagging_delete_tag_from_entity",
        "tagging_delete_tag_values_from_entity",
        "tagging_replace_tags_on_entity",
        "user_management_add_users_to_groups",
        "user_management_create_group",
        "user_management_delete_group",
        "user_management_remove_users_from_groups",
        "user_management_update_group",
        "whats_new_set_last_read_date",
        "workload_create",
        "workload_delete",
        "workload_duplicate",
        "workload_update",
    )
    account_management_create_account = sgqlc.types.Field(
        AccountManagementCreateResponse,
        graphql_name="accountManagementCreateAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "managed_account",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AccountManagementCreateInput),
                        graphql_name="managedAccount",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Creates an organization-scoped account.

    Arguments:

    * `managed_account` (`AccountManagementCreateInput!`): The
      attributes for the account being created.
    """

    account_management_update_account = sgqlc.types.Field(
        AccountManagementUpdateResponse,
        graphql_name="accountManagementUpdateAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "managed_account",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AccountManagementUpdateInput),
                        graphql_name="managedAccount",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Updates an account.

    Arguments:

    * `managed_account` (`AccountManagementUpdateInput!`): The
      attributes for updating an account.
    """

    agent_application_settings_update = sgqlc.types.Field(
        AgentApplicationSettingsUpdateResult,
        graphql_name="agentApplicationSettingsUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "settings",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AgentApplicationSettingsUpdateInput),
                        graphql_name="settings",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `guid` (`EntityGuid!`): The GUID for the affected Entity.
    * `settings` (`AgentApplicationSettingsUpdateInput!`): Input data
      about the entities you want to update and the settings to use.
      Any unspecified fields will retain their original values.
    """

    ai_decisions_accept_suggestion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsAcceptSuggestion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "suggestion_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="suggestionId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Accept and deploy an existing suggested rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `suggestion_id` (`ID!`): Suggestion ID.
    """

    ai_decisions_create_implicit_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsCreateImplicitRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsRuleBlueprint),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create and deploy a new implicit rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `rule` (`AiDecisionsRuleBlueprint!`): Rule blueprint to be
      created.
    """

    ai_decisions_create_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsCreateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsRuleBlueprint),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create and deploy a new rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `rule` (`AiDecisionsRuleBlueprint!`): Rule blueprint to be
      created.
    """

    ai_decisions_create_suggestion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsSuggestion),
        graphql_name="aiDecisionsCreateSuggestion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "suggestion",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsSuggestionBlueprint),
                        graphql_name="suggestion",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a new suggested rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `suggestion` (`AiDecisionsSuggestionBlueprint!`): Suggestion
      blueprint to be created.
    """

    ai_decisions_decline_suggestion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsDeclineSuggestion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "suggestion_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="suggestionId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Decline an existing suggested rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `suggestion_id` (`ID!`): Suggestion ID.
    """

    ai_decisions_delete_merge_feedback = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsDeleteMergeFeedback",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "child_issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="childIssueId",
                        default=None,
                    ),
                ),
                (
                    "parent_issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="parentIssueId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )
    """Delete existing feedback for a merge.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `child_issue_id` (`ID!`): Child issue ID.
    * `parent_issue_id` (`ID!`): Parent issue ID.
    * `rule_id` (`ID!`): Rule ID.
    """

    ai_decisions_delete_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsDeleteRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )
    """Delete an existing rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `rule_id` (`ID!`): Rule ID.
    """

    ai_decisions_delete_suggestion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsDeleteSuggestion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "suggestion_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="suggestionId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete an existing suggested rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `suggestion_id` (`ID!`): Suggestion ID.
    """

    ai_decisions_disable_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsDisableRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )
    """Disable an existing enabled rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `rule_id` (`ID!`): Rule ID.
    """

    ai_decisions_enable_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsEnableRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )
    """Enable an existing disabled rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `rule_id` (`ID!`): Rule ID.
    """

    ai_decisions_find_applicable_incidents = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsApplicableIncidentSearch),
        graphql_name="aiDecisionsFindApplicableIncidents",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "search",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsSearchBlueprint),
                        graphql_name="search",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a search operation to fetch applicable incidents for a rule
    expression

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `search` (`AiDecisionsSearchBlueprint!`): Search operation
      blueprint to be created.
    """

    ai_decisions_postpone_suggestion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsPostponeSuggestion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "suggestion_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="suggestionId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Postpone an existing suggested rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `suggestion_id` (`ID!`): Suggestion ID.
    """

    ai_decisions_record_merge_feedback = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsMergeFeedback),
        graphql_name="aiDecisionsRecordMergeFeedback",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "child_issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="childIssueId",
                        default=None,
                    ),
                ),
                (
                    "opinion",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsOpinion),
                        graphql_name="opinion",
                        default=None,
                    ),
                ),
                (
                    "parent_issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="parentIssueId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )
    """Record feedback for a merge

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `child_issue_id` (`ID!`): Child issue ID.
    * `opinion` (`AiDecisionsOpinion!`): Opinion type.
    * `parent_issue_id` (`ID!`): Parent issue ID.
    * `rule_id` (`ID!`): Rule ID.
    """

    ai_decisions_simulate = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsSimulation),
        graphql_name="aiDecisionsSimulate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "simulation",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsSimulationBlueprint),
                        graphql_name="simulation",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create an arbitrary expression simulation.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `simulation` (`AiDecisionsSimulationBlueprint!`): Simulation
      blueprint to be created.
    """

    ai_decisions_update_implicit_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsUpdateImplicitRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsRuleBlueprint),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )
    """Update an existing implicit rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `rule` (`AiDecisionsRuleBlueprint!`): Rule blueprint to be
      created.
    * `rule_id` (`ID!`): Rule ID.
    """

    ai_decisions_update_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsUpdateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsRuleBlueprint),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )
    """Update an existing rule.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `rule` (`AiDecisionsRuleBlueprint!`): Rule blueprint to be
      created.
    * `rule_id` (`ID!`): Rule ID.
    """

    ai_issues_ack_issue = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIssueUserActionResponse),
        graphql_name="aiIssuesAckIssue",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="issueId", default=None
                    ),
                ),
            )
        ),
    )
    """Acknowledge issue

    Arguments:

    * `account_id` (`Int!`): account id
    * `issue_id` (`ID!`): issue id
    """

    ai_issues_resolve_issue = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIssueUserActionResponse),
        graphql_name="aiIssuesResolveIssue",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="issueId", default=None
                    ),
                ),
            )
        ),
    )
    """Resolve issue

    Arguments:

    * `account_id` (`Int!`): account id
    * `issue_id` (`ID!`): issue id
    """

    ai_issues_unack_issue = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIssueUserActionResponse),
        graphql_name="aiIssuesUnackIssue",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="issueId", default=None
                    ),
                ),
            )
        ),
    )
    """Unacknowledge issue

    Arguments:

    * `account_id` (`Int!`): account id
    * `issue_id` (`ID!`): issue id
    """

    ai_issues_update_grace_period = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesConfigurationOverrideResponse),
        graphql_name="aiIssuesUpdateGracePeriod",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "grace_period",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiIssuesGracePeriodConfigurationInput),
                        graphql_name="gracePeriod",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Set interval between issue being created and being activated (and
    user being notified)

    Arguments:

    * `account_id` (`Int!`): Account id
    * `grace_period` (`AiIssuesGracePeriodConfigurationInput!`): Grace
      period configuration
    """

    ai_issues_update_issue_ttl = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesConfigurationOverrideResponse),
        graphql_name="aiIssuesUpdateIssueTtl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "issue_ttl",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Seconds),
                        graphql_name="issueTtl",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update issue TTL

    Arguments:

    * `account_id` (`Int!`): Account id
    * `issue_ttl` (`Seconds!`): Issue TTL
    """

    ai_notifications_create_channel = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelResponse),
        graphql_name="aiNotificationsCreateChannel",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "channel",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsChannelInput),
                        graphql_name="channel",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a Channel

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `channel` (`AiNotificationsChannelInput!`): Channel object
    """

    ai_notifications_create_destination = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationResponse),
        graphql_name="aiNotificationsCreateDestination",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "destination",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsDestinationInput),
                        graphql_name="destination",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a Destination

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `destination` (`AiNotificationsDestinationInput!`): Destination
      object
    """

    ai_notifications_delete_channel = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDeleteResponse),
        graphql_name="aiNotificationsDeleteChannel",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "channel_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="channelId", default=None
                    ),
                ),
            )
        ),
    )
    """Delete a Channel

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `channel_id` (`ID!`): Id of the deleted channel
    """

    ai_notifications_delete_destination = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDeleteResponse),
        graphql_name="aiNotificationsDeleteDestination",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="destinationId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete a Destination

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `destination_id` (`ID!`): Id of the deleted destination
    """

    ai_notifications_test_channel = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelTestResponse),
        graphql_name="aiNotificationsTestChannel",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "channel",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsChannelInput),
                        graphql_name="channel",
                        default=None,
                    ),
                ),
                (
                    "variables",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiNotificationsDynamicVariable)
                        ),
                        graphql_name="variables",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Test notifications

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `channel` (`AiNotificationsChannelInput!`): Channel to test
      notification for
    * `variables` (`[AiNotificationsDynamicVariable!]`): Dynamic
      variables
    """

    ai_notifications_test_channel_by_id = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelTestResponse),
        graphql_name="aiNotificationsTestChannelById",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "channel_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="channelId", default=None
                    ),
                ),
                (
                    "variables",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiNotificationsDynamicVariable)
                        ),
                        graphql_name="variables",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Test channel by channelId

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `channel_id` (`ID!`): Channel ID to test notification for
    * `variables` (`[AiNotificationsDynamicVariable!]`): Dynamic
      variables
    """

    ai_notifications_test_destination = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationTestResponse),
        graphql_name="aiNotificationsTestDestination",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "destination",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsDestinationInput),
                        graphql_name="destination",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Test connection

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `destination` (`AiNotificationsDestinationInput!`): Destination
      to test connection for
    """

    ai_notifications_test_destination_by_id = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationTestResponse),
        graphql_name="aiNotificationsTestDestinationById",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="destinationId",
                        default=None,
                    ),
                ),
                (
                    "update",
                    sgqlc.types.Arg(
                        AiNotificationsDestinationUpdate,
                        graphql_name="update",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Test connection by destination id

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `destination_id` (`ID!`): Destination ID to test
    * `update` (`AiNotificationsDestinationUpdate`): Update that will
      override existing properties
    """

    ai_notifications_update_channel = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelResponse),
        graphql_name="aiNotificationsUpdateChannel",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "channel",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsChannelUpdate),
                        graphql_name="channel",
                        default=None,
                    ),
                ),
                (
                    "channel_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="channelId", default=None
                    ),
                ),
            )
        ),
    )
    """Update a Channel

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `channel` (`AiNotificationsChannelUpdate!`): Channel object
    * `channel_id` (`ID!`): Channel to update
    """

    ai_notifications_update_destination = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationResponse),
        graphql_name="aiNotificationsUpdateDestination",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "destination",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsDestinationUpdate),
                        graphql_name="destination",
                        default=None,
                    ),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="destinationId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update a Destination

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `destination` (`AiNotificationsDestinationUpdate!`): Update
      Destination fields
    * `destination_id` (`ID!`): Destination to update
    """

    ai_topology_collector_create_edges = sgqlc.types.Field(
        sgqlc.types.non_null(AiTopologyCollectorOperationResult),
        graphql_name="aiTopologyCollectorCreateEdges",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "edges",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(AiTopologyCollectorEdgeBlueprint)
                            )
                        ),
                        graphql_name="edges",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a list of new edges.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `edges` (`[AiTopologyCollectorEdgeBlueprint!]!`): List of edge
      blueprints to be created.
    """

    ai_topology_collector_create_vertices = sgqlc.types.Field(
        sgqlc.types.non_null(AiTopologyCollectorOperationResult),
        graphql_name="aiTopologyCollectorCreateVertices",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "vertices",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(AiTopologyCollectorVertexBlueprint)
                            )
                        ),
                        graphql_name="vertices",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a list of new vertices.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `vertices` (`[AiTopologyCollectorVertexBlueprint!]!`): List of
      vertex blueprints to be created.
    """

    ai_topology_collector_delete_edges = sgqlc.types.Field(
        sgqlc.types.non_null(AiTopologyCollectorOperationResult),
        graphql_name="aiTopologyCollectorDeleteEdges",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "edge_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(ID))
                        ),
                        graphql_name="edgeIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete an existing list of edges.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `edge_ids` (`[ID!]!`): List of edge IDs.
    """

    ai_topology_collector_delete_vertices = sgqlc.types.Field(
        sgqlc.types.non_null(AiTopologyCollectorOperationResult),
        graphql_name="aiTopologyCollectorDeleteVertices",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "vertex_names",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(ID))
                        ),
                        graphql_name="vertexNames",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete an existing list of vertices.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `vertex_names` (`[ID!]!`): List of vertex names.
    """

    ai_workflows_create_workflow = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsCreateWorkflowResponse),
        graphql_name="aiWorkflowsCreateWorkflow",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "create_workflow_data",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiWorkflowsCreateWorkflowInput),
                        graphql_name="createWorkflowData",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a new Workflow with issues filter, enrichments and
    destinations

    Arguments:

    * `account_id` (`Int!`): Workflow's account id
    * `create_workflow_data` (`AiWorkflowsCreateWorkflowInput!`):
      Create Workflow input object
    """

    ai_workflows_delete_workflow = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsDeleteWorkflowResponse),
        graphql_name="aiWorkflowsDeleteWorkflow",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Delete a workflow and all it's sub entities: filter, enrichments
    and destinations

    Arguments:

    * `account_id` (`Int!`): Workflow's account id
    * `id` (`ID!`): Workflow's id for deletion
    """

    ai_workflows_test_workflow = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsTestWorkflowResponse),
        graphql_name="aiWorkflowsTestWorkflow",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "test_workflow_data",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiWorkflowsTestWorkflowInput),
                        graphql_name="testWorkflowData",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """test a workflow and all it's sub entities: filter, enrichments and
    destinations

    Arguments:

    * `account_id` (`Int!`): Workflow's account id
    * `test_workflow_data` (`AiWorkflowsTestWorkflowInput!`): Test
      Workflow input object
    """

    ai_workflows_update_workflow = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsUpdateWorkflowResponse),
        graphql_name="aiWorkflowsUpdateWorkflow",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "update_workflow_data",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiWorkflowsUpdateWorkflowInput),
                        graphql_name="updateWorkflowData",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update Workflow with issues filter, enrichments and destinations

    Arguments:

    * `account_id` (`Int!`): Workflow's account id
    * `update_workflow_data` (`AiWorkflowsUpdateWorkflowInput!`):
      Update Workflow input object
    """

    alerts_condition_delete = sgqlc.types.Field(
        AlertsConditionDeleteResponse,
        graphql_name="alertsConditionDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Delete an Alerts condition.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `id` (`ID!`): Alerts condition ID.
    """

    alerts_muting_rule_create = sgqlc.types.Field(
        AlertsMutingRule,
        graphql_name="alertsMutingRuleCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsMutingRuleInput),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a muting rule for New Relic Alerts violations.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `rule` (`AlertsMutingRuleInput!`): Input settings for the muting
      rule.
    """

    alerts_muting_rule_delete = sgqlc.types.Field(
        AlertsMutingRuleDeleteResponse,
        graphql_name="alertsMutingRuleDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Delete a muting rule for New Relic Alerts violations.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `id` (`ID!`): Muting rule.
    """

    alerts_muting_rule_update = sgqlc.types.Field(
        AlertsMutingRule,
        graphql_name="alertsMutingRuleUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsMutingRuleUpdateInput),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update a muting rule for New Relic Alerts violations.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `id` (`ID!`): Muting rule ID.
    * `rule` (`AlertsMutingRuleUpdateInput!`): The input options for
      updating a muting rule.
    """

    alerts_notification_channel_create = sgqlc.types.Field(
        AlertsNotificationChannelCreateResponse,
        graphql_name="alertsNotificationChannelCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "notification_channel",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            AlertsNotificationChannelCreateConfiguration
                        ),
                        graphql_name="notificationChannel",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Creates a notification channel

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `notification_channel`
      (`AlertsNotificationChannelCreateConfiguration!`): Notification
      channel to create.
    """

    alerts_notification_channel_delete = sgqlc.types.Field(
        AlertsNotificationChannelDeleteResponse,
        graphql_name="alertsNotificationChannelDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Deletes a notification channel

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `id` (`ID!`): Notification channel ID.
    """

    alerts_notification_channel_update = sgqlc.types.Field(
        AlertsNotificationChannelUpdateResponse,
        graphql_name="alertsNotificationChannelUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "notification_channel",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            AlertsNotificationChannelUpdateConfiguration
                        ),
                        graphql_name="notificationChannel",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Updates an existing notification channel

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `id` (`ID!`): Notification channel ID.
    * `notification_channel`
      (`AlertsNotificationChannelUpdateConfiguration!`): Notification
      channel fields to update.
    """

    alerts_notification_channels_add_to_policy = sgqlc.types.Field(
        AlertsNotificationChannelsAddToPolicyResponse,
        graphql_name="alertsNotificationChannelsAddToPolicy",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "notification_channel_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(ID))
                        ),
                        graphql_name="notificationChannelIds",
                        default=None,
                    ),
                ),
                (
                    "policy_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="policyId", default=None
                    ),
                ),
            )
        ),
    )
    """Associates notification channels with a policy.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `notification_channel_ids` (`[ID!]!`): Notification channel IDs.
    * `policy_id` (`ID!`): Policy ID.
    """

    alerts_notification_channels_remove_from_policy = sgqlc.types.Field(
        AlertsNotificationChannelsRemoveFromPolicyResponse,
        graphql_name="alertsNotificationChannelsRemoveFromPolicy",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "notification_channel_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(ID))
                        ),
                        graphql_name="notificationChannelIds",
                        default=None,
                    ),
                ),
                (
                    "policy_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="policyId", default=None
                    ),
                ),
            )
        ),
    )
    """Dissociates notification channels from a policy.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `notification_channel_ids` (`[ID!]!`): Notification channel IDs.
    * `policy_id` (`ID!`): Policy ID.
    """

    alerts_nrql_condition_baseline_create = sgqlc.types.Field(
        "AlertsNrqlBaselineCondition",
        graphql_name="alertsNrqlConditionBaselineCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "condition",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsNrqlConditionBaselineInput),
                        graphql_name="condition",
                        default=None,
                    ),
                ),
                (
                    "policy_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="policyId", default=None
                    ),
                ),
            )
        ),
    )
    """Create a baseline NRQL condition.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `condition` (`AlertsNrqlConditionBaselineInput!`): Input
      settings for the baseline NRQL condition.
    * `policy_id` (`ID!`): Policy ID for the condition.
    """

    alerts_nrql_condition_baseline_update = sgqlc.types.Field(
        "AlertsNrqlBaselineCondition",
        graphql_name="alertsNrqlConditionBaselineUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "condition",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsNrqlConditionUpdateBaselineInput),
                        graphql_name="condition",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Update a baseline NRQL condition.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `condition` (`AlertsNrqlConditionUpdateBaselineInput!`): Input
      settings for the baseline NRQL condition.
    * `id` (`ID!`): Alerts condition ID.
    """

    alerts_nrql_condition_outlier_create = sgqlc.types.Field(
        "AlertsNrqlOutlierCondition",
        graphql_name="alertsNrqlConditionOutlierCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "condition",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsNrqlConditionOutlierInput),
                        graphql_name="condition",
                        default=None,
                    ),
                ),
                (
                    "policy_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="policyId", default=None
                    ),
                ),
            )
        ),
    )
    """Create an outlier NRQL condition.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `condition` (`AlertsNrqlConditionOutlierInput!`): Input settings
      for the outlier NRQL condition.
    * `policy_id` (`ID!`): Policy ID for the condition.
    """

    alerts_nrql_condition_outlier_update = sgqlc.types.Field(
        "AlertsNrqlOutlierCondition",
        graphql_name="alertsNrqlConditionOutlierUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "condition",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsNrqlConditionUpdateOutlierInput),
                        graphql_name="condition",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Update an outlier NRQL condition.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `condition` (`AlertsNrqlConditionUpdateOutlierInput!`): Input
      settings for the outlier NRQL condition.
    * `id` (`ID!`): Alerts condition ID.
    """

    alerts_nrql_condition_static_create = sgqlc.types.Field(
        "AlertsNrqlStaticCondition",
        graphql_name="alertsNrqlConditionStaticCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "condition",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsNrqlConditionStaticInput),
                        graphql_name="condition",
                        default=None,
                    ),
                ),
                (
                    "policy_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="policyId", default=None
                    ),
                ),
            )
        ),
    )
    """Create a static NRQL condition.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `condition` (`AlertsNrqlConditionStaticInput!`): Input settings
      for the static NRQL condition.
    * `policy_id` (`ID!`): Policy ID for the condition.
    """

    alerts_nrql_condition_static_update = sgqlc.types.Field(
        "AlertsNrqlStaticCondition",
        graphql_name="alertsNrqlConditionStaticUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "condition",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsNrqlConditionUpdateStaticInput),
                        graphql_name="condition",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Update a static NRQL condition.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `condition` (`AlertsNrqlConditionUpdateStaticInput!`): Input
      settings for the static NRQL condition.
    * `id` (`ID!`): Alerts condition ID.
    """

    alerts_policy_create = sgqlc.types.Field(
        AlertsPolicy,
        graphql_name="alertsPolicyCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "policy",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsPolicyInput),
                        graphql_name="policy",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create an Alerts policy.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `policy` (`AlertsPolicyInput!`): Policy to be created.
    """

    alerts_policy_delete = sgqlc.types.Field(
        AlertsPolicyDeleteResponse,
        graphql_name="alertsPolicyDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Delete an Alerts policy. This archives all conditions associated
    to the policy.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `id` (`ID!`): Policy ID.
    """

    alerts_policy_update = sgqlc.types.Field(
        AlertsPolicy,
        graphql_name="alertsPolicyUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "policy",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsPolicyUpdateInput),
                        graphql_name="policy",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update an Alerts policy.

    Arguments:

    * `account_id` (`Int!`): Account ID.
    * `id` (`ID!`): Policy ID.
    * `policy` (`AlertsPolicyUpdateInput!`): Fields on the policy to
      be updated.
    """

    api_access_create_keys = sgqlc.types.Field(
        ApiAccessCreateKeyResponse,
        graphql_name="apiAccessCreateKeys",
        args=sgqlc.types.ArgDict(
            (
                (
                    "keys",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ApiAccessCreateInput),
                        graphql_name="keys",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create keys. You can create keys for multiple accounts at once.
    You can read more about managing keys on [this documentation
    page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-
    nerdgraph-manage-license-keys-personal-api-keys).

    Arguments:

    * `keys` (`ApiAccessCreateInput!`): A list of the configurations
      for each key you want to create.
    """

    api_access_delete_keys = sgqlc.types.Field(
        ApiAccessDeleteKeyResponse,
        graphql_name="apiAccessDeleteKeys",
        args=sgqlc.types.ArgDict(
            (
                (
                    "keys",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ApiAccessDeleteInput),
                        graphql_name="keys",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """A mutation to delete keys.

    Arguments:

    * `keys` (`ApiAccessDeleteInput!`): A list of each key `id` that
      you want to delete. You can read more about managing keys on
      [this documentation page](https://docs.newrelic.com/docs/apis/ne
      rdgraph/examples/use-nerdgraph-manage-license-keys-personal-api-
      keys).
    """

    api_access_update_keys = sgqlc.types.Field(
        ApiAccessUpdateKeyResponse,
        graphql_name="apiAccessUpdateKeys",
        args=sgqlc.types.ArgDict(
            (
                (
                    "keys",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ApiAccessUpdateInput),
                        graphql_name="keys",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update keys. You can update keys for multiple accounts at once.
    You can read more about managing keys on [this documentation
    page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-
    nerdgraph-manage-license-keys-personal-api-keys).

    Arguments:

    * `keys` (`ApiAccessUpdateInput!`): The configurations of each key
      you want to update.
    """

    apm_application_entity_change_settings = sgqlc.types.Field(
        ApmApplicationEntitySettingsResult,
        graphql_name="apmApplicationEntityChangeSettings",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "settings",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ApmApplicationEntitySettings),
                        graphql_name="settings",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Change the settings of an ApmApplicationEntity.

    Arguments:

    * `guid` (`EntityGuid!`): The guid of the ApmApplicationEntity to
      update.
    * `settings` (`ApmApplicationEntitySettings!`): The desired
      settings of the ApmApplicationEntity.
    """

    authorization_management_grant_access = sgqlc.types.Field(
        AuthorizationManagementGrantAccessPayload,
        graphql_name="authorizationManagementGrantAccess",
        args=sgqlc.types.ArgDict(
            (
                (
                    "grant_access_options",
                    sgqlc.types.Arg(
                        AuthorizationManagementGrantAccess,
                        graphql_name="grantAccessOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Grant access for a group

    Arguments:

    * `grant_access_options` (`AuthorizationManagementGrantAccess`):
      The object representing the group and the access to add
    """

    authorization_management_revoke_access = sgqlc.types.Field(
        AuthorizationManagementRevokeAccessPayload,
        graphql_name="authorizationManagementRevokeAccess",
        args=sgqlc.types.ArgDict(
            (
                (
                    "revoke_access_options",
                    sgqlc.types.Arg(
                        AuthorizationManagementRevokeAccess,
                        graphql_name="revokeAccessOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Revoke access for a group

    Arguments:

    * `revoke_access_options` (`AuthorizationManagementRevokeAccess`):
      The object representing the group and the access to remove
    """

    cloud_configure_integration = sgqlc.types.Field(
        CloudConfigureIntegrationPayload,
        graphql_name="cloudConfigureIntegration",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "integrations",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(CloudIntegrationsInput),
                        graphql_name="integrations",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create or modify a cloud integration.  For details and mutation
    examples visit [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/manage-your-aws-azure-google-cloud-integrations-
    graphql-api).

    Arguments:

    * `account_id` (`Int!`): Your New Relic account ID
    * `integrations` (`CloudIntegrationsInput!`): The cloud
      integrations you want to configure.
    """

    cloud_disable_integration = sgqlc.types.Field(
        CloudDisableIntegrationPayload,
        graphql_name="cloudDisableIntegration",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "integrations",
                    sgqlc.types.Arg(
                        CloudDisableIntegrationsInput,
                        graphql_name="integrations",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Disable a cloud integration. Stops collecting data for the
    specified integration.  For details and mutation examples visit
    [our docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/manage-your-aws-azure-google-cloud-integrations-
    graphql-api).

    Arguments:

    * `account_id` (`Int!`): Your New Relic account ID
    * `integrations` (`CloudDisableIntegrationsInput`): The
      integrations you want to disable
    """

    cloud_link_account = sgqlc.types.Field(
        CloudLinkAccountPayload,
        graphql_name="cloudLinkAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "accounts",
                    sgqlc.types.Arg(
                        CloudLinkCloudAccountsInput,
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Link a cloud provider account to a New Relic Account.  For details
    and mutation examples visit [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/manage-your-aws-azure-google-cloud-integrations-
    graphql-api).

    Arguments:

    * `account_id` (`Int!`): Your New Relic account ID
    * `accounts` (`CloudLinkCloudAccountsInput`): The cloud provider
      account you want to link to your New Relic account.
    """

    cloud_rename_account = sgqlc.types.Field(
        CloudRenameAccountPayload,
        graphql_name="cloudRenameAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(CloudRenameAccountsInput),
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Rename one or more linked cloud provider accounts.  For details
    and mutation examples visit [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/manage-your-aws-azure-google-cloud-integrations-
    graphql-api).

    Arguments:

    * `account_id` (`Int!`): Your New Relic account ID
    * `accounts` (`[CloudRenameAccountsInput]`): The cloud provider
      account you want to rename.
    """

    cloud_unlink_account = sgqlc.types.Field(
        CloudUnlinkAccountPayload,
        graphql_name="cloudUnlinkAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(CloudUnlinkAccountsInput),
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Unlink one or more cloud provider accounts. Stops collecting data
    for all the associated integrations.  For details and mutation
    examples visit [our
    docs](https://docs.newrelic.com/docs/apis/graphql-
    api/tutorials/manage-your-aws-azure-google-cloud-integrations-
    graphql-api).

    Arguments:

    * `account_id` (`Int!`): Your New Relic account ID
    * `accounts` (`[CloudUnlinkAccountsInput]`): The cloud provider
      accounts you want to unlink.
    """

    dashboard_add_widgets_to_page = sgqlc.types.Field(
        DashboardAddWidgetsToPageResult,
        graphql_name="dashboardAddWidgetsToPage",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "widgets",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(DashboardWidgetInput)
                            )
                        ),
                        graphql_name="widgets",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Add widgets to a `DashboardPage`

    Arguments:

    * `guid` (`EntityGuid!`): Unique entity identifier of the
      `DashboardPage` where widgets will be added.
    * `widgets` (`[DashboardWidgetInput!]!`): Widgets input holding
      all required widgets data.
    """

    dashboard_create = sgqlc.types.Field(
        DashboardCreateResult,
        graphql_name="dashboardCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "dashboard",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DashboardInput),
                        graphql_name="dashboard",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a `DashboardEntity`

    Arguments:

    * `account_id` (`Int!`): Account ID where the `DashboardEntity`
      will be created.
    * `dashboard` (`DashboardInput!`): Dashboard input holding all
      required `DashboardEntity` data.
    """

    dashboard_create_snapshot_url = sgqlc.types.Field(
        String,
        graphql_name="dashboardCreateSnapshotUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "params",
                    sgqlc.types.Arg(
                        DashboardSnapshotUrlInput, graphql_name="params", default=None
                    ),
                ),
            )
        ),
    )
    """Creates a public URL where a `DashboardPage` can be accessed in
    the form of a static snapshot.

    Arguments:

    * `guid` (`EntityGuid!`): Unique entity identifier of the
      `DashboardPage` to be accessed as a snapshot through a public
      URL.
    * `params` (`DashboardSnapshotUrlInput`): Optional input
      parameters for the generated snapshot.
    """

    dashboard_delete = sgqlc.types.Field(
        DashboardDeleteResult,
        graphql_name="dashboardDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete an existing `DashboardEntity`

    Arguments:

    * `guid` (`EntityGuid!`): Unique entity identifier of the
      `DashboardEntity` to be deleted. A dashboard guid must be
      specified. Dashboard page guids are not supported.
    """

    dashboard_undelete = sgqlc.types.Field(
        DashboardUndeleteResult,
        graphql_name="dashboardUndelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Undelete a `DashboardEntity` that was previously deleted.

    Arguments:

    * `guid` (`EntityGuid!`): Unique entity identifier of the
      `DashboardEntity` to be undeleted. A dashboard guid must be
      specified. Dashboard page guids are not supported.
    """

    dashboard_update = sgqlc.types.Field(
        DashboardUpdateResult,
        graphql_name="dashboardUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "dashboard",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DashboardInput),
                        graphql_name="dashboard",
                        default=None,
                    ),
                ),
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update an existing `DashboardEntity`

    Arguments:

    * `dashboard` (`DashboardInput!`): Dashboard input holding all
      required data from an existing `DashboardEntity`.
    * `guid` (`EntityGuid!`): Unique entity identifier of the
      `DashboardEntity` to be updated.
    """

    dashboard_update_page = sgqlc.types.Field(
        DashboardUpdatePageResult,
        graphql_name="dashboardUpdatePage",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "page",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DashboardUpdatePageInput),
                        graphql_name="page",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update a page in a dashboard.

    Arguments:

    * `guid` (`EntityGuid!`): Unique entity identifier of the Page to
      be updated.
    * `page` (`DashboardUpdatePageInput!`): Page input holding all
      required data to update a page.
    """

    dashboard_update_widgets_in_page = sgqlc.types.Field(
        DashboardUpdateWidgetsInPageResult,
        graphql_name="dashboardUpdateWidgetsInPage",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "widgets",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(DashboardUpdateWidgetInput)
                            )
                        ),
                        graphql_name="widgets",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update an existing set of `Widget`s in a `DashboardPage`

    Arguments:

    * `guid` (`EntityGuid!`): Unique entity identifier of the
      `DashboardPage` where widgets will be updated.
    * `widgets` (`[DashboardUpdateWidgetInput!]!`): Widgets input
      holding all required widgets data.
    """

    dashboard_widget_revoke_live_url = sgqlc.types.Field(
        DashboardRevokeLiveUrlResult,
        graphql_name="dashboardWidgetRevokeLiveUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "uuid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="uuid", default=None
                    ),
                ),
            )
        ),
    )
    """Revokes a `DashboardWidget` public live URL that was created in
    advance.

    Arguments:

    * `uuid` (`ID!`): The unique identifier of the public live URL to
      be revoked.
    """

    data_management_copy_retentions = sgqlc.types.Field(
        DataManagementBulkCopyResult,
        graphql_name="dataManagementCopyRetentions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "destination_account_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),
                        graphql_name="destinationAccountIds",
                        default=None,
                    ),
                ),
                (
                    "source_account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="sourceAccountId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Bulk copy account rules to list of accounts

    Arguments:

    * `destination_account_ids` (`[Int]!`): A list of IDs for the
      accounts that should have the source account retentions applied.
    * `source_account_id` (`Int!`): The ID of the source account
    """

    data_management_create_event_retention_rule = sgqlc.types.Field(
        DataManagementRule,
        graphql_name="dataManagementCreateEventRetentionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="namespace",
                        default=None,
                    ),
                ),
                (
                    "retention_in_days",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="retentionInDays",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a new event retention rule for a namespace on an account

    Arguments:

    * `account_id` (`Int!`): The ID of the account the event retention
      rule applies to
    * `namespace` (`String!`): The namespace the event retention rule
      applies to
    * `retention_in_days` (`Int!`): Length of time for event data
      retention (in days)
    """

    data_management_create_retention_rules = sgqlc.types.Field(
        sgqlc.types.list_of(DataManagementRule),
        graphql_name="dataManagementCreateRetentionRules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "retention_rules",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(DataManagementRuleInput),
                        graphql_name="retentionRules",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create event retention rules for namespaces

    Arguments:

    * `account_id` (`Int!`): The ID of the account the new retention
      rules will apply to
    * `retention_rules` (`[DataManagementRuleInput]`): List of
      rule_input params (:namespace, :retention_in_days) for new rules
      to be created
    """

    data_management_delete_event_retention_rule = sgqlc.types.Field(
        DataManagementRule,
        graphql_name="dataManagementDeleteEventRetentionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="namespace",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete the event retention rule for a namespace on an account, if
    it exists

    Arguments:

    * `account_id` (`Int!`): The ID of the event retention rule's
      account
    * `namespace` (`String!`): The event retention rule's namespace
    """

    data_management_update_feature_settings = sgqlc.types.Field(
        DataManagementFeatureSetting,
        graphql_name="dataManagementUpdateFeatureSettings",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "setting",
                    sgqlc.types.Arg(
                        DataManagementAccountFeatureSettingInput,
                        graphql_name="setting",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Mutation to add and change a feature setting toggle for an account

    Arguments:

    * `account_id` (`Int!`): The ID of the account to apply this
      feature setting
    * `setting` (`DataManagementAccountFeatureSettingInput`):
      Arguments to update the feature setting on an account
    """

    edge_create_trace_filter_rules = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeCreateTraceFilterRuleResponses),
        graphql_name="edgeCreateTraceFilterRules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rules",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EdgeCreateTraceFilterRulesInput),
                        graphql_name="rules",
                        default=None,
                    ),
                ),
                (
                    "trace_observer_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="traceObserverId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create one or more trace filter rules, as defined by the
    `CreateTraceFilterRulesInput`.

    Arguments:

    * `account_id` (`Int!`): ID of the account in the account family
      the trace observer belongs to.
    * `rules` (`EdgeCreateTraceFilterRulesInput!`): A grouping of
      trace filter rule configurations
    * `trace_observer_id` (`Int!`): ID of the trace observer to apply
      the trace filter(s) to.
    """

    edge_create_trace_observer = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeCreateTraceObserverResponses),
        graphql_name="edgeCreateTraceObserver",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "trace_observer_configs",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(EdgeCreateTraceObserverInput)
                            )
                        ),
                        graphql_name="traceObserverConfigs",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create one or more trace observers, as defined by the
    `CreateTraceObserverInput`. Currently, only one trace observer can
    be created per provider region.

    Arguments:

    * `account_id` (`Int!`): ID of the account in the account family
      the trace observer(s) belong to.
    * `trace_observer_configs` (`[EdgeCreateTraceObserverInput!]!`):
      One or more `CreateTraceObserverInput` that describe the trace
      observer to be created.
    """

    edge_delete_trace_filter_rules = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeDeleteTraceFilterRuleResponses),
        graphql_name="edgeDeleteTraceFilterRules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rules",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EdgeDeleteTraceFilterRulesInput),
                        graphql_name="rules",
                        default=None,
                    ),
                ),
                (
                    "trace_observer_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="traceObserverId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete one or more trace filter rules, as defined by the
    `DeleteTraceFilterRulesInput`.

    Arguments:

    * `account_id` (`Int!`): ID of the account in the account family
      the trace observer belongs to.
    * `rules` (`EdgeDeleteTraceFilterRulesInput!`): A grouping of
      trace filter rule configurations
    * `trace_observer_id` (`Int!`): ID of the trace observer to remove
      the provided trace filter(s) from.
    """

    edge_delete_trace_observers = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeDeleteTraceObserverResponses),
        graphql_name="edgeDeleteTraceObservers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "trace_observer_configs",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(EdgeDeleteTraceObserverInput)
                            )
                        ),
                        graphql_name="traceObserverConfigs",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`): ID of the account in the account family
      the trace observer(s) belong to.
    * `trace_observer_configs` (`[EdgeDeleteTraceObserverInput!]!`):
      One or more `DeleteTraceObserverInput` that describe the trace
      observer to be deleted.
    """

    edge_update_trace_observers = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeUpdateTraceObserverResponses),
        graphql_name="edgeUpdateTraceObservers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "trace_observer_configs",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(EdgeUpdateTraceObserverInput)
                            )
                        ),
                        graphql_name="traceObserverConfigs",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update one or more trace observers, as defined by the
    `UpdateTraceObserverInput`.

    Arguments:

    * `account_id` (`Int!`): ID of the account in the account family
      the trace observer(s) belong to.
    * `trace_observer_configs` (`[EdgeUpdateTraceObserverInput!]!`):
      One or more `UpdateTraceObserverInput` that describe the trace
      observer to be updated.
    """

    entity_delete = sgqlc.types.Field(
        EntityDeleteResult,
        graphql_name="entityDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "force_delete",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Boolean),
                        graphql_name="forceDelete",
                        default=False,
                    ),
                ),
                (
                    "guids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))
                        ),
                        graphql_name="guids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete an entity

    Arguments:

    * `force_delete` (`Boolean!`): Set to true to skip safety checks
      and force-delete the entity (default: `false`)
    * `guids` (`[EntityGuid!]!`): List of guids to be deleted
    """

    entity_golden_metrics_override = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenMetricsDomainTypeScopedResponse),
        graphql_name="entityGoldenMetricsOverride",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGoldenContextInput),
                        graphql_name="context",
                        default=None,
                    ),
                ),
                (
                    "domain_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DomainTypeInput),
                        graphql_name="domainType",
                        default=None,
                    ),
                ),
                (
                    "metrics",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(EntityGoldenMetricInput)
                            )
                        ),
                        graphql_name="metrics",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Override the default golden metrics given an account or a
    collection guid. Only use one context

    Arguments:

    * `context` (`EntityGoldenContextInput!`): Context to scope the
      golden metrics
    * `domain_type` (`DomainTypeInput!`): Entity Domain Type to
      override the golden metrics
    * `metrics` (`[EntityGoldenMetricInput!]!`): The new golden
      metrics by the entity domain type and the context
    """

    entity_golden_metrics_reset = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenMetricsDomainTypeScopedResponse),
        graphql_name="entityGoldenMetricsReset",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGoldenContextInput),
                        graphql_name="context",
                        default=None,
                    ),
                ),
                (
                    "domain_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DomainTypeInput),
                        graphql_name="domainType",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Reset the default golden metrics given an account or a collection
    guid. Only use one context

    Arguments:

    * `context` (`EntityGoldenContextInput!`): Context to scope the
      golden metrics
    * `domain_type` (`DomainTypeInput!`): Entity Domain Type to reset
      the golden metrics
    """

    entity_golden_tags_override = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenTagsDomainTypeScopedResponse),
        graphql_name="entityGoldenTagsOverride",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGoldenContextInput),
                        graphql_name="context",
                        default=None,
                    ),
                ),
                (
                    "domain_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DomainTypeInput),
                        graphql_name="domainType",
                        default=None,
                    ),
                ),
                (
                    "tags",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(EntityGoldenTagInput)
                            )
                        ),
                        graphql_name="tags",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Override the default tags given an account or a collection guid.
    Only use one context

    Arguments:

    * `context` (`EntityGoldenContextInput!`): Context to scope the
      golden metrics
    * `domain_type` (`DomainTypeInput!`): Entity Domain Type to
      override the golden tags
    * `tags` (`[EntityGoldenTagInput!]!`): The new golden tags by the
      entity domain type and the tags
    """

    entity_golden_tags_reset = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenTagsDomainTypeScopedResponse),
        graphql_name="entityGoldenTagsReset",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGoldenContextInput),
                        graphql_name="context",
                        default=None,
                    ),
                ),
                (
                    "domain_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DomainTypeInput),
                        graphql_name="domainType",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Reset the default tags given an account or a collection guid. Only
    use one context

    Arguments:

    * `context` (`EntityGoldenContextInput!`): Context to scope the
      golden metrics
    * `domain_type` (`DomainTypeInput!`): Entity Domain Type to reset
      the golden tags
    """

    entity_relationship_user_defined_create_or_replace = sgqlc.types.Field(
        sgqlc.types.non_null(EntityRelationshipUserDefinedCreateOrReplaceResult),
        graphql_name="entityRelationshipUserDefinedCreateOrReplace",
        args=sgqlc.types.ArgDict(
            (
                (
                    "source_entity_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="sourceEntityGuid",
                        default=None,
                    ),
                ),
                (
                    "target_entity_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="targetEntityGuid",
                        default=None,
                    ),
                ),
                (
                    "type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityRelationshipEdgeType),
                        graphql_name="type",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a relationship between entities.

    Arguments:

    * `source_entity_guid` (`EntityGuid!`): The source entity guid of
      the relationship.
    * `target_entity_guid` (`EntityGuid!`): The target entity guid of
      the relationship.
    * `type` (`EntityRelationshipEdgeType!`): The type of the
      relationship.
    """

    entity_relationship_user_defined_delete = sgqlc.types.Field(
        sgqlc.types.non_null(EntityRelationshipUserDefinedDeleteResult),
        graphql_name="entityRelationshipUserDefinedDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "source_entity_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="sourceEntityGuid",
                        default=None,
                    ),
                ),
                (
                    "target_entity_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="targetEntityGuid",
                        default=None,
                    ),
                ),
                (
                    "type",
                    sgqlc.types.Arg(
                        EntityRelationshipEdgeType, graphql_name="type", default=None
                    ),
                ),
            )
        ),
    )
    """Delete a relationship between entities. If no type is provided, it
    will delete all relationships between source and target.

    Arguments:

    * `source_entity_guid` (`EntityGuid!`): The source entity guid of
      the relationship.
    * `target_entity_guid` (`EntityGuid!`): The target entity guid of
      the relationship.
    * `type` (`EntityRelationshipEdgeType`): The type of the
      relationship. If none provided, it will delete all relationships
      between source and target.
    """

    errors_inbox_assign_error_group = sgqlc.types.Field(
        ErrorsInboxAssignErrorGroupResponse,
        graphql_name="errorsInboxAssignErrorGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "assignment",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ErrorsInboxAssignErrorGroupInput),
                        graphql_name="assignment",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Assigns a user to an error group

    Arguments:

    * `assignment` (`ErrorsInboxAssignErrorGroupInput!`): An input
      object that represents the new assignment.
    * `id` (`ID!`): The id of the error group.
    """

    errors_inbox_delete_error_group_resource = sgqlc.types.Field(
        ErrorsInboxDeleteErrorGroupResourceResponse,
        graphql_name="errorsInboxDeleteErrorGroupResource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "resource_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="resourceId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Removes a resource from an error group.

    Arguments:

    * `id` (`ID!`): The id of the error group.
    * `resource_id` (`ID!`): Id of the resource
    """

    errors_inbox_update_error_group_state = sgqlc.types.Field(
        ErrorsInboxUpdateErrorGroupStateResponse,
        graphql_name="errorsInboxUpdateErrorGroupState",
        args=sgqlc.types.ArgDict(
            (
                ("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
                (
                    "state",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ErrorsInboxErrorGroupState),
                        graphql_name="state",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Updates the states of error groups.

    Arguments:

    * `id` (`ID`): DEPRECATED. Use `ids` field instead.
    * `ids` (`[ID!]`): The ids of the error groups.
    * `state` (`ErrorsInboxErrorGroupState!`): State that the error
      groups should transition to.
    """

    events_to_metrics_create_rule = sgqlc.types.Field(
        EventsToMetricsCreateRuleResult,
        graphql_name="eventsToMetricsCreateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "rules",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(EventsToMetricsCreateRuleInput)
                        ),
                        graphql_name="rules",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a new rule which will make metrics from event data.

    Arguments:

    * `rules` (`[EventsToMetricsCreateRuleInput]!`): List of events to
      metrics rules to create.
    """

    events_to_metrics_delete_rule = sgqlc.types.Field(
        EventsToMetricsDeleteRuleResult,
        graphql_name="eventsToMetricsDeleteRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "deletes",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(EventsToMetricsDeleteRuleInput)
                        ),
                        graphql_name="deletes",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete an event-to-metric rule.

    Arguments:

    * `deletes` (`[EventsToMetricsDeleteRuleInput]!`): List of events
      to metrics rules to delete.
    """

    events_to_metrics_update_rule = sgqlc.types.Field(
        EventsToMetricsUpdateRuleResult,
        graphql_name="eventsToMetricsUpdateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "updates",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(EventsToMetricsUpdateRuleInput)
                        ),
                        graphql_name="updates",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Enable or disable an event-to-metric rule.

    Arguments:

    * `updates` (`[EventsToMetricsUpdateRuleInput]!`): List of events
      to metrics rules to update.
    """

    incident_intelligence_environment_consent_accounts = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentConsentAccounts,
        graphql_name="incidentIntelligenceEnvironmentConsentAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),
                        graphql_name="accountIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Consent accounts to usage of the Incident Intelligence product in
    the EU or FedRAMP

    Arguments:

    * `account_ids` (`[Int]!`): The account ids to mark with consent,
      will consent the parent accounts
    """

    incident_intelligence_environment_consent_authorized_accounts = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentConsentAuthorizedAccounts,
        graphql_name="incidentIntelligenceEnvironmentConsentAuthorizedAccounts",
    )
    """Consent all of the user's authorized accounts"""

    incident_intelligence_environment_create_environment = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentCreateEnvironment,
        graphql_name="incidentIntelligenceEnvironmentCreateEnvironment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "associated_account_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(Int),
                        graphql_name="associatedAccountIds",
                        default=None,
                    ),
                ),
                (
                    "incident_intelligence_account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="incidentIntelligenceAccountId",
                        default=None,
                    ),
                ),
                ("name", sgqlc.types.Arg(String, graphql_name="name", default=None)),
            )
        ),
    )
    """Creates a new environment, each environment is attached to a
    parent account and an account. Note that only one environment per
    parent account is supported.

    Arguments:

    * `associated_account_ids` (`[Int]`): The account ids of the
      accounts that should be manually associated with the
      environment, if empty or null then the accounts are determinted
      automatically
    * `incident_intelligence_account_id` (`Int!`): The account id to
      attach to the environment
    * `name` (`String`): The environment name
    """

    incident_intelligence_environment_delete_environment = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentDeleteEnvironment,
        graphql_name="incidentIntelligenceEnvironmentDeleteEnvironment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Deletes an existing environment

    Arguments:

    * `account_id` (`Int!`): The account id to delete
    """

    incident_intelligence_environment_dissent_accounts = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentDissentAccounts,
        graphql_name="incidentIntelligenceEnvironmentDissentAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),
                        graphql_name="accountIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Dissent accounts to usage of the Incident Intelligence product in
    the EU or FedRAMP (removes the consent marking)

    Arguments:

    * `account_ids` (`[Int]!`): The account ids to dissent, empty list
      will mark all of the current user parent-accounts
    """

    installation_create_install_status = sgqlc.types.Field(
        sgqlc.types.non_null(InstallationInstallStatus),
        graphql_name="installationCreateInstallStatus",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "install_status",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(InstallationInstallStatusInput),
                        graphql_name="installStatus",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Creates a new install status. An install status is created on
    behalf of the newrelic-cli whenever the CLI has started an
    installation and completed an installation.  Guided install:
    https://docs.newrelic.com/docs/full-stack-observability/observe-
    everything/get-started/new-relic-guided-install-overview/
    newrelic-cli: https://github.com/newrelic/newrelic-cli

    Arguments:

    * `account_id` (`Int!`): The accountId associated with the install
      status.
    * `install_status` (`InstallationInstallStatusInput!`): The
      installation status.
    """

    installation_create_recipe_event = sgqlc.types.Field(
        sgqlc.types.non_null(InstallationRecipeEvent),
        graphql_name="installationCreateRecipeEvent",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "status",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(InstallationRecipeStatus),
                        graphql_name="status",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Creates a new recipe event. - A recipe event is created on behalf
    of the newrelic-cli whenever the CLI attempts to install the
    infrastructure-agent, for example. - A recipe event is appended to
    any existing recipe events, if there are any present in the cache.
    Guided install: https://docs.newrelic.com/docs/full-stack-
    observability/observe-everything/get-started/new-relic-guided-
    install-overview/ newrelic-cli:
    https://github.com/newrelic/newrelic-cli

    Arguments:

    * `account_id` (`Int!`): The accountId associated with the recipe
      event.
    * `status` (`InstallationRecipeStatus!`): The installation status
      associated with the recipe event.
    """

    installation_delete_install = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean),
        graphql_name="installationDeleteInstall",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Deletes an installation status and all recipe statuses given the
    accountId.

    Arguments:

    * `account_id` (`Int!`): The accountId associated with the
      installation.
    """

    log_configurations_create_data_partition_rule = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsCreateDataPartitionRuleResponse),
        graphql_name="logConfigurationsCreateDataPartitionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsCreateDataPartitionRuleInput
                        ),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a new data partition rule.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the data
      partition rule.
    * `rule` (`LogConfigurationsCreateDataPartitionRuleInput!`): The
      data partition rule to be created.
    """

    log_configurations_create_obfuscation_expression = sgqlc.types.Field(
        LogConfigurationsObfuscationExpression,
        graphql_name="logConfigurationsCreateObfuscationExpression",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "expression",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsCreateObfuscationExpressionInput
                        ),
                        graphql_name="expression",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create an obfuscation expression.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the
      obfuscation expression.
    * `expression`
      (`LogConfigurationsCreateObfuscationExpressionInput!`): The
      obfuscation expression you want to create.
    """

    log_configurations_create_obfuscation_rule = sgqlc.types.Field(
        LogConfigurationsObfuscationRule,
        graphql_name="logConfigurationsCreateObfuscationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsCreateObfuscationRuleInput
                        ),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create an obfuscation rule.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the
      obfuscation rule.
    * `rule` (`LogConfigurationsCreateObfuscationRuleInput!`): The
      obfuscation rule you want to create.
    """

    log_configurations_create_parsing_rule = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsCreateParsingRuleResponse),
        graphql_name="logConfigurationsCreateParsingRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(LogConfigurationsParsingRuleConfiguration),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a new parsing rule.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the rule.
    * `rule` (`LogConfigurationsParsingRuleConfiguration!`): The rule
      to be created.
    """

    log_configurations_delete_data_partition_rule = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsDeleteDataPartitionRuleResponse),
        graphql_name="logConfigurationsDeleteDataPartitionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Delete an existing data partition rule. This operation will result
    in data to be allocated in the main NRDB storage (Log) if no other
    data partition rule exists intercepting the logs matching this
    rule. A deleted data partition rule can be recreated using the
    same name.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the data
      partition rule.
    * `id` (`ID!`): The id of the data partition rule you want to mark
      as deleted.
    """

    log_configurations_delete_obfuscation_expression = sgqlc.types.Field(
        LogConfigurationsObfuscationExpression,
        graphql_name="logConfigurationsDeleteObfuscationExpression",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Delete an obfuscation expression.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the
      obfuscation expression.
    * `id` (`ID!`): The id of the obfuscation expression to mark as
      deleted.
    """

    log_configurations_delete_obfuscation_rule = sgqlc.types.Field(
        LogConfigurationsObfuscationRule,
        graphql_name="logConfigurationsDeleteObfuscationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Delete an obfuscation rule.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the
      obfuscation rule.
    * `id` (`ID!`): The id of the obfuscation rule to mark as deleted.
    """

    log_configurations_delete_parsing_rule = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsDeleteParsingRuleResponse),
        graphql_name="logConfigurationsDeleteParsingRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Delete an existing parsing rule.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the rule.
    * `id` (`ID!`): The id of the rule you want to mark as deleted.
    """

    log_configurations_update_data_partition_rule = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsUpdateDataPartitionRuleResponse),
        graphql_name="logConfigurationsUpdateDataPartitionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        LogConfigurationsUpdateDataPartitionRuleInput,
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update an existing data partition rule.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the data
      partition rule.
    * `rule` (`LogConfigurationsUpdateDataPartitionRuleInput`): The
      data partition rule to be updated. Only the rule description or
      Matching criteria fields are allowed to be updated.
    """

    log_configurations_update_obfuscation_expression = sgqlc.types.Field(
        LogConfigurationsObfuscationExpression,
        graphql_name="logConfigurationsUpdateObfuscationExpression",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "expression",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsUpdateObfuscationExpressionInput
                        ),
                        graphql_name="expression",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update an existing data partition rule.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the
      obfuscation expression.
    * `expression`
      (`LogConfigurationsUpdateObfuscationExpressionInput!`): The
      obfuscation expression to be updated.
    """

    log_configurations_update_obfuscation_rule = sgqlc.types.Field(
        LogConfigurationsObfuscationRule,
        graphql_name="logConfigurationsUpdateObfuscationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsUpdateObfuscationRuleInput
                        ),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update an existing data partition rule.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the
      obfuscation rule.
    * `rule` (`LogConfigurationsUpdateObfuscationRuleInput!`): The
      obfuscation rule to be updated.
    """

    log_configurations_update_parsing_rule = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsUpdateParsingRuleResponse),
        graphql_name="logConfigurationsUpdateParsingRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(LogConfigurationsParsingRuleConfiguration),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update an existing parsing rule.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the rule.
    * `id` (`ID!`): The identifier of the rule to update.
    * `rule` (`LogConfigurationsParsingRuleConfiguration!`): The
      updated rule.
    """

    log_configurations_upsert_pipeline_configuration = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsUpsertPipelineConfigurationResponse),
        graphql_name="logConfigurationsUpsertPipelineConfiguration",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "pipeline_configuration",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsPipelineConfigurationInput
                        ),
                        graphql_name="pipelineConfiguration",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Upsert pipeline configuration for an account.

    Arguments:

    * `account_id` (`Int!`): The account id associated with the rule.
    * `pipeline_configuration`
      (`LogConfigurationsPipelineConfigurationInput!`): The updated
      pipeline configuration.
    """

    metric_normalization_create_rule = sgqlc.types.Field(
        MetricNormalizationRuleMutationResponse,
        graphql_name="metricNormalizationCreateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(MetricNormalizationCreateRuleInput),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Creates a metric normalization rule

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `rule` (`MetricNormalizationCreateRuleInput!`): An input object
      that represents the rule to be created.
    """

    metric_normalization_disable_rule = sgqlc.types.Field(
        MetricNormalizationRuleMutationResponse,
        graphql_name="metricNormalizationDisableRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )
    """Disables a metric normalization rule

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `rule_id` (`Int!`): Rule id
    """

    metric_normalization_edit_rule = sgqlc.types.Field(
        MetricNormalizationRuleMutationResponse,
        graphql_name="metricNormalizationEditRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(MetricNormalizationEditRuleInput),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """edit a metric normalization rule

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `rule` (`MetricNormalizationEditRuleInput!`): An input object
      that represents the rule to be created.
    """

    metric_normalization_enable_rule = sgqlc.types.Field(
        MetricNormalizationRuleMutationResponse,
        graphql_name="metricNormalizationEnableRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )
    """Enables a metric normalization rule

    Arguments:

    * `account_id` (`Int!`): Account Id
    * `rule_id` (`Int!`): Rule id
    """

    mobile_push_notification_remove_device = sgqlc.types.Field(
        sgqlc.types.non_null(MobilePushNotificationRemoveDeviceResult),
        graphql_name="mobilePushNotificationRemoveDevice",
        args=sgqlc.types.ArgDict(
            (
                (
                    "device_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="deviceId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Remove a mobile device from the users list of devices

    Arguments:

    * `device_id` (`String!`): The uuid of the device.
    """

    mobile_push_notification_send_test_push = sgqlc.types.Field(
        sgqlc.types.non_null(MobilePushNotificationSendPushResult),
        graphql_name="mobilePushNotificationSendTestPush",
        args=sgqlc.types.ArgDict(
            (
                (
                    "device_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="deviceId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Send a test push notification to a users specific mobile device

    Arguments:

    * `device_id` (`String!`): The uuid of the device.
    """

    mobile_push_notification_send_test_push_to_all = sgqlc.types.Field(
        sgqlc.types.non_null(MobilePushNotificationSendPushResult),
        graphql_name="mobilePushNotificationSendTestPushToAll",
    )
    """Send a test push notification to all of a users mobile devices"""

    nerd_storage_delete_collection = sgqlc.types.Field(
        NerdStorageDeleteResult,
        graphql_name="nerdStorageDeleteCollection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageScopeInput),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                (
                    "scope_by_actor",
                    sgqlc.types.Arg(Boolean, graphql_name="scopeByActor", default=None),
                ),
            )
        ),
    )
    """Delete a NerdStorage collection.  To use the NerdStorage schema
    you must specify a Nerdpack ID using the NewRelic-Package-Id
    header in your request.

    Arguments:

    * `collection` (`String!`): The collection to be deleted.
    * `scope` (`NerdStorageScopeInput!`): The data access level and ID
      for the selected scope.
    * `scope_by_actor` (`Boolean`)None
    """

    nerd_storage_delete_document = sgqlc.types.Field(
        NerdStorageDeleteResult,
        graphql_name="nerdStorageDeleteDocument",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageScopeInput),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                (
                    "scope_by_actor",
                    sgqlc.types.Arg(Boolean, graphql_name="scopeByActor", default=None),
                ),
            )
        ),
    )
    """Delete a NerdStorage document.  To use the NerdStorage schema you
    must specify a Nerdpack ID using the NewRelic-Package-Id header in
    your request.

    Arguments:

    * `collection` (`String!`): The NerdStorage collection that the
      document being deleted belongs to.
    * `document_id` (`String!`): The documentId of the document to be
      deleted.
    * `scope` (`NerdStorageScopeInput!`): The data access level and ID
      for the selected scope.
    * `scope_by_actor` (`Boolean`)None
    """

    nerd_storage_vault_delete_secret = sgqlc.types.Field(
        sgqlc.types.non_null(NerdStorageVaultDeleteSecretResult),
        graphql_name="nerdStorageVaultDeleteSecret",
        args=sgqlc.types.ArgDict(
            (
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageVaultScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete an existing secret for the selected scope.

    Arguments:

    * `key` (`String!`): The unique identifier of the secret.
    * `scope` (`NerdStorageVaultScope!`): The NerdStorageVault data
      access level of the secret.
    """

    nerd_storage_vault_write_secret = sgqlc.types.Field(
        sgqlc.types.non_null(NerdStorageVaultWriteSecretResult),
        graphql_name="nerdStorageVaultWriteSecret",
        args=sgqlc.types.ArgDict(
            (
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageVaultScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                (
                    "secret",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageVaultWriteSecretInput),
                        graphql_name="secret",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Store or modify a secret.

    Arguments:

    * `scope` (`NerdStorageVaultScope!`): The type of scope the secret
      will be associated with. The mutation allows for only one scope
      type at a time to add a secret.
    * `secret` (`NerdStorageVaultWriteSecretInput!`): The secrets data
    """

    nerd_storage_write_document = sgqlc.types.Field(
        NerdStorageDocument,
        graphql_name="nerdStorageWriteDocument",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "document",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageDocument),
                        graphql_name="document",
                        default=None,
                    ),
                ),
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageScopeInput),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                (
                    "scope_by_actor",
                    sgqlc.types.Arg(Boolean, graphql_name="scopeByActor", default=None),
                ),
            )
        ),
    )
    """Create a new NerdStorage document.  To use the NerdStorage schema
    you must specify a Nerdpack ID using the NewRelic-Package-Id
    header in your request.

    Arguments:

    * `collection` (`String!`): The NerdStorage collection to which
      the new document will be written.
    * `document` (`NerdStorageDocument!`): The new NerdStorage
      document to be written.
    * `document_id` (`String!`): The documentId for the newly created
      NerdStorage document.
    * `scope` (`NerdStorageScopeInput!`): The data access level and ID
      for the selected scope.
    * `scope_by_actor` (`Boolean`)None
    """

    nerdpack_add_allowed_accounts = sgqlc.types.Field(
        NerdpackAllowListResult,
        graphql_name="nerdpackAddAllowedAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "allow_list",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackAllowListInput),
                        graphql_name="allowList",
                        default=None,
                    ),
                ),
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Adds accounts to the Nerdpack allow list. The accounts must belong
    to the user's authorized account list.

    Arguments:

    * `allow_list` (`NerdpackAllowListInput!`): Data of accounts to be
      added to the allow list.
    * `nerdpack_id` (`ID!`): Nerdpack id.
    """

    nerdpack_create = sgqlc.types.Field(
        sgqlc.types.non_null(NerdpackData),
        graphql_name="nerdpackCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_data",
                    sgqlc.types.Arg(
                        NerdpackCreationInput, graphql_name="nerdpackData", default=None
                    ),
                ),
            )
        ),
    )
    """Creates a Nerdpack with a unique and random uuid V5.

    Arguments:

    * `nerdpack_data` (`NerdpackCreationInput`): Nerdpack input data.
    """

    nerdpack_remove_allowed_accounts = sgqlc.types.Field(
        NerdpackAllowListResult,
        graphql_name="nerdpackRemoveAllowedAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "allow_list",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackAllowListInput),
                        graphql_name="allowList",
                        default=None,
                    ),
                ),
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Removes accounts from the Nerdpack allow list. The accounts must
    belong to the user's authorized account list.

    Arguments:

    * `allow_list` (`NerdpackAllowListInput!`): Data of accounts to be
      removed from the allow list.
    * `nerdpack_id` (`ID!`): Nerdpack id.
    """

    nerdpack_remove_version_tag = sgqlc.types.Field(
        NerdpackRemovedTagResponse,
        graphql_name="nerdpackRemoveVersionTag",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
                (
                    "version_tag",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackRemoveVersionTagInput),
                        graphql_name="versionTag",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Remove a specific nerdpack version tag. This operation can only be
    performed if: - User has untagging capabilities. - User has
    accepted the terms and conditions. - User's account is the
    Nerdpack owner, or is an authorized account, or is an admin
    account for the Nerdpack owner account.

    Arguments:

    * `nerdpack_id` (`ID!`): Nerdpack id.
    * `version_tag` (`NerdpackRemoveVersionTagInput!`): Input data for
      nerdpack version tagging.
    """

    nerdpack_subscribe_accounts = sgqlc.types.Field(
        NerdpackSubscribeResult,
        graphql_name="nerdpackSubscribeAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
                (
                    "subscription",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackSubscribeAccountsInput),
                        graphql_name="subscription",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Make a Nerdpack publication available to a list of accounts.
    Providing partial results.

    Arguments:

    * `nerdpack_id` (`ID!`): Nerdpack id.
    * `subscription` (`NerdpackSubscribeAccountsInput!`): Subscription
      data.
    """

    nerdpack_tag_version = sgqlc.types.Field(
        NerdpackVersion,
        graphql_name="nerdpackTagVersion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
                (
                    "version_tag",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackTagVersionInput),
                        graphql_name="versionTag",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Tag a Nerdpack version. This operation can only be performed if: -
    User has tagging capabilities. - User has accepted the terms and
    conditions. - User's account is the Nerdpack owner, or is an
    authorized account, or is an admin account for the Nerdpack owner
    account.

    Arguments:

    * `nerdpack_id` (`ID!`): Nerdpack id.
    * `version_tag` (`NerdpackTagVersionInput!`): Input data for
      nerdpack version tagging.
    """

    nerdpack_unsubscribe_accounts = sgqlc.types.Field(
        NerdpackUnsubscribeResult,
        graphql_name="nerdpackUnsubscribeAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
                (
                    "subscription",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackUnsubscribeAccountsInput),
                        graphql_name="subscription",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Make a Nerdpack publication unavailable to a list of accounts.
    Providing partial results.

    Arguments:

    * `nerdpack_id` (`ID!`): Nerdpack id.
    * `subscription` (`NerdpackUnsubscribeAccountsInput!`):
      Subscription data.
    """

    nr1_catalog_install_alert_policy_template = sgqlc.types.Field(
        Nr1CatalogInstallAlertPolicyTemplateResult,
        graphql_name="nr1CatalogInstallAlertPolicyTemplate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "alert_policy_template_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="alertPolicyTemplateId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Install an alert policy template on a given account for use in it

    Arguments:

    * `account_id` (`Int!`): The id of the account to install the
      alert policy template on
    * `alert_policy_template_id` (`ID!`): The id of the alert policy
      template to install on the account
    """

    nr1_catalog_install_dashboard_template = sgqlc.types.Field(
        Nr1CatalogInstallDashboardTemplateResult,
        graphql_name="nr1CatalogInstallDashboardTemplate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "dashboard_template_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="dashboardTemplateId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Install a dashboard template on a given account for use in it

    Arguments:

    * `account_id` (`Int!`): The id of the account to install the
      dashboard template on
    * `dashboard_template_id` (`ID!`): The id of the dashboard
      template to install on the account
    """

    nr1_catalog_submit_metadata = sgqlc.types.Field(
        Nr1CatalogSubmitMetadataResult,
        graphql_name="nr1CatalogSubmitMetadata",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "nerdpack_metadata",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Nr1CatalogSubmitMetadataInput),
                        graphql_name="nerdpackMetadata",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Submit metadata for a Nerdpack that will be available in the New
    Relic One Catalog

    Arguments:

    * `id` (`ID!`): The Nerdpack's ID that will be associated with the
      metadata
    * `nerdpack_metadata` (`Nr1CatalogSubmitMetadataInput!`): The
      metadata for the Nerdpack that will be available in the New
      Relic One Catalog
    """

    nrql_drop_rules_create = sgqlc.types.Field(
        NrqlDropRulesCreateDropRuleResult,
        graphql_name="nrqlDropRulesCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rules",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(NrqlDropRulesCreateDropRuleInput)
                        ),
                        graphql_name="rules",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create new drop rule(s).

    Arguments:

    * `account_id` (`Int!`): The account the targeted data report to.
    * `rules` (`[NrqlDropRulesCreateDropRuleInput]!`): The list of
      drop rules you want to create.
    """

    nrql_drop_rules_delete = sgqlc.types.Field(
        NrqlDropRulesDeleteDropRuleResult,
        graphql_name="nrqlDropRulesDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ruleIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete drop rule(s) by id.

    Arguments:

    * `account_id` (`Int!`): Account the rule was created on.
    * `rule_ids` (`[ID]!`): The list of drop rules Ids you want to
      delete.
    """

    open_installation_observability_pack_install = sgqlc.types.Field(
        OpenInstallationObservabilityPackInstallResult,
        graphql_name="openInstallationObservabilityPackInstall",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "pack_name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="packName",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Install an Observability Pack

    Arguments:

    * `account_id` (`Int!`): Account ID where the Observability Pack
      will be created.
    * `pack_name` (`String!`): Name of the Observability Pack to be
      installed
    """

    open_installation_quickstart_component_install = sgqlc.types.Field(
        OpenInstallationQuickstartInstallResult,
        graphql_name="openInstallationQuickstartComponentInstall",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "component",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            OpenInstallationInstallableQuickstartComponentInput
                        ),
                        graphql_name="component",
                        default=None,
                    ),
                ),
                (
                    "quickstart_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="quickstartId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Install a single component from a quickstart

    Arguments:

    * `account_id` (`Int!`): Account ID where the Quickstart will be
      created.
    * `component`
      (`OpenInstallationInstallableQuickstartComponentInput!`): The
      component to install
    * `quickstart_id` (`ID!`): ID of the quickstart this component
      exists in
    """

    open_installation_quickstart_install = sgqlc.types.Field(
        OpenInstallationQuickstartInstallResult,
        graphql_name="openInstallationQuickstartInstall",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "component_type",
                    sgqlc.types.Arg(
                        OpenInstallationInstallableQuickstartComponentType,
                        graphql_name="componentType",
                        default=None,
                    ),
                ),
                ("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),
                (
                    "pack_name",
                    sgqlc.types.Arg(String, graphql_name="packName", default=None),
                ),
            )
        ),
    )
    """Install a Quickstart

    Arguments:

    * `account_id` (`Int!`): Account ID where the Quickstart will be
      created.
    * `component_type`
      (`OpenInstallationInstallableQuickstartComponentType`):
      Component type to install.  If none is provided, all types in
      the pack will be installed.
    * `id` (`ID`): ID of the Quickstart to be installed  Note: You
      must supply either a packName or id, but not both
    * `pack_name` (`String`): Name of the Quickstart to be installed
      Note: You must supply either a packName or id, but not both
    """

    organization_provisioning_update_partner_subscription = sgqlc.types.Field(
        sgqlc.types.non_null(OrganizationProvisioningUpdateSubscriptionResult),
        graphql_name="organizationProvisioningUpdatePartnerSubscription",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "affected_account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="affectedAccountId",
                        default=None,
                    ),
                ),
                (
                    "products",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(
                                    OrganizationProvisioningProductInput
                                )
                            )
                        ),
                        graphql_name="products",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`): Partner Owner Account Id for the
      Partnership that includes the affected account.
    * `affected_account_id` (`Int!`): Account id to which new
      entitlements will be applied
    * `products` (`[OrganizationProvisioningProductInput!]!`): New
      entitlement set to be applied
    """

    organization_update = sgqlc.types.Field(
        OrganizationUpdateResponse,
        graphql_name="organizationUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "organization",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(OrganizationUpdateInput),
                        graphql_name="organization",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `organization` (`OrganizationUpdateInput!`): The new attributes
      for the organization.
    """

    pixie_link_pixie_project = sgqlc.types.Field(
        PixieLinkPixieProjectResult,
        graphql_name="pixieLinkPixieProject",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "api_key",
                    sgqlc.types.Arg(SecureValue, graphql_name="apiKey", default=None),
                ),
            )
        ),
    )
    """Link a Pixie project to a New Relic account using a Pixie API key

    Arguments:

    * `account_id` (`Int!`): The New Relic account to link with Pixie
    * `api_key` (`SecureValue`): The Pixie API key
    """

    pixie_record_pixie_tos_acceptance = sgqlc.types.Field(
        PixieRecordPixieTosAcceptanceResult,
        graphql_name="pixieRecordPixieTosAcceptance",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Record the Pixie terms of service acceptance for a given account

    Arguments:

    * `account_id` (`Int!`): The New Relic account to link with Pixie
    """

    pixie_unlink_pixie_project = sgqlc.types.Field(
        PixieLinkPixieProjectResult,
        graphql_name="pixieUnlinkPixieProject",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Unlink a Pixie project to a New Relic account

    Arguments:

    * `account_id` (`Int!`): The New Relic account to link with Pixie
    """

    reference_entity_create_or_update_repository = sgqlc.types.Field(
        ReferenceEntityCreateRepositoryResult,
        graphql_name="referenceEntityCreateOrUpdateRepository",
        args=sgqlc.types.ArgDict(
            (
                (
                    "repositories",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(
                                    ReferenceEntityCreateRepositoryInput
                                )
                            )
                        ),
                        graphql_name="repositories",
                        default=None,
                    ),
                ),
                ("sync", sgqlc.types.Arg(Boolean, graphql_name="sync", default=None)),
            )
        ),
    )
    """Creates or updates repository entities.

    Arguments:

    * `repositories` (`[ReferenceEntityCreateRepositoryInput!]!`): The
      list of repositories to create or update.
    * `sync` (`Boolean`): Flag to force a synchronous execution of the
      mutation, which means that the entity has been stored once the
      mutation returns. Default is 'false', which means the entity is
      queued for storage.
    """

    service_level_create = sgqlc.types.Field(
        "ServiceLevelIndicator",
        graphql_name="serviceLevelCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "entity_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="entityGuid",
                        default=None,
                    ),
                ),
                (
                    "indicator",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ServiceLevelIndicatorCreateInput),
                        graphql_name="indicator",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Creates a new SLI.

    Arguments:

    * `entity_guid` (`EntityGuid!`): The entity GUID which the SLI
      will be attached to.
    * `indicator` (`ServiceLevelIndicatorCreateInput!`): The input
      object that represents the SLI that will be created.
    """

    service_level_delete = sgqlc.types.Field(
        "ServiceLevelIndicator",
        graphql_name="serviceLevelDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(EntityGuid, graphql_name="guid", default=None),
                ),
                ("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),
            )
        ),
    )
    """Deletes an existing SLI by the GUID.

    Arguments:

    * `guid` (`EntityGuid`): The unique entity identifier of the SLI.
    * `id` (`ID`): [DEPRECATED] Please, use the GUID input field to
      delete the SLI.
    """

    service_level_update = sgqlc.types.Field(
        "ServiceLevelIndicator",
        graphql_name="serviceLevelUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(EntityGuid, graphql_name="guid", default=None),
                ),
                ("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),
                (
                    "indicator",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ServiceLevelIndicatorUpdateInput),
                        graphql_name="indicator",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Updates an existing SLI by the GUID.

    Arguments:

    * `guid` (`EntityGuid`): The unique entity identifier of the SLI.
    * `id` (`ID`): [DEPRECATED] Please, use the GUID input field to
      update the SLI.
    * `indicator` (`ServiceLevelIndicatorUpdateInput!`): The input
      object that represents the SLI that will be updated.
    """

    synthetics_create_broken_links_monitor = sgqlc.types.Field(
        "SyntheticsBrokenLinksMonitorCreateMutationResult",
        graphql_name="syntheticsCreateBrokenLinksMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateBrokenLinksMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a Synthetic Broken Links monitor

    Arguments:

    * `account_id` (`Int!`): The account in which the Synthetics
      Broken Links monitor will be created
    * `monitor` (`SyntheticsCreateBrokenLinksMonitorInput!`): The
      input arguments required to create a Synthetics Broken Links
      monitor
    """

    synthetics_create_cert_check_monitor = sgqlc.types.Field(
        "SyntheticsCertCheckMonitorCreateMutationResult",
        graphql_name="syntheticsCreateCertCheckMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateCertCheckMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a Synthetic Cert Check (Certificate check) monitor

    Arguments:

    * `account_id` (`Int!`): The account in which the Synthetics Cert
      Check monitor will be created
    * `monitor` (`SyntheticsCreateCertCheckMonitorInput!`): The input
      arguments required to create a Synthetics Cert Check monitor
    """

    synthetics_create_private_location = sgqlc.types.Field(
        "SyntheticsPrivateLocationMutationResult",
        graphql_name="syntheticsCreatePrivateLocation",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
                (
                    "verified_script_execution",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Boolean),
                        graphql_name="verifiedScriptExecution",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a Synthetics Private Location

    Arguments:

    * `account_id` (`Int!`): The account that will be associated with
      the created private location
    * `description` (`String`): The private location description
    * `name` (`String!`): The name of the private location
    * `verified_script_execution` (`Boolean!`): The private location
      requires a password to edit if value is true
    """

    synthetics_create_script_api_monitor = sgqlc.types.Field(
        "SyntheticsScriptApiMonitorCreateMutationResult",
        graphql_name="syntheticsCreateScriptApiMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateScriptApiMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a Synthetic Script Api monitor

    Arguments:

    * `account_id` (`Int!`): The account in which the Synthetics
      Script Api monitor will be created
    * `monitor` (`SyntheticsCreateScriptApiMonitorInput!`): The input
      arguments required to create a Synthetics Script Api monitor
    """

    synthetics_create_script_browser_monitor = sgqlc.types.Field(
        "SyntheticsScriptBrowserMonitorCreateMutationResult",
        graphql_name="syntheticsCreateScriptBrowserMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateScriptBrowserMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a Synthetic Script Browser Monitor

    Arguments:

    * `account_id` (`Int!`): The account in which the Synthetics
      Script Browser monitor will be created
    * `monitor` (`SyntheticsCreateScriptBrowserMonitorInput!`): The
      input arguments required to create a Synthetics Script Browser
      monitor
    """

    synthetics_create_secure_credential = sgqlc.types.Field(
        "SyntheticsSecureCredentialMutationResult",
        graphql_name="syntheticsCreateSecureCredential",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "value",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecureValue),
                        graphql_name="value",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Queues a request to create a secure credential

    Arguments:

    * `account_id` (`Int!`): The account that will be associated with
      the created secure credential
    * `description` (`String`): The description identifier for the
      Synthetics Secure Credential in New Relic
    * `key` (`String!`): The unique key identifier for the Synthetics
      Secure Credential in New Relic
    * `value` (`SecureValue!`): The value identifier for the
      Synthetics Secure Credential in New Relic
    """

    synthetics_create_simple_browser_monitor = sgqlc.types.Field(
        "SyntheticsSimpleBrowserMonitorCreateMutationResult",
        graphql_name="syntheticsCreateSimpleBrowserMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateSimpleBrowserMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a Synthetic Simple (Ping) monitor

    Arguments:

    * `account_id` (`Int!`): The account in which the Synthetics
      Simple Browser monitor will be created
    * `monitor` (`SyntheticsCreateSimpleBrowserMonitorInput!`): The
      input arguments required to create a Synthetics Simple Browser
      monitor
    """

    synthetics_create_simple_monitor = sgqlc.types.Field(
        "SyntheticsSimpleBrowserMonitorCreateMutationResult",
        graphql_name="syntheticsCreateSimpleMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateSimpleMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a Synthetic Simple (Ping) monitor

    Arguments:

    * `account_id` (`Int!`): The account in which the Synthetics
      Simple (Ping) monitor will be created
    * `monitor` (`SyntheticsCreateSimpleMonitorInput!`): The input
      arguments required to create a Synthetics Simple (Ping) monitor
    """

    synthetics_create_step_monitor = sgqlc.types.Field(
        "SyntheticsStepMonitorCreateMutationResult",
        graphql_name="syntheticsCreateStepMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateStepMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Create a Synthetic Step monitor

    Arguments:

    * `account_id` (`Int!`): The account in which the Synthetics Step
      monitor will be created
    * `monitor` (`SyntheticsCreateStepMonitorInput!`): The input
      arguments required to create a Synthetics Step Monitor
    """

    synthetics_delete_monitor = sgqlc.types.Field(
        "SyntheticsMonitorDeleteMutationResult",
        graphql_name="syntheticsDeleteMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete a Synthetic Monitor

    Arguments:

    * `guid` (`EntityGuid!`): The unique identifier for the Synthetic
      Monitor in New Relic
    """

    synthetics_delete_private_location = sgqlc.types.Field(
        "SyntheticsPrivateLocationDeleteResult",
        graphql_name="syntheticsDeletePrivateLocation",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete a Synthetics Private Location

    Arguments:

    * `guid` (`EntityGuid!`): The client identifier of the private
      location to be deleted
    """

    synthetics_delete_secure_credential = sgqlc.types.Field(
        "SyntheticsSecureCredentialMutationResult",
        graphql_name="syntheticsDeleteSecureCredential",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
            )
        ),
    )
    """Queues a request to delete an existing secure credential

    Arguments:

    * `account_id` (`Int!`): The account that is associated with the
      secure credential to be deleted
    * `key` (`String!`): The unique key identifier for the Synthetics
      Secure Credential in New Relic
    """

    synthetics_purge_private_location_queue = sgqlc.types.Field(
        "SyntheticsPrivateLocationPurgeQueueResult",
        graphql_name="syntheticsPurgePrivateLocationQueue",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Purge the job queue for a specified private location

    Arguments:

    * `guid` (`EntityGuid!`): The unique client identifier for the
      Synthetics Private Location in New Relic
    """

    synthetics_update_broken_links_monitor = sgqlc.types.Field(
        "SyntheticsBrokenLinksMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateBrokenLinksMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateBrokenLinksMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update a Synthetic Broken Links monitor

    Arguments:

    * `guid` (`EntityGuid!`): The unique identifier for the Synthetic
      Monitor in New Relic
    * `monitor` (`SyntheticsUpdateBrokenLinksMonitorInput!`): The
      input arguments required to update a Synthetics Broken Links
      monitor
    """

    synthetics_update_cert_check_monitor = sgqlc.types.Field(
        "SyntheticsCertCheckMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateCertCheckMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateCertCheckMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update a Synthetic Cert Check (Certificate check) monitor

    Arguments:

    * `guid` (`EntityGuid!`): The unique identifier for the Synthetic
      Monitor in New Relic
    * `monitor` (`SyntheticsUpdateCertCheckMonitorInput!`): The input
      arguments required to update a Synthetics Cert Check monitor
    """

    synthetics_update_private_location = sgqlc.types.Field(
        "SyntheticsPrivateLocationMutationResult",
        graphql_name="syntheticsUpdatePrivateLocation",
        args=sgqlc.types.ArgDict(
            (
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "verified_script_execution",
                    sgqlc.types.Arg(
                        Boolean, graphql_name="verifiedScriptExecution", default=None
                    ),
                ),
            )
        ),
    )
    """Update a Synthetics Private Location

    Arguments:

    * `description` (`String`): The private location description
    * `guid` (`EntityGuid!`): The unique client identifier for a
      Synthetics Private Location in New Relic
    * `verified_script_execution` (`Boolean`): Requires password to
      run scripts on this private location
    """

    synthetics_update_script_api_monitor = sgqlc.types.Field(
        "SyntheticsScriptApiMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateScriptApiMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateScriptApiMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update a Synthetic Script Api monitor

    Arguments:

    * `guid` (`EntityGuid!`): The unique identifier for the Synthetic
      Monitor in New Relic
    * `monitor` (`SyntheticsUpdateScriptApiMonitorInput!`): The input
      arguments required to update a Synthetics Script Api Monitor
    """

    synthetics_update_script_browser_monitor = sgqlc.types.Field(
        "SyntheticsScriptBrowserMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateScriptBrowserMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateScriptBrowserMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update a Synthetic Script Browser Monitor

    Arguments:

    * `guid` (`EntityGuid!`): The unique identifier for the Synthetic
      Monitor in New Relic
    * `monitor` (`SyntheticsUpdateScriptBrowserMonitorInput!`): The
      input arguments required to update a Synthetics Script Browser
      monitor
    """

    synthetics_update_secure_credential = sgqlc.types.Field(
        "SyntheticsSecureCredentialMutationResult",
        graphql_name="syntheticsUpdateSecureCredential",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "value",
                    sgqlc.types.Arg(SecureValue, graphql_name="value", default=None),
                ),
            )
        ),
    )
    """Queues a request to update an existing secure credential

    Arguments:

    * `account_id` (`Int!`): The account that is associated with the
      secure credential to be updated
    * `description` (`String`): The description identifier for the
      Synthetics Secure Credential in New Relic
    * `key` (`String!`): The unique key identifier for the Synthetics
      Secure Credential in New Relic
    * `value` (`SecureValue`): The value identifier for the Synthetics
      Secure Credential in New Relic
    """

    synthetics_update_simple_browser_monitor = sgqlc.types.Field(
        "SyntheticsSimpleBrowserMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateSimpleBrowserMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateSimpleBrowserMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update a Synthetic Simple Browser monitor

    Arguments:

    * `guid` (`EntityGuid!`): The unique identifier for the Synthetic
      Monitor in New Relic
    * `monitor` (`SyntheticsUpdateSimpleBrowserMonitorInput!`): The
      input arguments required to update a Synthetics Simple Browser
      monitor
    """

    synthetics_update_simple_monitor = sgqlc.types.Field(
        "SyntheticsSimpleMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateSimpleMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateSimpleMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update a Synthetic Simple (Ping) monitor

    Arguments:

    * `guid` (`EntityGuid!`): The unique identifier for the Synthetic
      Monitor in New Relic
    * `monitor` (`SyntheticsUpdateSimpleMonitorInput!`): The input
      arguments required to update a Synthetics Simple (ping) Monitor
    """

    synthetics_update_step_monitor = sgqlc.types.Field(
        "SyntheticsStepMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateStepMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateStepMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Update a Synthetic Step monitor

    Arguments:

    * `guid` (`EntityGuid!`): The unique identifier for the Synthetic
      Monitor in New Relic
    * `monitor` (`SyntheticsUpdateStepMonitorInput!`): The input
      arguments required to update a Synthetics Step Monitor
    """

    tagging_add_tags_to_entity = sgqlc.types.Field(
        "TaggingMutationResult",
        graphql_name="taggingAddTagsToEntity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "tags",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(TaggingTagInput))
                        ),
                        graphql_name="tags",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Adds the provided tags to your specified entity, without deleting
    existing ones.  The maximum number of tag-values per entity is
    100; if the sum of existing and new tag-values if over the limit
    this mutation will fail.   For details and mutation examples,
    visit [our docs](https://docs.newrelic.com/docs/apis/nerdgraph/exa
    mples/nerdgraph-tagging-api-tutorial).

    Arguments:

    * `guid` (`EntityGuid!`): The guid of the new entity.
    * `tags` (`[TaggingTagInput!]!`): An array of key-values pairs to
      represent a tag. For example:  Team:TeamName.
    """

    tagging_delete_tag_from_entity = sgqlc.types.Field(
        "TaggingMutationResult",
        graphql_name="taggingDeleteTagFromEntity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "tag_keys",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(String))
                        ),
                        graphql_name="tagKeys",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete specific tag keys from the entity.   For details and
    mutation examples, visit [our docs](https://docs.newrelic.com/docs
    /apis/nerdgraph/examples/nerdgraph-tagging-api-tutorial).

    Arguments:

    * `guid` (`EntityGuid!`): The guid of the existing entity.
    * `tag_keys` (`[String!]!`): An array of keys that have to be
      deleted. For example: ['Team'].
    """

    tagging_delete_tag_values_from_entity = sgqlc.types.Field(
        "TaggingMutationResult",
        graphql_name="taggingDeleteTagValuesFromEntity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "tag_values",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(TaggingTagValueInput)
                            )
                        ),
                        graphql_name="tagValues",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete specific tag key-values from the entity.   For details and
    mutation examples, visit [our docs](https://docs.newrelic.com/docs
    /apis/nerdgraph/examples/nerdgraph-tagging-api-tutorial).

    Arguments:

    * `guid` (`EntityGuid!`): The guid of the existing entity.
    * `tag_values` (`[TaggingTagValueInput!]!`): An array of key-
      values pairs to represent a tag. For example: Team:TeamName.
    """

    tagging_replace_tags_on_entity = sgqlc.types.Field(
        "TaggingMutationResult",
        graphql_name="taggingReplaceTagsOnEntity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "tags",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(TaggingTagInput))
                        ),
                        graphql_name="tags",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Replaces the entity's entire set of tags with the provided tag
    set.  The maximum number of tag-values per entity is 100; if more
    than 100 tag-values are provided this mutation will fail.   For
    details and mutation examples, visit [our docs](https://docs.newre
    lic.com/docs/apis/nerdgraph/examples/nerdgraph-tagging-api-
    tutorial).

    Arguments:

    * `guid` (`EntityGuid!`): The guid of the existing entity.
    * `tags` (`[TaggingTagInput!]!`): An array of key-values pairs to
      represent a tag. For example:  Team:TeamName.
    """

    user_management_add_users_to_groups = sgqlc.types.Field(
        "UserManagementAddUsersToGroupsPayload",
        graphql_name="userManagementAddUsersToGroups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "add_users_to_groups_options",
                    sgqlc.types.Arg(
                        UserManagementUsersGroupsInput,
                        graphql_name="addUsersToGroupsOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `add_users_to_groups_options`
      (`UserManagementUsersGroupsInput`): The input object
      representing the group(s) and user(s) to update.
    """

    user_management_create_group = sgqlc.types.Field(
        "UserManagementCreateGroupPayload",
        graphql_name="userManagementCreateGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "create_group_options",
                    sgqlc.types.Arg(
                        UserManagementCreateGroup,
                        graphql_name="createGroupOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `create_group_options` (`UserManagementCreateGroup`): The input
      object representing the group to create
    """

    user_management_delete_group = sgqlc.types.Field(
        "UserManagementDeleteGroupPayload",
        graphql_name="userManagementDeleteGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "group_options",
                    sgqlc.types.Arg(
                        UserManagementDeleteGroup,
                        graphql_name="groupOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Delete a group

    Arguments:

    * `group_options` (`UserManagementDeleteGroup`): The input object
      representing the group to remove
    """

    user_management_remove_users_from_groups = sgqlc.types.Field(
        "UserManagementRemoveUsersFromGroupsPayload",
        graphql_name="userManagementRemoveUsersFromGroups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "remove_users_from_groups_options",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(UserManagementUsersGroupsInput),
                        graphql_name="removeUsersFromGroupsOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Removes Users from Groups

    Arguments:

    * `remove_users_from_groups_options`
      (`UserManagementUsersGroupsInput!`): The input object
      representing the users to remove and the groups to remove them
      from.
    """

    user_management_update_group = sgqlc.types.Field(
        "UserManagementUpdateGroupPayload",
        graphql_name="userManagementUpdateGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "update_group_options",
                    sgqlc.types.Arg(
                        UserManagementUpdateGroup,
                        graphql_name="updateGroupOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `update_group_options` (`UserManagementUpdateGroup`): The input
      object representing the group to update
    """

    whats_new_set_last_read_date = sgqlc.types.Field(
        EpochMilliseconds,
        graphql_name="whatsNewSetLastReadDate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "date",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EpochMilliseconds),
                        graphql_name="date",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Updates the date the current user last read the news.

    Arguments:

    * `date` (`EpochMilliseconds!`): The date, represented since the
      epoch in milliseconds, the current user last read the news.
    """

    workload_create = sgqlc.types.Field(
        "WorkloadCollection",
        graphql_name="workloadCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "workload",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(WorkloadCreateInput),
                        graphql_name="workload",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Creates a new workload.

    Arguments:

    * `account_id` (`Int!`): The New Relic account ID where you want
      to create the workload.
    * `workload` (`WorkloadCreateInput!`): An input object that
      represents the workload to be created.
    """

    workload_delete = sgqlc.types.Field(
        "WorkloadCollection",
        graphql_name="workloadDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Deletes an existing workload.

    Arguments:

    * `guid` (`EntityGuid!`): The GUID of the workload to delete.
    """

    workload_duplicate = sgqlc.types.Field(
        "WorkloadCollection",
        graphql_name="workloadDuplicate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "source_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="sourceGuid",
                        default=None,
                    ),
                ),
                (
                    "workload",
                    sgqlc.types.Arg(
                        WorkloadDuplicateInput, graphql_name="workload", default=None
                    ),
                ),
            )
        ),
    )
    """Duplicates an existing workload.

    Arguments:

    * `account_id` (`Int!`): The New Relic Account ID where you want
      to create the new workload.
    * `source_guid` (`EntityGuid!`): The GUID of the workload you want
      to duplicate.
    * `workload` (`WorkloadDuplicateInput`): An input object with
      information about the new workload.
    """

    workload_update = sgqlc.types.Field(
        "WorkloadCollection",
        graphql_name="workloadUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "workload",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(WorkloadUpdateInput),
                        graphql_name="workload",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Updates an existing workload.

    Arguments:

    * `guid` (`EntityGuid!`): The GUID of the workload you want to
      update.
    * `workload` (`WorkloadUpdateInput!`): An input object with
      information to identify the workload to be updated and its new
      changes.
    """


class RootQueryType(sgqlc.types.Type):
    """This is the root of all GraphQL queries. The fields in this object
    are available at the top level of a query.
    """

    __schema__ = nerdgraph
    __field_names__ = ("actor", "docs", "request_context")
    actor = sgqlc.types.Field(Actor, graphql_name="actor")
    """The `actor` field is the top-level entry into all data that is
    scoped to the API user's access level.
    """

    docs = sgqlc.types.Field(DocumentationFields, graphql_name="docs")
    """Access to structured New Relic documentation data"""

    request_context = sgqlc.types.Field(RequestContext, graphql_name="requestContext")
    """The `requestContext` field provides contextual information about
    the API request itself.
    """


class SecureCredentialSummaryData(sgqlc.types.Type):
    """Summary statistics for the Synthetic Monitor Secure Credential."""

    __schema__ = nerdgraph
    __field_names__ = ("failing_monitor_count", "monitor_count")
    failing_monitor_count = sgqlc.types.Field(Int, graphql_name="failingMonitorCount")
    """The number of monitors that contain this secure credential and
    failed their last check.
    """

    monitor_count = sgqlc.types.Field(Int, graphql_name="monitorCount")
    """The number of monitors that contain this secure credential."""


class ServiceLevelDefinition(sgqlc.types.Type):
    """The service level defined for a specific entity."""

    __schema__ = nerdgraph
    __field_names__ = ("indicators",)
    indicators = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("ServiceLevelIndicator")),
        graphql_name="indicators",
    )
    """The SLIs attached to the entity."""


class ServiceLevelEvents(sgqlc.types.Type):
    """The events that define the SLI."""

    __schema__ = nerdgraph
    __field_names__ = ("account", "bad_events", "good_events", "valid_events")
    account = sgqlc.types.Field(AccountReference, graphql_name="account")
    """The New Relic account to fetch the events from."""

    bad_events = sgqlc.types.Field("ServiceLevelEventsQuery", graphql_name="badEvents")
    """The definition of bad events."""

    good_events = sgqlc.types.Field(
        "ServiceLevelEventsQuery", graphql_name="goodEvents"
    )
    """The definition of good events."""

    valid_events = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelEventsQuery"), graphql_name="validEvents"
    )
    """The definition of valid events."""


class ServiceLevelEventsQuery(sgqlc.types.Type):
    """The query that represents the events to fetch."""

    __schema__ = nerdgraph
    __field_names__ = ("from_", "where")
    from_ = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="from")
    """The NRDB event to fetch the data from."""

    where = sgqlc.types.Field(Nrql, graphql_name="where")
    """The NRQL condition to filter the events."""


class ServiceLevelIndicator(sgqlc.types.Type):
    """The definition of the SLI."""

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "created_by",
        "description",
        "entity_guid",
        "events",
        "guid",
        "id",
        "name",
        "objectives",
        "result_queries",
        "slug",
        "updated_at",
        "updated_by",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """The date when the SLI was created represented in the number of
    milliseconds since the Unix epoch.
    """

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")
    """The user who created the SLI."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the SLI."""

    entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="entityGuid"
    )
    """The entity which the SLI is attached to."""

    events = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelEvents), graphql_name="events"
    )
    """The events that define the SLI."""

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")
    """The unique entity identifier of the SLI."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier of the SLI."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The name of the SLI."""

    objectives = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("ServiceLevelObjective")),
        graphql_name="objectives",
    )
    """A list of objective definitions."""

    result_queries = sgqlc.types.Field(
        "ServiceLevelIndicatorResultQueries", graphql_name="resultQueries"
    )
    """The resulting NRQL queries that help consume the metrics of the
    SLI.
    """

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="slug")
    """[DEPRECATED] The slug is deprecated and it will be removed from
    the schema as soon as possible.
    """

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")
    """The date when the SLI was last updated represented in the number
    of milliseconds since the Unix epoch.
    """

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")
    """The user who last update the SLI."""


class ServiceLevelIndicatorResultQueries(sgqlc.types.Type):
    """The resulting NRQL queries that help consume the metrics of the
    SLI.
    """

    __schema__ = nerdgraph
    __field_names__ = ("good_events", "indicator", "valid_events")
    good_events = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelResultQuery"), graphql_name="goodEvents"
    )
    """The NRQL query that measures the good events."""

    indicator = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelResultQuery"), graphql_name="indicator"
    )
    """The NRQL query that measures the value of the SLI."""

    valid_events = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelResultQuery"), graphql_name="validEvents"
    )
    """The NRQL query that measures the valid events."""


class ServiceLevelObjective(sgqlc.types.Type):
    """An objective definition."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "name", "result_queries", "target", "time_window")
    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the SLO."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the SLO."""

    result_queries = sgqlc.types.Field(
        "ServiceLevelObjectiveResultQueries", graphql_name="resultQueries"
    )
    """The resulting NRQL queries that help consume the metrics of the
    SLO.
    """

    target = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="target")
    """The target percentage of the SLO."""

    time_window = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelObjectiveTimeWindow"),
        graphql_name="timeWindow",
    )
    """The time window configuration of the SLO."""


class ServiceLevelObjectiveResultQueries(sgqlc.types.Type):
    """The resulting NRQL queries that help consume the metrics of the
    SLO.
    """

    __schema__ = nerdgraph
    __field_names__ = ("attainment",)
    attainment = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelResultQuery"), graphql_name="attainment"
    )
    """The NRQL query that measures the attainment of the SLO target."""


class ServiceLevelObjectiveRollingTimeWindow(sgqlc.types.Type):
    """The rolling time window configuration of the SLO."""

    __schema__ = nerdgraph
    __field_names__ = ("count", "unit")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")
    """The count of time units."""

    unit = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelObjectiveRollingTimeWindowUnit),
        graphql_name="unit",
    )
    """The time unit."""


class ServiceLevelObjectiveTimeWindow(sgqlc.types.Type):
    """The time window configuration of the SLO."""

    __schema__ = nerdgraph
    __field_names__ = ("rolling",)
    rolling = sgqlc.types.Field(
        ServiceLevelObjectiveRollingTimeWindow, graphql_name="rolling"
    )
    """The rolling time window configuration of the SLO."""


class ServiceLevelResultQuery(sgqlc.types.Type):
    """A resulting query."""

    __schema__ = nerdgraph
    __field_names__ = ("nrql",)
    nrql = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="nrql")
    """A NRQL query."""


class StackTraceApmException(sgqlc.types.Type):
    """A structured representation of an exception for an APM
    application.
    """

    __schema__ = nerdgraph
    __field_names__ = ("message", "stack_trace")
    message = sgqlc.types.Field(String, graphql_name="message")
    """The top level message associated with the exception."""

    stack_trace = sgqlc.types.Field(
        "StackTraceApmStackTrace", graphql_name="stackTrace"
    )
    """The stack trace associated with the exception."""


class StackTraceApmStackTrace(sgqlc.types.Type):
    """A structured representation of a stack trace for an APM
    application.
    """

    __schema__ = nerdgraph
    __field_names__ = ("frames",)
    frames = sgqlc.types.Field(
        sgqlc.types.list_of("StackTraceApmStackTraceFrame"), graphql_name="frames"
    )
    """Stack trace frames."""


class StackTraceApmStackTraceFrame(sgqlc.types.Type):
    """An object representing a stack trace segment"""

    __schema__ = nerdgraph
    __field_names__ = ("filepath", "formatted", "line", "name")
    filepath = sgqlc.types.Field(String, graphql_name="filepath")
    """Frame filepath"""

    formatted = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="formatted"
    )
    """Formatted frame"""

    line = sgqlc.types.Field(Int, graphql_name="line")
    """Frame line number"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Frame name"""


class StackTraceBrowserException(sgqlc.types.Type):
    """A structured representation of an exception for a Browser
    application.
    """

    __schema__ = nerdgraph
    __field_names__ = ("message", "stack_trace")
    message = sgqlc.types.Field(String, graphql_name="message")
    """The top level message associated to the stack trace."""

    stack_trace = sgqlc.types.Field(
        "StackTraceBrowserStackTrace", graphql_name="stackTrace"
    )
    """The stack trace associated with the exception."""


class StackTraceBrowserStackTrace(sgqlc.types.Type):
    """A structured representation of a stack trace for a Browser
    application.
    """

    __schema__ = nerdgraph
    __field_names__ = ("frames",)
    frames = sgqlc.types.Field(
        sgqlc.types.list_of("StackTraceBrowserStackTraceFrame"), graphql_name="frames"
    )
    """Stack trace frames."""


class StackTraceBrowserStackTraceFrame(sgqlc.types.Type):
    """An object representing a stack trace segment"""

    __schema__ = nerdgraph
    __field_names__ = ("column", "formatted", "line", "name")
    column = sgqlc.types.Field(Int, graphql_name="column")
    """Frame column number"""

    formatted = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="formatted"
    )
    """Formatted frame"""

    line = sgqlc.types.Field(Int, graphql_name="line")
    """Frame line number"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Frame name"""


class StackTraceMobileCrash(sgqlc.types.Type):
    """A structured representation of a crash occurring in a mobile
    application.
    """

    __schema__ = nerdgraph
    __field_names__ = ("stack_trace",)
    stack_trace = sgqlc.types.Field(
        "StackTraceMobileCrashStackTrace", graphql_name="stackTrace"
    )
    """A structured representation of a stack trace for a crash that
    occurs on a mobile application.
    """


class StackTraceMobileCrashStackTrace(sgqlc.types.Type):
    """A structured representation of a stack trace of a crash in a
    mobile application.
    """

    __schema__ = nerdgraph
    __field_names__ = ("frames",)
    frames = sgqlc.types.Field(
        sgqlc.types.list_of("StackTraceMobileCrashStackTraceFrame"),
        graphql_name="frames",
    )
    """Stack trace frames."""


class StackTraceMobileCrashStackTraceFrame(sgqlc.types.Type):
    """An object representing a stack trace segment"""

    __schema__ = nerdgraph
    __field_names__ = ("filepath", "formatted", "line", "name")
    filepath = sgqlc.types.Field(String, graphql_name="filepath")
    """Frame filepath"""

    formatted = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="formatted"
    )
    """Formatted frame"""

    line = sgqlc.types.Field(Int, graphql_name="line")
    """Frame line number"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Frame name"""


class StackTraceMobileException(sgqlc.types.Type):
    """A structured representation of a handled exception occurring in a
    mobile application.
    """

    __schema__ = nerdgraph
    __field_names__ = ("stack_trace",)
    stack_trace = sgqlc.types.Field(
        "StackTraceMobileExceptionStackTrace", graphql_name="stackTrace"
    )
    """A structured representation of a handled exception in a mobile
    application.
    """


class StackTraceMobileExceptionStackTrace(sgqlc.types.Type):
    """A structured representation of a handled exception in a mobile
    application.
    """

    __schema__ = nerdgraph
    __field_names__ = ("frames",)
    frames = sgqlc.types.Field(
        sgqlc.types.list_of("StackTraceMobileExceptionStackTraceFrame"),
        graphql_name="frames",
    )
    """Stack trace frames."""


class StackTraceMobileExceptionStackTraceFrame(sgqlc.types.Type):
    """An object representing a stack trace segment"""

    __schema__ = nerdgraph
    __field_names__ = ("filepath", "formatted", "line", "name")
    filepath = sgqlc.types.Field(String, graphql_name="filepath")
    """Frame filepath"""

    formatted = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="formatted"
    )
    """Formatted frame"""

    line = sgqlc.types.Field(Int, graphql_name="line")
    """Frame line number"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """Frame name"""


class SuggestedNrqlQuery(sgqlc.types.Interface):
    """Interface type representing a query suggestion."""

    __schema__ = nerdgraph
    __field_names__ = ("nrql", "title")
    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")
    """The NRQL string to run for the suggested query"""

    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="title")
    """A human-readable title describing what the query shows"""


class SuggestedNrqlQueryAnomaly(sgqlc.types.Type):
    """Information about the anomaly upon which this analysis was based."""

    __schema__ = nerdgraph
    __field_names__ = ("time_window",)
    time_window = sgqlc.types.Field(
        sgqlc.types.non_null("TimeWindow"), graphql_name="timeWindow"
    )
    """The approximate time window of the anomalous region"""


class SuggestedNrqlQueryResponse(sgqlc.types.Type):
    """A result type encapsulating suggested queries"""

    __schema__ = nerdgraph
    __field_names__ = ("suggestions",)
    suggestions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(SuggestedNrqlQuery)),
        graphql_name="suggestions",
    )
    """List of suggested queries."""


class SyntheticMonitorSummaryData(sgqlc.types.Type):
    """Summary statistics for the Synthetic Monitor."""

    __schema__ = nerdgraph
    __field_names__ = (
        "locations_failing",
        "locations_running",
        "status",
        "success_rate",
    )
    locations_failing = sgqlc.types.Field(Int, graphql_name="locationsFailing")
    """The number of locations that are currently failing."""

    locations_running = sgqlc.types.Field(Int, graphql_name="locationsRunning")
    """The number of locations that are currently running."""

    status = sgqlc.types.Field(SyntheticMonitorStatus, graphql_name="status")

    success_rate = sgqlc.types.Field(Float, graphql_name="successRate")
    """The percentage of successful synthetic monitor checks in the last
    24 hours.
    """


class SyntheticsAccountStitchedFields(sgqlc.types.Type):
    """Nerdgraph account field"""

    __schema__ = nerdgraph
    __field_names__ = ("script", "steps")
    script = sgqlc.types.Field(
        "SyntheticsMonitorScriptQueryResponse",
        graphql_name="script",
        args=sgqlc.types.ArgDict(
            (
                (
                    "monitor_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="monitorGuid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Query that fetches the script of a specific scripted monitor

    Arguments:

    * `monitor_guid` (`EntityGuid!`): Unique identifier for monitor
      that that runs the script to be fetched
    """

    steps = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("SyntheticsStep")),
        graphql_name="steps",
        args=sgqlc.types.ArgDict(
            (
                (
                    "monitor_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="monitorGuid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """visiblity(flag:Synthetics/setGraphqlCustomerVisible) Query that
    fetches the steps used by the specified Step Monitor

    Arguments:

    * `monitor_guid` (`EntityGuid!`): Unique identifier for monitor
      that holds the script steps that are to be fetched
    """


class SyntheticsBrokenLinksMonitor(sgqlc.types.Type):
    """A Broken Links monitor resulting from a Broken Links monitor
    mutation
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "status",
        "uri",
    )
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """The creation time of the monitor in millis"""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """The unique client identifier for the Synthetics Monitor in New
    Relic
    """

    id = sgqlc.types.Field(ID, graphql_name="id")
    """The unique identifier of the monitor within the Synthetics domain"""

    locations = sgqlc.types.Field("SyntheticsLocations", graphql_name="locations")
    """The locations the monitor runs from"""

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")
    """The last modification time of the monitor in millis"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""

    uri = sgqlc.types.Field(String, graphql_name="uri")
    """The uri the monitor runs against"""


class SyntheticsBrokenLinksMonitorCreateMutationResult(sgqlc.types.Type):
    """The result of a Broken Links monitor create mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of("SyntheticsMonitorCreateError")),
        graphql_name="errors",
    )
    """Errors that occurred during Broken Links monitor create mutation"""

    monitor = sgqlc.types.Field(SyntheticsBrokenLinksMonitor, graphql_name="monitor")
    """The resulting Broken Links monitor"""


class SyntheticsBrokenLinksMonitorUpdateMutationResult(sgqlc.types.Type):
    """The result of a Broken Links monitor update mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of("SyntheticsMonitorUpdateError")),
        graphql_name="errors",
    )
    """Errors that occurred during Broken Links monitor update mutation"""

    monitor = sgqlc.types.Field(SyntheticsBrokenLinksMonitor, graphql_name="monitor")
    """The resulting Broken Links monitor"""


class SyntheticsCertCheckMonitor(sgqlc.types.Type):
    """A Cert Check monitor resulting from a Cert Check monitor mutation"""

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "domain",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "number_days_to_fail_before_cert_expires",
        "period",
        "status",
    )
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """The creation time of the monitor in millis"""

    domain = sgqlc.types.Field(String, graphql_name="domain")
    """The domain of the host that will have its certificate checked"""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """The unique client identifier for the Synthetics Monitor in New
    Relic
    """

    id = sgqlc.types.Field(ID, graphql_name="id")
    """The unique identifier of the monitor within the Synthetics domain"""

    locations = sgqlc.types.Field("SyntheticsLocations", graphql_name="locations")
    """The locations the monitor runs from"""

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")
    """The last modification time of the monitor in millis"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    number_days_to_fail_before_cert_expires = sgqlc.types.Field(
        Int, graphql_name="numberDaysToFailBeforeCertExpires"
    )
    """The desired number of remaining days until the certificate expires
    to trigger a monitor failure
    """

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""


class SyntheticsCertCheckMonitorCreateMutationResult(sgqlc.types.Type):
    """The result of a Cert Check monitor create mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of("SyntheticsMonitorCreateError")),
        graphql_name="errors",
    )
    """Errors that occurred during Cert Check monitor create mutation"""

    monitor = sgqlc.types.Field(SyntheticsCertCheckMonitor, graphql_name="monitor")
    """The resulting Cert Check monitor"""


class SyntheticsCertCheckMonitorUpdateMutationResult(sgqlc.types.Type):
    """The result of a Cert Check monitor update mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of("SyntheticsMonitorUpdateError")),
        graphql_name="errors",
    )
    """Errors that occurred during Cert Check monitor update mutation"""

    monitor = sgqlc.types.Field(SyntheticsCertCheckMonitor, graphql_name="monitor")
    """The resulting Cert Check monitor"""


class SyntheticsCustomHeader(sgqlc.types.Type):
    """Custom header for monitor jobs"""

    __schema__ = nerdgraph
    __field_names__ = ("name", "value")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """Header name"""

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")
    """Header value"""


class SyntheticsError(sgqlc.types.Type):
    """Error object for Synthetics mutations"""

    __schema__ = nerdgraph
    __field_names__ = ("description",)
    description = sgqlc.types.Field(String, graphql_name="description")
    """Description explaining the cause of the error"""


class SyntheticsLocations(sgqlc.types.Type):
    """The location(s) from which the monitor runs"""

    __schema__ = nerdgraph
    __field_names__ = ("private", "public")
    private = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="private")
    """Existing private location(s) in which the monitor will run"""

    public = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="public")
    """Publicly available location(s) in which the monitor will run"""


class SyntheticsMonitorCreateError(sgqlc.types.Type):
    """Error object for Synthetics monitor creation request"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """String description of error"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorCreateErrorType), graphql_name="type"
    )
    """Enum of error that was returned during monitor creation"""


class SyntheticsMonitorDeleteMutationResult(sgqlc.types.Type):
    """The result of a monitor delete mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("deleted_guid",)
    deleted_guid = sgqlc.types.Field(EntityGuid, graphql_name="deletedGuid")
    """The unique identifier of the deleted monitor"""


class SyntheticsMonitorScriptQueryResponse(sgqlc.types.Type):
    """The script that a monitor runs"""

    __schema__ = nerdgraph
    __field_names__ = ("text",)
    text = sgqlc.types.Field(String, graphql_name="text")
    """The script associated with the specified monitor"""


class SyntheticsMonitorUpdateError(sgqlc.types.Type):
    """Error object for Synthetics monitor update request"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """String description of error"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorUpdateErrorType), graphql_name="type"
    )
    """Enum of error that was returned during monitor update"""


class SyntheticsPrivateLocationDeleteResult(sgqlc.types.Type):
    """An array containing errors from the deletion of a private
    location, if any
    """

    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("SyntheticsPrivateLocationMutationError"),
        graphql_name="errors",
    )
    """An array container errors resulting from the mutation, if any"""


class SyntheticsPrivateLocationMutationError(sgqlc.types.Type):
    """Error object for Synthetic Private Location mutation request"""

    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )
    """String description of error"""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsPrivateLocationMutationErrorType),
        graphql_name="type",
    )
    """Enum type of error response"""


class SyntheticsPrivateLocationMutationResult(sgqlc.types.Type):
    """Result of a private location mutation"""

    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "description",
        "domain_id",
        "errors",
        "guid",
        "key",
        "location_id",
        "name",
        "verified_script_execution",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The account associated to the private location"""

    description = sgqlc.types.Field(String, graphql_name="description")
    """A description of the private location"""

    domain_id = sgqlc.types.Field(String, graphql_name="domainId")
    """The private location globally unique identifier"""

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsPrivateLocationMutationError),
        graphql_name="errors",
    )
    """An array container errors resulting from the mutation, if any"""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """The unique client identifier for the Synthetics private location
    in New Relic
    """

    key = sgqlc.types.Field(String, graphql_name="key")
    """The private locations key"""

    location_id = sgqlc.types.Field(String, graphql_name="locationId")
    """An alternate identifier based on name"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the private location"""

    verified_script_execution = sgqlc.types.Field(
        Boolean, graphql_name="verifiedScriptExecution"
    )
    """Specifies whether the private location requires a password for
    scripted monitors
    """


class SyntheticsPrivateLocationPurgeQueueResult(sgqlc.types.Type):
    """Result of a Synthetics purge private location queue mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsPrivateLocationMutationError),
        graphql_name="errors",
    )
    """An array containing errors resulting from the mutation, if any"""


class SyntheticsRuntime(sgqlc.types.Type):
    """The runtime that a monitor runs"""

    __schema__ = nerdgraph
    __field_names__ = ("runtime_type", "runtime_type_version", "script_language")
    runtime_type = sgqlc.types.Field(String, graphql_name="runtimeType")
    """The runtime type that the monitor will run"""

    runtime_type_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="runtimeTypeVersion"
    )
    """The specific version of the runtime type selected"""

    script_language = sgqlc.types.Field(String, graphql_name="scriptLanguage")
    """The programing language that should execute the script"""


class SyntheticsScriptApiMonitor(sgqlc.types.Type):
    """A Script Api monitor resulting from a Script Api mutation"""

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "runtime",
        "status",
    )
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """The creation time of the monitor in millis"""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """The unique client identifier for the Synthetics Monitor in New
    Relic
    """

    id = sgqlc.types.Field(ID, graphql_name="id")
    """The unique identifier of the monitor within the Synthetics domain"""

    locations = sgqlc.types.Field(SyntheticsLocations, graphql_name="locations")
    """The locations the monitor runs from"""

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")
    """The last modification time of the monitor in millis"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    runtime = sgqlc.types.Field(SyntheticsRuntime, graphql_name="runtime")
    """The runtime that the monitor will use to run jobs"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""


class SyntheticsScriptApiMonitorCreateMutationResult(sgqlc.types.Type):
    """The result of a Script Api monitor create mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorCreateError)),
        graphql_name="errors",
    )
    """Errors that occurred during Script Api monitor create mutation"""

    monitor = sgqlc.types.Field(SyntheticsScriptApiMonitor, graphql_name="monitor")
    """The resulting Script Api monitor"""


class SyntheticsScriptApiMonitorUpdateMutationResult(sgqlc.types.Type):
    """The result of a Script Api monitor update mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorUpdateError)),
        graphql_name="errors",
    )
    """Errors that occurred during Script Api monitor update mutation"""

    monitor = sgqlc.types.Field(SyntheticsScriptApiMonitor, graphql_name="monitor")
    """The resulting Script Api monitor"""


class SyntheticsScriptBrowserMonitor(sgqlc.types.Type):
    """A Script Browser monitor resulting from a Script Browser mutation"""

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "created_at",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "runtime",
        "status",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsScriptBrowserMonitorAdvancedOptions", graphql_name="advancedOptions"
    )
    """The monitor advanced options"""

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """The creation time of the monitor in millis"""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """The unique client identifier for the Synthetics Monitor in New
    Relic
    """

    id = sgqlc.types.Field(ID, graphql_name="id")
    """The unique identifier of the monitor within the Synthetics domain"""

    locations = sgqlc.types.Field(SyntheticsLocations, graphql_name="locations")
    """The locations the monitor runs from"""

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")
    """The last modification time of the monitor in millis"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    runtime = sgqlc.types.Field(SyntheticsRuntime, graphql_name="runtime")
    """The runtime that the monitor will use to run jobs"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""


class SyntheticsScriptBrowserMonitorAdvancedOptions(sgqlc.types.Type):
    """The advanced options available for a Script Browser monitor"""

    __schema__ = nerdgraph
    __field_names__ = ("enable_screenshot_on_failure_and_script",)
    enable_screenshot_on_failure_and_script = sgqlc.types.Field(
        Boolean, graphql_name="enableScreenshotOnFailureAndScript"
    )
    """Capture a screenshot during job execution"""


class SyntheticsScriptBrowserMonitorCreateMutationResult(sgqlc.types.Type):
    """The result of a Script Browser monitor create mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorCreateError)),
        graphql_name="errors",
    )
    """Errors that occurred during Script Browser monitor create mutation"""

    monitor = sgqlc.types.Field(SyntheticsScriptBrowserMonitor, graphql_name="monitor")
    """The resulting script browser monitor"""


class SyntheticsScriptBrowserMonitorUpdateMutationResult(sgqlc.types.Type):
    """The result of a Script Browser monitor update mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorUpdateError)),
        graphql_name="errors",
    )
    """Errors that occurred during Script Browser monitor update mutation"""

    monitor = sgqlc.types.Field(SyntheticsScriptBrowserMonitor, graphql_name="monitor")
    """The resulting script browser monitor"""


class SyntheticsSecureCredentialMutationResult(sgqlc.types.Type):
    """The result of a secure credential mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("created_at", "description", "errors", "key", "last_update")
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """The moment when the secure credential was created, represented in
    milliseconds since the Unix epoch.
    """

    description = sgqlc.types.Field(String, graphql_name="description")
    """Description of the secure credential, if available"""

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsError), graphql_name="errors"
    )
    """An array containing errors, if any"""

    key = sgqlc.types.Field(String, graphql_name="key")
    """The unique identifier of the secure credential, if available"""

    last_update = sgqlc.types.Field(EpochMilliseconds, graphql_name="lastUpdate")
    """The moment when the secure credential was last updated,
    represented in milliseconds since the Unix epoch.
    """


class SyntheticsSimpleBrowserMonitor(sgqlc.types.Type):
    """A Simple Browser monitor resulting from a Simple Browser monitor
    mutation
    """

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "created_at",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "runtime",
        "status",
        "uri",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsSimpleBrowserMonitorAdvancedOptions", graphql_name="advancedOptions"
    )
    """The monitor advanced options"""

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """The creation time of the monitor in millis"""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """The unique client identifier for the Synthetics Monitor in New
    Relic
    """

    id = sgqlc.types.Field(ID, graphql_name="id")
    """The unique identifier of the monitor within the Synthetics domain"""

    locations = sgqlc.types.Field(SyntheticsLocations, graphql_name="locations")
    """The locations the monitor runs from"""

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")
    """The last modification time of the monitor in millis"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    runtime = sgqlc.types.Field(SyntheticsRuntime, graphql_name="runtime")
    """The runtime that the monitor will use to run jobs"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""

    uri = sgqlc.types.Field(String, graphql_name="uri")
    """The uri the monitor runs against"""


class SyntheticsSimpleBrowserMonitorAdvancedOptions(sgqlc.types.Type):
    """The advanced options available for a Simple Browser monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "custom_headers",
        "enable_screenshot_on_failure_and_script",
        "response_validation_text",
        "use_tls_validation",
    )
    custom_headers = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsCustomHeader), graphql_name="customHeaders"
    )
    """Custom headers to use in monitor job"""

    enable_screenshot_on_failure_and_script = sgqlc.types.Field(
        Boolean, graphql_name="enableScreenshotOnFailureAndScript"
    )
    """Capture a screenshot during job execution"""

    response_validation_text = sgqlc.types.Field(
        String, graphql_name="responseValidationText"
    )
    """Validation text for monitor to search for at given URI"""

    use_tls_validation = sgqlc.types.Field(Boolean, graphql_name="useTlsValidation")
    """Monitor should validate SSL certificate chain"""


class SyntheticsSimpleBrowserMonitorCreateMutationResult(sgqlc.types.Type):
    """The result of a Simple Browser monitor create mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorCreateError)),
        graphql_name="errors",
    )
    """Errors that occurred during Simple Browser monitor create mutation"""

    monitor = sgqlc.types.Field(SyntheticsSimpleBrowserMonitor, graphql_name="monitor")
    """The resulting Simple Browser monitor"""


class SyntheticsSimpleBrowserMonitorUpdateMutationResult(sgqlc.types.Type):
    """The result of a Simple Browser monitor update mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorUpdateError)),
        graphql_name="errors",
    )
    """Errors that occurred during Simple Browser monitor update mutation"""

    monitor = sgqlc.types.Field(SyntheticsSimpleBrowserMonitor, graphql_name="monitor")
    """The resulting Simple Browser monitor"""


class SyntheticsSimpleMonitor(sgqlc.types.Type):
    """A Simple (ping) monitor resulting from a Simple monitor mutation"""

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "created_at",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "status",
        "uri",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsSimpleMonitorAdvancedOptions", graphql_name="advancedOptions"
    )
    """The monitor advanced options"""

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """The creation time of the monitor in millis"""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """The unique client identifier for the Synthetics Monitor in New
    Relic
    """

    id = sgqlc.types.Field(ID, graphql_name="id")
    """The unique identifier of the monitor within the Synthetics domain"""

    locations = sgqlc.types.Field(SyntheticsLocations, graphql_name="locations")
    """The locations the monitor runs from"""

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")
    """The last modification time of the monitor in millis"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""

    uri = sgqlc.types.Field(String, graphql_name="uri")
    """The uri the monitor runs against"""


class SyntheticsSimpleMonitorAdvancedOptions(sgqlc.types.Type):
    """The advanced options available for a Simple (ping) monitor"""

    __schema__ = nerdgraph
    __field_names__ = (
        "custom_headers",
        "redirect_is_failure",
        "response_validation_text",
        "should_bypass_head_request",
        "use_tls_validation",
    )
    custom_headers = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsCustomHeader), graphql_name="customHeaders"
    )
    """Custom headers to use in monitor job"""

    redirect_is_failure = sgqlc.types.Field(Boolean, graphql_name="redirectIsFailure")
    """Categorize redirects during a monitor job as a failure"""

    response_validation_text = sgqlc.types.Field(
        String, graphql_name="responseValidationText"
    )
    """Validation text for monitor to search for at given URI"""

    should_bypass_head_request = sgqlc.types.Field(
        Boolean, graphql_name="shouldBypassHeadRequest"
    )
    """Monitor should skip default HEAD request and instead use GET verb
    in check
    """

    use_tls_validation = sgqlc.types.Field(Boolean, graphql_name="useTlsValidation")
    """Monitor should validate SSL certificate chain"""


class SyntheticsSimpleMonitorUpdateMutationResult(sgqlc.types.Type):
    """The result of a Simple (ping) monitor update mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorUpdateError)),
        graphql_name="errors",
    )
    """Errors that occurred during Simple (ping) monitor update mutation"""

    monitor = sgqlc.types.Field(SyntheticsSimpleMonitor, graphql_name="monitor")
    """The resulting Simple (ping) monitor"""


class SyntheticsStep(sgqlc.types.Type):
    """A step that will be added to the monitor script"""

    __schema__ = nerdgraph
    __field_names__ = ("ordinal", "type", "values")
    ordinal = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="ordinal")
    """The position of the step within the script ranging from 1-100."""

    type = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsStepType), graphql_name="type"
    )
    """The type of step to be added to the script"""

    values = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="values"
    )
    """The metadata values related to the step"""


class SyntheticsStepMonitor(sgqlc.types.Type):
    """A Step monitor resulting from a Step monitor mutation"""

    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "created_at",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "status",
        "steps",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsStepMonitorAdvancedOptions", graphql_name="advancedOptions"
    )
    """The monitor advanced options"""

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """The creation time of the monitor in millis"""

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """The unique client identifier for the Synthetics Monitor in New
    Relic
    """

    id = sgqlc.types.Field(ID, graphql_name="id")
    """The unique identifier of the monitor within the Synthetics domain"""

    locations = sgqlc.types.Field(SyntheticsLocations, graphql_name="locations")
    """The locations the monitor runs from"""

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")
    """The last modification time of the monitor in millis"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The human readable identifier for the monitor"""

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")
    """The interval at which the monitor runs in minutes"""

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")
    """The run state of the monitor"""

    steps = sgqlc.types.Field(sgqlc.types.list_of(SyntheticsStep), graphql_name="steps")
    """The steps that make up the script the monitor will run"""


class SyntheticsStepMonitorAdvancedOptions(sgqlc.types.Type):
    """The advanced options available for a Step monitor"""

    __schema__ = nerdgraph
    __field_names__ = ("enable_screenshot_on_failure_and_script",)
    enable_screenshot_on_failure_and_script = sgqlc.types.Field(
        Boolean, graphql_name="enableScreenshotOnFailureAndScript"
    )
    """Capture a screenshot during job execution"""


class SyntheticsStepMonitorCreateMutationResult(sgqlc.types.Type):
    """The result of a Step monitor create mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorCreateError)),
        graphql_name="errors",
    )
    """Errors that occurred during Step monitor create mutation"""

    monitor = sgqlc.types.Field(SyntheticsStepMonitor, graphql_name="monitor")
    """The resulting Step monitor"""


class SyntheticsStepMonitorUpdateMutationResult(sgqlc.types.Type):
    """The result of a Step monitor update mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorUpdateError)),
        graphql_name="errors",
    )
    """Errors that occurred during Step monitor update mutation"""

    monitor = sgqlc.types.Field(SyntheticsStepMonitor, graphql_name="monitor")
    """The resulting Step monitor"""


class SyntheticsSyntheticMonitorAsset(sgqlc.types.Type):
    """Asset produced during the execution of the check"""

    __schema__ = nerdgraph
    __field_names__ = ("type", "url")
    type = sgqlc.types.Field(String, graphql_name="type")
    """MIME type of asset"""

    url = sgqlc.types.Field(String, graphql_name="url")
    """Temporary url at which the asset is available for download"""


class TaggingMutationError(sgqlc.types.Type):
    """An error object for tag mutations."""

    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")
    """A message explaining what the errors is about."""

    type = sgqlc.types.Field(TaggingMutationErrorType, graphql_name="type")
    """The type of error."""


class TaggingMutationResult(sgqlc.types.Type):
    """The result of a tag mutation"""

    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(TaggingMutationError), graphql_name="errors"
    )
    """An array containing errors, if any. These are expected errors
    listed in TagMutationErrorType which a request should be capable
    of handling appropriately.
    """


class TimeWindow(sgqlc.types.Type):
    """Represents a time window."""

    __schema__ = nerdgraph
    __field_names__ = ("end_time", "start_time")
    end_time = sgqlc.types.Field(EpochMilliseconds, graphql_name="endTime")
    """The end time of the time window the number of milliseconds since
    the Unix epoch.
    """

    start_time = sgqlc.types.Field(EpochMilliseconds, graphql_name="startTime")
    """The start time of the time window the number of milliseconds since
    the Unix epoch.
    """


class TimeZoneInfo(sgqlc.types.Type):
    """Information about a Time Zone"""

    __schema__ = nerdgraph
    __field_names__ = ("name", "offset")
    name = sgqlc.types.Field(String, graphql_name="name")
    """The name of the Time Zone"""

    offset = sgqlc.types.Field(Seconds, graphql_name="offset")
    """The offset in seconds from UTC"""


class User(sgqlc.types.Type):
    """The `User` object provides general data about the user."""

    __schema__ = nerdgraph
    __field_names__ = ("email", "id", "name")
    email = sgqlc.types.Field(String, graphql_name="email")

    id = sgqlc.types.Field(Int, graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")


class UserManagementAddUsersToGroupsPayload(sgqlc.types.Type):
    """Autogenerated return type of AddUsersToGroups"""

    __schema__ = nerdgraph
    __field_names__ = ("groups",)
    groups = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("UserManagementGroup")),
        graphql_name="groups",
    )
    """The group(s) updated."""


class UserManagementAuthenticationDomain(sgqlc.types.Type):
    """An "authentication domain" is a grouping of New Relic users
    governed by the same user management settings, like how they're
    provisioned (added and updated), how they're authenticated (logged
    in), session settings, and how user upgrades are managed.
    """

    __schema__ = nerdgraph
    __field_names__ = ("groups", "id", "name", "provisioning_type", "users")
    groups = sgqlc.types.Field(
        "UserManagementGroups",
        graphql_name="groups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """container for groups enabling cursor based pagination

    Arguments:

    * `cursor` (`String`): the cursor from the previous request, to
      get   the next page
    * `id` (`[ID!]`): an optional list of ids to filter by
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """a value that uniquely identifies this object"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """the name of the object"""

    provisioning_type = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="provisioningType"
    )
    """the method used to provision users in this authentication domain"""

    users = sgqlc.types.Field(
        "UserManagementUsers",
        graphql_name="users",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """container for users enabling cursor based pagination

    Arguments:

    * `cursor` (`String`): the cursor from the previous request, to
      get   the next page
    * `id` (`[ID!]`): an optional list of ids to filter by
    """


class UserManagementAuthenticationDomains(sgqlc.types.Type):
    """container for authentication domains enabling cursor based
    pagination
    """

    __schema__ = nerdgraph
    __field_names__ = ("authentication_domains", "next_cursor", "total_count")
    authentication_domains = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(UserManagementAuthenticationDomain)
            )
        ),
        graphql_name="authenticationDomains",
    )
    """container for authentication_domains enabling cursor based
    pagination
    """

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """an opaque cursor to supply with subsequent   requests to get the
    next page of results, null if there are no more pages
    """

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """the total number of results"""


class UserManagementCreateGroupPayload(sgqlc.types.Type):
    """Autogenerated return type of CreateGroup"""

    __schema__ = nerdgraph
    __field_names__ = ("group",)
    group = sgqlc.types.Field("UserManagementGroup", graphql_name="group")
    """The group that was created"""


class UserManagementDeleteGroupPayload(sgqlc.types.Type):
    """Autogenerated return type of DeleteGroup"""

    __schema__ = nerdgraph
    __field_names__ = ("group",)
    group = sgqlc.types.Field("UserManagementGroup", graphql_name="group")
    """The group that was deleted"""


class UserManagementGroup(sgqlc.types.Type):
    """For users on our New Relic One user model, a "group" represents a
    group of users. Putting users in a group allows the managing of
    permissions for multiple users at the same time.
    """

    __schema__ = nerdgraph
    __field_names__ = ("display_name", "id", "users")
    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )
    """the name of the object"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """a value that uniquely identifies this object"""

    users = sgqlc.types.Field(
        "UserManagementGroupUsers",
        graphql_name="users",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """container for users enabling cursor based pagination

    Arguments:

    * `cursor` (`String`): the cursor from the previous request, to
      get   the next page
    * `id` (`[ID!]`): an optional list of ids to filter by
    """


class UserManagementGroupUser(sgqlc.types.Type):
    """User information returned within Groups"""

    __schema__ = nerdgraph
    __field_names__ = ("email", "id", "name", "time_zone")
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="email")
    """The email of the user."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """a value that uniquely identifies this object"""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The full name of the user."""

    time_zone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="timeZone")
    """The configured time zone of the user."""


class UserManagementGroupUsers(sgqlc.types.Type):
    """container for users enabling cursor based pagination"""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "total_count", "users")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """an opaque cursor to supply with subsequent   requests to get the
    next page of results, null if there are no more pages
    """

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """the total number of results"""

    users = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(UserManagementGroupUser))
        ),
        graphql_name="users",
    )
    """container for users enabling cursor based pagination"""


class UserManagementGroups(sgqlc.types.Type):
    """container for groups enabling cursor based pagination"""

    __schema__ = nerdgraph
    __field_names__ = ("groups", "next_cursor", "total_count")
    groups = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(UserManagementGroup))
        ),
        graphql_name="groups",
    )
    """container for groups enabling cursor based pagination"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """an opaque cursor to supply with subsequent   requests to get the
    next page of results, null if there are no more pages
    """

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """the total number of results"""


class UserManagementOrganizationStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("authentication_domains",)
    authentication_domains = sgqlc.types.Field(
        UserManagementAuthenticationDomains,
        graphql_name="authenticationDomains",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """An "authentication domain" is a grouping of New Relic users
    governed by the same user management settings, like how they're
    provisioned (added and updated), how they're authenticated (logged
    in), session settings, and how user upgrades are managed.

    Arguments:

    * `cursor` (`String`): the cursor from the previous request, to
      get   the next page
    * `id` (`[ID!]`): a list of ids to filter returned objects by
    """


class UserManagementRemoveUsersFromGroupsPayload(sgqlc.types.Type):
    """Autogenerated return type of RemoveUsersFromGroups"""

    __schema__ = nerdgraph
    __field_names__ = ("groups",)
    groups = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(UserManagementGroup)),
        graphql_name="groups",
    )
    """The group(s) updated."""


class UserManagementUpdateGroupPayload(sgqlc.types.Type):
    """Autogenerated return type of UpdateGroup"""

    __schema__ = nerdgraph
    __field_names__ = ("group",)
    group = sgqlc.types.Field(UserManagementGroup, graphql_name="group")
    """The group that was updated"""


class UserManagementUser(sgqlc.types.Type):
    """A user of New Relic scoped to an authentication domain."""

    __schema__ = nerdgraph
    __field_names__ = ("email", "groups", "id", "name", "time_zone")
    email = sgqlc.types.Field(String, graphql_name="email")
    """Email address of the user."""

    groups = sgqlc.types.Field(
        "UserManagementUserGroups",
        graphql_name="groups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """container for groups enabling cursor based pagination

    Arguments:

    * `cursor` (`String`): the cursor from the previous request, to
      get   the next page
    * `id` (`[ID!]`): an optional list of ids to filter by
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """a value that uniquely identifies this object"""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The full name of the user."""

    time_zone = sgqlc.types.Field(String, graphql_name="timeZone")
    """Time zone of the user in IANA Time Zone database format, also
    known as the "Olson" time zone database format (for exmaple,
    "America/Los_Angeles").
    """


class UserManagementUserGroup(sgqlc.types.Type):
    """For users on our New Relic One user model, a "group" represents a
    group of users. Putting users in a group allows the managing of
    permissions for multiple users at the same time.
    """

    __schema__ = nerdgraph
    __field_names__ = ("display_name", "id")
    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )
    """the name of the object"""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """a value that uniquely identifies this object"""


class UserManagementUserGroups(sgqlc.types.Type):
    """container for groups enabling cursor based pagination"""

    __schema__ = nerdgraph
    __field_names__ = ("groups", "next_cursor", "total_count")
    groups = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(UserManagementUserGroup))
        ),
        graphql_name="groups",
    )
    """container for groups enabling cursor based pagination"""

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """an opaque cursor to supply with subsequent   requests to get the
    next page of results, null if there are no more pages
    """

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """the total number of results"""


class UserManagementUsers(sgqlc.types.Type):
    """container for users enabling cursor based pagination"""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "total_count", "users")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """an opaque cursor to supply with subsequent   requests to get the
    next page of results, null if there are no more pages
    """

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """the total number of results"""

    users = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(UserManagementUser))
        ),
        graphql_name="users",
    )
    """container for users enabling cursor based pagination"""


class UserReference(sgqlc.types.Type):
    """The `UserReference` object provides basic identifying information
    about the user.
    """

    __schema__ = nerdgraph
    __field_names__ = ("email", "gravatar", "id", "name")
    email = sgqlc.types.Field(String, graphql_name="email")

    gravatar = sgqlc.types.Field(String, graphql_name="gravatar")

    id = sgqlc.types.Field(Int, graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")


class UsersActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("user_search",)
    user_search = sgqlc.types.Field(
        "UsersUserSearchResult",
        graphql_name="userSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        UsersUserSearchQuery, graphql_name="query", default=None
                    ),
                ),
            )
        ),
    )
    """Search for users using a custom query.  If no query is provided,
    returns all visible users.  NOTE: this API only supports users in
    the New Relic One user model.

    Arguments:

    * `cursor` (`String`): The cursor to fetch paginated user search
      results.
    * `query` (`UsersUserSearchQuery`): The user search query takes 1
      argument `scope` that takes in various arguments.   `userIds` is
      only an exact match while the rest of the arguments can search
      for an exact or fuzzy match.
    """


class UsersUserSearch(sgqlc.types.Type):
    """User information returned for UserSearch"""

    __schema__ = nerdgraph
    __field_names__ = ("email", "name", "user_id")
    email = sgqlc.types.Field(String, graphql_name="email")
    """The email of the user."""

    name = sgqlc.types.Field(String, graphql_name="name")
    """The full name of the user."""

    user_id = sgqlc.types.Field(ID, graphql_name="userId")
    """The unique identifier of the user."""


class UsersUserSearchResult(sgqlc.types.Type):
    """The result object for UserSearch."""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "total_count", "users")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """The cursor for the next page."""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """The total number of users found.  Note: Not necessarily the same
    as number of users returned, due to pagination.
    """

    users = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(UsersUserSearch))
        ),
        graphql_name="users",
    )
    """Set of all users returned from the query."""


class WhatsNewContent(sgqlc.types.Interface):
    """Represents the details in common between all types of news."""

    __schema__ = nerdgraph
    __field_names__ = (
        "content_type",
        "context",
        "id",
        "publish_date",
        "summary",
        "title",
    )
    content_type = sgqlc.types.Field(
        sgqlc.types.non_null(WhatsNewContentType), graphql_name="contentType"
    )
    """The type of the news."""

    context = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="context"
    )
    """Contains information about the context of the news."""

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The ID of the news."""

    publish_date = sgqlc.types.Field(EpochMilliseconds, graphql_name="publishDate")
    """The date the news was published."""

    summary = sgqlc.types.Field(String, graphql_name="summary")
    """The summary of the news."""

    title = sgqlc.types.Field(String, graphql_name="title")
    """The title of the news."""


class WhatsNewDocsStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("announcement", "news_search")
    announcement = sgqlc.types.Field(
        "WhatsNewAnnouncementContent",
        graphql_name="announcement",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Fetches an announcement by ID.

    Arguments:

    * `id` (`ID!`): The ID of the announcement.
    """

    news_search = sgqlc.types.Field(
        "WhatsNewSearchResult",
        graphql_name="newsSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        WhatsNewContentSearchQuery, graphql_name="query", default=None
                    ),
                ),
            )
        ),
    )
    """Provides a paginated search to fetch news.

    Arguments:

    * `cursor` (`String`): A cursor.
    * `query` (`WhatsNewContentSearchQuery`): A criteria for searching
      news.
    """


class WhatsNewSearchResult(sgqlc.types.Type):
    """Represents the resulting details from a search of news."""

    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")
    """The next cursor, used for pagination. If a cursor is present, it
    means more content can be fetched.
    """

    results = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WhatsNewContent)),
        graphql_name="results",
    )
    """A list of news."""

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )
    """The total amount of news available that satisfies the search
    criteria.
    """


class WorkloadAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "collection",
        "collections",
        "status_breakdown_preview",
        "valid_accounts",
    )
    collection = sgqlc.types.Field(
        "WorkloadCollection",
        graphql_name="collection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """[DEPRECATED] Retrieves a workload.

    Arguments:

    * `guid` (`EntityGuid!`): The GUID of the workload.
    """

    collections = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadCollectionWithoutStatus")),
        graphql_name="collections",
    )
    """[DEPRECATED] Retrieves a list of workloads."""

    status_breakdown_preview = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadWorkloadStatus"),
        graphql_name="statusBreakdownPreview",
        args=sgqlc.types.ArgDict(
            (
                (
                    "entity_search_query",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="entitySearchQuery",
                        default=None,
                    ),
                ),
                (
                    "scope_accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(WorkloadScopeAccountsInput),
                        graphql_name="scopeAccounts",
                        default=None,
                    ),
                ),
                (
                    "status_config",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(WorkloadStatusConfigInput),
                        graphql_name="statusConfig",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """[DEPRECATED] Status and breakdown preview.

    Arguments:

    * `entity_search_query` (`String!`): The entity search query that
      returns the full collection of entities.
    * `scope_accounts` (`WorkloadScopeAccountsInput!`): Accounts that
      will be used to get entities from.
    * `status_config` (`WorkloadStatusConfigInput!`): The
      configuration that defines how the status of the workload is
      calculated.
    """

    valid_accounts = sgqlc.types.Field(
        "WorkloadValidAccounts", graphql_name="validAccounts"
    )
    """[DEPRECATED] Retrieves all the accounts from the same organization
    that user has access to.
    """


class WorkloadAutomaticStatus(sgqlc.types.Type):
    """The automatic status configuration."""

    __schema__ = nerdgraph
    __field_names__ = ("enabled", "remaining_entities_rule", "rules")
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the automatic status configuration is enabled or not."""

    remaining_entities_rule = sgqlc.types.Field(
        "WorkloadRemainingEntitiesRule", graphql_name="remainingEntitiesRule"
    )
    """An additional meta-rule that can consider all entities that
    haven't been evaluated by any other rule.
    """

    rules = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("WorkloadRegularRule"))
        ),
        graphql_name="rules",
    )
    """A list of rules."""


class WorkloadCollection(sgqlc.types.Type):
    """A user defined group of entities."""

    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "created_at",
        "created_by",
        "description",
        "entities",
        "entity_search_queries",
        "entity_search_query",
        "guid",
        "id",
        "name",
        "permalink",
        "scope_accounts",
        "status",
        "status_config",
        "updated_at",
        "updated_by",
    )
    account = sgqlc.types.Field(
        sgqlc.types.non_null(AccountReference), graphql_name="account"
    )
    """The account the workload belongs to."""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """The moment when the object was created, represented in
    milliseconds since the Unix epoch.
    """

    created_by = sgqlc.types.Field(UserReference, graphql_name="createdBy")
    """The user who created the workload."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Relevant information about the workload."""

    entities = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadEntityRef")),
        graphql_name="entities",
    )
    """A list of entity GUIDs. These entities will belong to the
    collection as long as their accounts are included in the scope
    accounts of the collection.
    """

    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadEntitySearchQuery")),
        graphql_name="entitySearchQueries",
    )
    """A list of entity search queries. The resulting entities will be
    limited to the scope accounts of the collection.
    """

    entity_search_query = sgqlc.types.Field(String, graphql_name="entitySearchQuery")
    """The entity search query that returns the full collection of
    entities.
    """

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")
    """The unique entity identifier of the workload in New Relic."""

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """The unique identifier of the workload."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The workload's name."""

    permalink = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="permalink"
    )
    """The URL of the workload."""

    scope_accounts = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadScopeAccounts"), graphql_name="scopeAccounts"
    )
    """Accounts that will be used to get entities from."""

    status = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadWorkloadStatus"), graphql_name="status"
    )
    """Status of the workload."""

    status_config = sgqlc.types.Field(
        "WorkloadStatusConfig", graphql_name="statusConfig"
    )
    """The configuration that defines how the status of the workload is
    calculated.
    """

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")
    """The moment when the object was last updated, represented in
    milliseconds since the Unix epoch.
    """

    updated_by = sgqlc.types.Field(UserReference, graphql_name="updatedBy")
    """The user who last updated the workload."""


class WorkloadCollectionWithoutStatus(sgqlc.types.Type):
    """A user defined group of entities without Status"""

    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "created_at",
        "created_by",
        "description",
        "entities",
        "entity_search_queries",
        "entity_search_query",
        "guid",
        "id",
        "name",
        "permalink",
        "scope_accounts",
        "status_config",
        "updated_at",
        "updated_by",
    )
    account = sgqlc.types.Field(
        sgqlc.types.non_null(AccountReference), graphql_name="account"
    )
    """The account the workload belongs to."""

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """The moment when the object was created, represented in
    milliseconds since the Unix epoch.
    """

    created_by = sgqlc.types.Field(UserReference, graphql_name="createdBy")
    """The user who created the workload."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Relevant information about the workload."""

    entities = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadEntityRef")),
        graphql_name="entities",
    )
    """A list of entity GUIDs. These entities will belong to the
    collection as long as their accounts are included in the scope
    accounts of the collection.
    """

    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadEntitySearchQuery")),
        graphql_name="entitySearchQueries",
    )
    """A list of entity search queries. The resulting entities will be
    limited to the scope accounts of the collection.
    """

    entity_search_query = sgqlc.types.Field(String, graphql_name="entitySearchQuery")
    """The entity search query that returns the full collection of
    entities.
    """

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")
    """The unique entity identifier of the workload in New Relic."""

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """The unique identifier of the workload."""

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")
    """The workload's name."""

    permalink = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="permalink"
    )
    """The URL of the workload."""

    scope_accounts = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadScopeAccounts"), graphql_name="scopeAccounts"
    )
    """Accounts that will be used to get entities from."""

    status_config = sgqlc.types.Field(
        "WorkloadStatusConfig", graphql_name="statusConfig"
    )
    """The configuration that defines how the status of the workload is
    calculated.
    """

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")
    """The moment when the object was last updated, represented in
    milliseconds since the Unix epoch.
    """

    updated_by = sgqlc.types.Field(UserReference, graphql_name="updatedBy")
    """The user who last updated the workload."""


class WorkloadEntityRef(sgqlc.types.Type):
    """A reference to a New Relic entity."""

    __schema__ = nerdgraph
    __field_names__ = ("guid",)
    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")
    """The unique entity identifier in New Relic."""


class WorkloadEntitySearchQuery(sgqlc.types.Type):
    """An entity search query used to dynamically retrieve a group of
    entities.
    """

    __schema__ = nerdgraph
    __field_names__ = ("created_at", "created_by", "id", "query", "updated_at")
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )
    """The moment when the object was created, represented in
    milliseconds since the Unix epoch.
    """

    created_by = sgqlc.types.Field(UserReference, graphql_name="createdBy")
    """The user who created the entity search query."""

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """The unique identifier of the entity search query."""

    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")
    """The entity search query that is used to perform the search of a
    group of entities.
    """

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")
    """The moment when the object was last updated, represented in
    milliseconds since the Unix epoch.
    """


class WorkloadRegularRule(sgqlc.types.Type):
    """The definition of a rule, which consists of a group of entities
    and a rollup strategy.
    """

    __schema__ = nerdgraph
    __field_names__ = ("entities", "entity_search_queries", "id", "rollup")
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WorkloadEntityRef)),
        graphql_name="entities",
    )
    """A list of entity GUIDs. These entities will belong to the
    collection as long as their accounts are included in the scope
    accounts of the collection.
    """

    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WorkloadEntitySearchQuery)),
        graphql_name="entitySearchQueries",
    )
    """A list of entity search queries. These queries are constrained to
    the workload contents.
    """

    id = sgqlc.types.Field(Int, graphql_name="id")
    """The unique identifier of the rule."""

    rollup = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadRollup"), graphql_name="rollup"
    )
    """The rollup strategy."""


class WorkloadRemainingEntitiesRule(sgqlc.types.Type):
    """The definition of a remaining entities rule."""

    __schema__ = nerdgraph
    __field_names__ = ("rollup",)
    rollup = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadRemainingEntitiesRuleRollup"),
        graphql_name="rollup",
    )
    """The rollup strategy."""


class WorkloadRemainingEntitiesRuleRollup(sgqlc.types.Type):
    """The rollup strategy."""

    __schema__ = nerdgraph
    __field_names__ = ("group_by", "strategy", "threshold_type", "threshold_value")
    group_by = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadGroupRemainingEntitiesRuleBy),
        graphql_name="groupBy",
    )
    """The grouping to be applied to the remaining entities."""

    strategy = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadRollupStrategy), graphql_name="strategy"
    )
    """The rollup strategy that is applied to a group of entities."""

    threshold_type = sgqlc.types.Field(
        WorkloadRuleThresholdType, graphql_name="thresholdType"
    )
    """Type of threshold defined for the rule. This is an optional field
    that only applies when strategy is WORST_STATUS_WINS. Use a
    threshold to roll up the worst status only after a certain amount
    of entities are not operational.
    """

    threshold_value = sgqlc.types.Field(Int, graphql_name="thresholdValue")
    """Threshold value defined for the rule. This optional field is used
    in combination with thresholdType. If the threshold type is null,
    the threshold value will be ignored.
    """


class WorkloadRollup(sgqlc.types.Type):
    """The rollup strategy."""

    __schema__ = nerdgraph
    __field_names__ = ("strategy", "threshold_type", "threshold_value")
    strategy = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadRollupStrategy), graphql_name="strategy"
    )
    """The rollup strategy that is applied to the group of entities."""

    threshold_type = sgqlc.types.Field(
        WorkloadRuleThresholdType, graphql_name="thresholdType"
    )
    """Type of threshold defined for the rule. This is an optional field
    that only applies when strategy is WORST_STATUS_WINS. Use a
    threshold to roll up the worst status only after a certain amount
    of entities are not operational.
    """

    threshold_value = sgqlc.types.Field(Int, graphql_name="thresholdValue")
    """Threshold value defined for the rule. This optional field is used
    in combination with thresholdType. If the threshold type is null,
    the threshold value will be ignored.
    """


class WorkloadRollupRuleDetails(sgqlc.types.Type):
    """Represents the details of a rollup rule."""

    __schema__ = nerdgraph
    __field_names__ = (
        "entity_search_queries",
        "has_individual_entities",
        "not_operational_entities",
        "operational_entities",
        "resulting_group_type",
        "threshold_type",
        "unknown_status_entities",
    )
    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="entitySearchQueries",
    )
    """A list of entity search queries defined in the rule."""

    has_individual_entities = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="hasIndividualEntities"
    )
    """Indicates if the rule has individual entities."""

    not_operational_entities = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="notOperationalEntities"
    )
    """The amount of not operational entities after evaluating the rule."""

    operational_entities = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="operationalEntities"
    )
    """The amount of operational entities after evaluating the rule."""

    resulting_group_type = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadResultingGroupType),
        graphql_name="resultingGroupType",
    )
    """The resulting type of the rollup rule."""

    threshold_type = sgqlc.types.Field(
        WorkloadRuleThresholdType, graphql_name="thresholdType"
    )
    """Type of threshold defined for the rule."""

    unknown_status_entities = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="unknownStatusEntities"
    )
    """The amount of entities the status of which is unknown."""


class WorkloadScopeAccounts(sgqlc.types.Type):
    """Accounts that will be used to get entities from."""

    __schema__ = nerdgraph
    __field_names__ = ("account_ids",)
    account_ids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Int))),
        graphql_name="accountIds",
    )
    """A list of accounts that will be used to get entities from."""


class WorkloadStaticStatus(sgqlc.types.Type):
    """The static status configuration."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "enabled", "id", "status", "summary")
    description = sgqlc.types.Field(String, graphql_name="description")
    """A description that provides additional details about the status of
    the workload.
    """

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")
    """Whether the static status configuration is enabled or not. Note
    that only one static status can be enabled at a given time.
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")
    """The unique identifier of the static status."""

    status = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusValue), graphql_name="status"
    )
    """The status of the workload."""

    summary = sgqlc.types.Field(String, graphql_name="summary")
    """A short description of the status of the workload."""


class WorkloadStatus(sgqlc.types.Type):
    """Detailed information about the status of a workload."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "status_source", "status_value", "summary")
    description = sgqlc.types.Field(String, graphql_name="description")
    """A description that provides additional details about the status of
    the workload.
    """

    status_source = sgqlc.types.Field(WorkloadStatusSource, graphql_name="statusSource")
    """Indicates where the status value derives from."""

    status_value = sgqlc.types.Field(WorkloadStatusValue, graphql_name="statusValue")
    """The status of the workload."""

    summary = sgqlc.types.Field(String, graphql_name="summary")
    """A short description of the status of the workload."""


class WorkloadStatusConfig(sgqlc.types.Type):
    """The configuration that defines how the status of the workload is
    calculated.
    """

    __schema__ = nerdgraph
    __field_names__ = ("automatic", "static")
    automatic = sgqlc.types.Field(WorkloadAutomaticStatus, graphql_name="automatic")
    """An automatic status configuration."""

    static = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WorkloadStaticStatus)),
        graphql_name="static",
    )
    """A list of static status configurations."""


class WorkloadStatusResult(sgqlc.types.Interface):
    """The details of a status that was involved in the calculation of
    the workload status.
    """

    __schema__ = nerdgraph
    __field_names__ = ("source", "value")
    source = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusSource), graphql_name="source"
    )
    """Indicates where the status value derives from."""

    value = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusValue), graphql_name="value"
    )
    """The value of a status."""


class WorkloadValidAccounts(sgqlc.types.Type):
    """All the accounts that user has access to, from the same
    organization.
    """

    __schema__ = nerdgraph
    __field_names__ = ("accounts",)
    accounts = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AccountReference)),
        graphql_name="accounts",
    )
    """List of accounts from the same organization."""


class WorkloadWorkloadStatus(sgqlc.types.Type):
    """Status of the workload."""

    __schema__ = nerdgraph
    __field_names__ = ("description", "source", "status_details", "summary", "value")
    description = sgqlc.types.Field(String, graphql_name="description")
    """A description that provides additional details about the status of
    the workload.
    """

    source = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusSource), graphql_name="source"
    )
    """Indicates where the status value derives from."""

    status_details = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WorkloadStatusResult)),
        graphql_name="statusDetails",
    )
    """The details of the statuses that were involved in the calculation
    of the workload status.
    """

    summary = sgqlc.types.Field(String, graphql_name="summary")
    """A short description of the status of the workload."""

    value = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusValue), graphql_name="value"
    )
    """The status of the workload."""


class AiIssuesAnomalyIncident(sgqlc.types.Type, AiIssuesIIncident):
    """Anomaly incident"""

    __schema__ = nerdgraph
    __field_names__ = ("anomaly_id",)
    anomaly_id = sgqlc.types.Field(String, graphql_name="anomalyId")
    """The anomaly id"""


class AiIssuesNewRelicIncident(sgqlc.types.Type, AiIssuesIIncident):
    """Newrelic incident"""

    __schema__ = nerdgraph
    __field_names__ = ("condition_family_id", "policy_ids")
    condition_family_id = sgqlc.types.Field(String, graphql_name="conditionFamilyId")
    """The condition id"""

    policy_ids = sgqlc.types.Field(String, graphql_name="policyIds")
    """The policy id"""


class AiIssuesRestIncident(sgqlc.types.Type, AiIssuesIIncident):
    """Rest incident"""

    __schema__ = nerdgraph
    __field_names__ = ("aggregation_tags",)
    aggregation_tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AiIssuesKeyValue)),
        graphql_name="aggregationTags",
    )
    """Aggregation of tags related to this incident"""


class AiWorkflowsCreateResponseError(sgqlc.types.Type, AiWorkflowsResponseError):
    """Create error description"""

    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsCreateErrorType), graphql_name="type"
    )
    """The error type"""


class AiWorkflowsDeleteResponseError(sgqlc.types.Type, AiWorkflowsResponseError):
    """Delete error description"""

    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsDeleteErrorType), graphql_name="type"
    )
    """The error type"""


class AiWorkflowsTestResponseError(sgqlc.types.Type, AiWorkflowsResponseError):
    """Test error description"""

    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsTestErrorType), graphql_name="type"
    )
    """The error type"""


class AiWorkflowsUpdateResponseError(sgqlc.types.Type, AiWorkflowsResponseError):
    """Update error description"""

    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsUpdateErrorType), graphql_name="type"
    )
    """The error type"""


class AlertsCampfireNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    """Campfire notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsCampfireNotificationChannelConfig),
        graphql_name="config",
    )
    """Campfire channel specific configuration."""


class AlertsEmailNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    """Email notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsEmailNotificationChannelConfig),
        graphql_name="config",
    )
    """Email channel specific configuration."""


class AlertsHipChatNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    """HipChat notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsHipChatNotificationChannelConfig),
        graphql_name="config",
    )
    """HipChat channel specific configuration."""


class AlertsNrqlBaselineCondition(sgqlc.types.Type, AlertsNrqlCondition):
    """A baseline NRQL condition is a self-adjusting condition based on
    the past behavior of a monitored NRQL query.
    """

    __schema__ = nerdgraph
    __field_names__ = ("baseline_direction",)
    baseline_direction = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlBaselineDirection),
        graphql_name="baselineDirection",
    )
    """Direction in which the baseline is set on condition."""


class AlertsNrqlOutlierCondition(sgqlc.types.Type, AlertsNrqlCondition):
    """An outlier NRQL condition looks for group behavior and values that
    are outliers from those groups. Similar to a static NRQL
    condition, but requires a FACET clause.
    """

    __schema__ = nerdgraph
    __field_names__ = ("expected_groups", "open_violation_on_group_overlap")
    expected_groups = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="expectedGroups"
    )
    """Number of groups expected in the returned values for the
    condition.
    """

    open_violation_on_group_overlap = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="openViolationOnGroupOverlap"
    )
    """Whether overlapping groups should produce a violation."""


class AlertsNrqlStaticCondition(sgqlc.types.Type, AlertsNrqlCondition):
    """A static NRQL condition is the simplest type of NRQL threshold. It
    allows you to create a condition based on a NRQL query that
    returns a numeric value.
    """

    __schema__ = nerdgraph
    __field_names__ = ("value_function",)
    value_function = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlStaticConditionValueFunction),
        graphql_name="valueFunction",
    )
    """Deprecated - use `signal.slideBy` instead.  Function used to
    aggregate the NRQL query value(s) for comparison to the
    `terms.threshold`. When the result of this aggregate surpasses the
    `terms.threshold`, a violation is opened.
    """


class AlertsOpsGenieNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    """OpsGenie notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsOpsGenieNotificationChannelConfig),
        graphql_name="config",
    )
    """OpsGenie channel specific configuration."""


class AlertsPagerDutyNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    """PagerDuty notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsPagerDutyNotificationChannelConfig),
        graphql_name="config",
    )
    """PagerDuty channel specific configuration."""


class AlertsSlackNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    """Slack notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsSlackNotificationChannelConfig),
        graphql_name="config",
    )
    """Slack channel specific configuration."""


class AlertsUserNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    """User notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsUserNotificationChannelConfig), graphql_name="config"
    )
    """User channel specific configuration."""


class AlertsVictorOpsNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    """VictorOps notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsVictorOpsNotificationChannelConfig),
        graphql_name="config",
    )
    """VictorOps channel specific configuration."""


class AlertsWebhookNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    """Webhook notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsWebhookNotificationChannelConfig),
        graphql_name="config",
    )
    """Webhook channel specific configuration."""


class AlertsXMattersNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    """xMatters notification channel."""

    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsXMattersNotificationChannelConfig),
        graphql_name="config",
    )
    """xMatters channel specific configuration."""


class ApiAccessIngestKey(sgqlc.types.Type, ApiAccessKey):
    """An ingest key."""

    __schema__ = nerdgraph
    __field_names__ = ("account", "account_id", "ingest_type")
    account = sgqlc.types.Field(AccountReference, graphql_name="account")
    """The account this key is in."""

    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The account attached to the ingest key. Agents using this key will
    report to the account the key belongs to.
    """

    ingest_type = sgqlc.types.Field(ApiAccessIngestKeyType, graphql_name="ingestType")
    """The type of ingest key, which dictates what types of agents can
    use it to report.
    """


class ApiAccessIngestKeyError(sgqlc.types.Type, ApiAccessKeyError):
    """An ingest key error. Each error maps to a single key input."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "error_type", "id", "ingest_type")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The account ID of the key."""

    error_type = sgqlc.types.Field(
        ApiAccessIngestKeyErrorType, graphql_name="errorType"
    )
    """The error type of the error."""

    id = sgqlc.types.Field(String, graphql_name="id")
    """The `id` of the key being updated."""

    ingest_type = sgqlc.types.Field(ApiAccessIngestKeyType, graphql_name="ingestType")
    """The ingest type of the key."""


class ApiAccessUserKey(sgqlc.types.Type, ApiAccessKey):
    """A user key."""

    __schema__ = nerdgraph
    __field_names__ = ("account", "account_id", "user", "user_id")
    account = sgqlc.types.Field(AccountReference, graphql_name="account")
    """The account this key is in."""

    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The account ID of the key."""

    user = sgqlc.types.Field(UserReference, graphql_name="user")
    """The user this key belongs to."""

    user_id = sgqlc.types.Field(Int, graphql_name="userId")
    """The user ID of the key."""


class ApiAccessUserKeyError(sgqlc.types.Type, ApiAccessKeyError):
    """A user key error. Each error maps to a single key input."""

    __schema__ = nerdgraph
    __field_names__ = ("account_id", "error_type", "id", "user_id")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")
    """The account ID of the key."""

    error_type = sgqlc.types.Field(ApiAccessUserKeyErrorType, graphql_name="errorType")
    """The error type of the error."""

    id = sgqlc.types.Field(String, graphql_name="id")
    """The `id` of the key being updated."""

    user_id = sgqlc.types.Field(Int, graphql_name="userId")
    """The user ID of the key."""


class ApmApplicationEntity(
    sgqlc.types.Type, AlertableEntity, ApmBrowserApplicationEntity, Entity
):
    """An APM Application entity."""

    __schema__ = nerdgraph
    __field_names__ = (
        "apm_settings",
        "apm_summary",
        "application_id",
        "application_instances",
        "deployments",
        "exception",
        "flamegraph",
        "language",
        "metric_normalization_rule",
        "metric_normalization_rules",
        "running_agent_versions",
        "settings",
    )
    apm_settings = sgqlc.types.Field(
        AgentApplicationSettingsApmBase, graphql_name="apmSettings"
    )
    """Settings that are common across APM applications."""

    apm_summary = sgqlc.types.Field(
        ApmApplicationSummaryData, graphql_name="apmSummary"
    )
    """Summary statistics about the APM App."""

    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")
    """The ID of the APM Application."""

    application_instances = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AgentEnvironmentApplicationInstance)),
        graphql_name="applicationInstances",
        args=sgqlc.types.ArgDict(
            (
                (
                    "end_time",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="endTime", default=None
                    ),
                ),
                ("host", sgqlc.types.Arg(String, graphql_name="host", default=None)),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="startTime", default=None
                    ),
                ),
            )
        ),
    )
    """List of APM application instances.

    Arguments:

    * `end_time` (`EpochMilliseconds`): Time window start time in
      milliseconds since the unix epoch on which the agent reported
      data. Defaults to current time.
    * `host` (`String`): Use this field to filter application
      instances by host name.
    * `start_time` (`EpochMilliseconds`): Time window start time in
      milliseconds since the unix epoch on which the agent reported
      data. Defaults to 5 minutes before the current time.
    """

    deployments = sgqlc.types.Field(
        sgqlc.types.list_of(ApmApplicationDeployment),
        graphql_name="deployments",
        args=sgqlc.types.ArgDict(
            (
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Deployments of the APM Application.

    Arguments:

    * `time_window` (`TimeWindowInput`): Time range to fetch
      deployments for. Defaults to the last day.
    """

    exception = sgqlc.types.Field(
        StackTraceApmException,
        graphql_name="exception",
        args=sgqlc.types.ArgDict(
            (
                (
                    "occurrence_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="occurrenceId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """An Exception that occurred in your Application.

    Arguments:

    * `occurrence_id` (`String!`): A unique exception identifier.
    """

    flamegraph = sgqlc.types.Field(
        JavaFlightRecorderFlamegraph,
        graphql_name="flamegraph",
        args=sgqlc.types.ArgDict(
            (
                (
                    "host_name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="hostName",
                        default=None,
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Retrieves a flamegraph for the specific entity over the time
    period specified.

    Arguments:

    * `host_name` (`String!`): The JVM host to get flamegraph stack
      trace events for
    * `time_window` (`TimeWindowInput`): The start and end of the
      flamegraph events. Defaults to last 30 minutes
    """

    language = sgqlc.types.Field(String, graphql_name="language")
    """The programming language of the APM Application."""

    metric_normalization_rule = sgqlc.types.Field(
        MetricNormalizationRule,
        graphql_name="metricNormalizationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Retrieves a rule.

    Arguments:

    * `id` (`Int!`): Rule Id
    """

    metric_normalization_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(MetricNormalizationRule)),
        graphql_name="metricNormalizationRules",
    )
    """Retrieves the rules for the application."""

    running_agent_versions = sgqlc.types.Field(
        ApmApplicationRunningAgentVersions, graphql_name="runningAgentVersions"
    )
    """The running versions of the language agent in the APM Application."""

    settings = sgqlc.types.Field(ApmApplicationSettings, graphql_name="settings")
    """Configuration settings for the APM Application"""


class ApmApplicationEntityOutline(
    sgqlc.types.Type,
    AlertableEntityOutline,
    ApmBrowserApplicationEntityOutline,
    EntityOutline,
):
    """An APM Application entity outline."""

    __schema__ = nerdgraph
    __field_names__ = (
        "apm_summary",
        "application_id",
        "language",
        "running_agent_versions",
        "settings",
    )
    apm_summary = sgqlc.types.Field(
        ApmApplicationSummaryData, graphql_name="apmSummary"
    )
    """Summary statistics about the APM App."""

    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")
    """The ID of the APM Application."""

    language = sgqlc.types.Field(String, graphql_name="language")
    """The programming language of the APM Application."""

    running_agent_versions = sgqlc.types.Field(
        ApmApplicationRunningAgentVersions, graphql_name="runningAgentVersions"
    )
    """The running versions of the language agent in the APM Application."""

    settings = sgqlc.types.Field(ApmApplicationSettings, graphql_name="settings")
    """Configuration settings for the APM Application"""


class ApmDatabaseInstanceEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """A database instance seen by an APM Application"""

    __schema__ = nerdgraph
    __field_names__ = ("host", "port_or_path", "vendor")
    host = sgqlc.types.Field(String, graphql_name="host")
    """The host the database instance is running on."""

    port_or_path = sgqlc.types.Field(String, graphql_name="portOrPath")
    """The port or path the database instance is running on. ex: `3306` |
    `/tmp/mysql.sock`
    """

    vendor = sgqlc.types.Field(String, graphql_name="vendor")
    """The type of database. ex: `Postgres` | `Redis`"""


class ApmDatabaseInstanceEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    """A database instance seen by an APM Application"""

    __schema__ = nerdgraph
    __field_names__ = ("host", "port_or_path", "vendor")
    host = sgqlc.types.Field(String, graphql_name="host")
    """The host the database instance is running on."""

    port_or_path = sgqlc.types.Field(String, graphql_name="portOrPath")
    """The port or path the database instance is running on. ex: `3306` |
    `/tmp/mysql.sock`
    """

    vendor = sgqlc.types.Field(String, graphql_name="vendor")
    """The type of database. ex: `Postgres` | `Redis`"""


class ApmExternalServiceEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """An external service seen by an APM Application."""

    __schema__ = nerdgraph
    __field_names__ = ("external_summary", "host")
    external_summary = sgqlc.types.Field(
        ApmExternalServiceSummaryData, graphql_name="externalSummary"
    )

    host = sgqlc.types.Field(String, graphql_name="host")
    """The host of the external service."""


class ApmExternalServiceEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    """An external service seen by an APM Application."""

    __schema__ = nerdgraph
    __field_names__ = ("external_summary", "host")
    external_summary = sgqlc.types.Field(
        ApmExternalServiceSummaryData, graphql_name="externalSummary"
    )

    host = sgqlc.types.Field(String, graphql_name="host")
    """The host of the external service."""


class BrowserApplicationEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """A Browser Application entity."""

    __schema__ = nerdgraph
    __field_names__ = (
        "agent_install_type",
        "application_id",
        "browser_settings",
        "browser_summary",
        "exception",
        "metric_normalization_rule",
        "metric_normalization_rules",
        "running_agent_versions",
        "serving_apm_application_id",
        "settings",
    )
    agent_install_type = sgqlc.types.Field(
        BrowserAgentInstallType, graphql_name="agentInstallType"
    )
    """The type of Browser agent installed for this application."""

    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")
    """The ID of the Browser App."""

    browser_settings = sgqlc.types.Field(
        AgentApplicationSettingsBrowserBase, graphql_name="browserSettings"
    )
    """Settings that are common across browser applications."""

    browser_summary = sgqlc.types.Field(
        BrowserApplicationSummaryData, graphql_name="browserSummary"
    )
    """Summary statistics about the Browser App."""

    exception = sgqlc.types.Field(
        StackTraceBrowserException,
        graphql_name="exception",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fingerprint",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="fingerprint",
                        default=None,
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """An Exception that occurred in your Browser Application.

    Arguments:

    * `fingerprint` (`Int!`): A unique exception identifier.
    * `time_window` (`TimeWindowInput`): The time window (60 minutes
      maximum) in which to search for the browser exception. Defaults
      to standard NRQL query window.
    """

    metric_normalization_rule = sgqlc.types.Field(
        MetricNormalizationRule,
        graphql_name="metricNormalizationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Retrieves a rule.

    Arguments:

    * `id` (`Int!`): Rule Id
    """

    metric_normalization_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(MetricNormalizationRule)),
        graphql_name="metricNormalizationRules",
    )
    """Retrieves the rules for the application."""

    running_agent_versions = sgqlc.types.Field(
        BrowserApplicationRunningAgentVersions, graphql_name="runningAgentVersions"
    )
    """The running versions of the agent in the Browser App."""

    serving_apm_application_id = sgqlc.types.Field(
        Int, graphql_name="servingApmApplicationId"
    )
    """The ID of the APM Application that serves this Browser App."""

    settings = sgqlc.types.Field(BrowserApplicationSettings, graphql_name="settings")
    """Configuration settings for the Browser App"""


class BrowserApplicationEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    """A Browser Application entity outline."""

    __schema__ = nerdgraph
    __field_names__ = (
        "agent_install_type",
        "application_id",
        "browser_summary",
        "running_agent_versions",
        "serving_apm_application_id",
        "settings",
    )
    agent_install_type = sgqlc.types.Field(
        BrowserAgentInstallType, graphql_name="agentInstallType"
    )
    """The type of Browser agent installed for this application."""

    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")
    """The ID of the Browser App."""

    browser_summary = sgqlc.types.Field(
        BrowserApplicationSummaryData, graphql_name="browserSummary"
    )
    """Summary statistics about the Browser App."""

    running_agent_versions = sgqlc.types.Field(
        BrowserApplicationRunningAgentVersions, graphql_name="runningAgentVersions"
    )
    """The running versions of the agent in the Browser App."""

    serving_apm_application_id = sgqlc.types.Field(
        Int, graphql_name="servingApmApplicationId"
    )
    """The ID of the APM Application that serves this Browser App."""

    settings = sgqlc.types.Field(BrowserApplicationSettings, graphql_name="settings")
    """Configuration settings for the Browser App"""


class CloudAlbIntegration(sgqlc.types.Type, CloudIntegration):
    """ALB/NLB Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "load_balancer_prefixes",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    load_balancer_prefixes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="loadBalancerPrefixes"
    )
    """Specify each name or prefix for the LBs that you want to monitor.
    Filter values are case-sensitive.
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudApigatewayIntegration(sgqlc.types.Type, CloudIntegration):
    """API Gateway Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "stage_prefixes",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    stage_prefixes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="stagePrefixes"
    )
    """Specify each name or prefix for the Stages that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudAutoscalingIntegration(sgqlc.types.Type, CloudIntegration):
    """AutoScaling Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsAppsyncIntegration(sgqlc.types.Type, CloudIntegration):
    """AppSync Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsAthenaIntegration(sgqlc.types.Type, CloudIntegration):
    """Athena Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsCognitoIntegration(sgqlc.types.Type, CloudIntegration):
    """Cognito Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsConnectIntegration(sgqlc.types.Type, CloudIntegration):
    """Connect Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsDirectconnectIntegration(sgqlc.types.Type, CloudIntegration):
    """Direct Connect Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsDocdbIntegration(sgqlc.types.Type, CloudIntegration):
    """DocumentDB Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsFsxIntegration(sgqlc.types.Type, CloudIntegration):
    """FSx Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsGlueIntegration(sgqlc.types.Type, CloudIntegration):
    """Glue Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsGovCloudProvider(sgqlc.types.Type, CloudProvider):
    """The Amazon Web Services cloud provider (GovCloud)"""

    __schema__ = nerdgraph
    __field_names__ = ("aws_account_id",)
    aws_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="awsAccountId"
    )
    """The AWS Account ID"""


class CloudAwsKinesisanalyticsIntegration(sgqlc.types.Type, CloudIntegration):
    """Kinesis Data Analytics Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsMediaconvertIntegration(sgqlc.types.Type, CloudIntegration):
    """Elemental MediaConvert Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsMediapackagevodIntegration(sgqlc.types.Type, CloudIntegration):
    """MediaPackage VOD Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsMetadataIntegration(sgqlc.types.Type, CloudIntegration):
    """Fetch Metadata for AWS integrations Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsMqIntegration(sgqlc.types.Type, CloudIntegration):
    """MQ Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsMskIntegration(sgqlc.types.Type, CloudIntegration):
    """Managed Kafka Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsNeptuneIntegration(sgqlc.types.Type, CloudIntegration):
    """Neptune Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsProvider(sgqlc.types.Type, CloudProvider):
    """The Amazon Web Services cloud provider"""

    __schema__ = nerdgraph
    __field_names__ = ("role_account_id", "role_external_id")
    role_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="roleAccountId"
    )
    """The New Relic AWS Account ID that will use the Role."""

    role_external_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="roleExternalId"
    )
    """The external ID required to assume the Role by the New Relic
    Account.
    """


class CloudAwsQldbIntegration(sgqlc.types.Type, CloudIntegration):
    """QLDB Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsRoute53resolverIntegration(sgqlc.types.Type, CloudIntegration):
    """Route53 Resolver Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsStatesIntegration(sgqlc.types.Type, CloudIntegration):
    """Step Functions Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsTagsGlobalIntegration(sgqlc.types.Type, CloudIntegration):
    """Fetch tags for all integrations Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsTransitgatewayIntegration(sgqlc.types.Type, CloudIntegration):
    """Transit Gateway Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsWafIntegration(sgqlc.types.Type, CloudIntegration):
    """WAF Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsWafv2Integration(sgqlc.types.Type, CloudIntegration):
    """WAFV2 Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAwsXrayIntegration(sgqlc.types.Type, CloudIntegration):
    """X-Ray Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudAzureApimanagementIntegration(sgqlc.types.Type, CloudIntegration):
    """Api Management Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureAppgatewayIntegration(sgqlc.types.Type, CloudIntegration):
    """App Gateway Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureAppserviceIntegration(sgqlc.types.Type, CloudIntegration):
    """App Service Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureContainersIntegration(sgqlc.types.Type, CloudIntegration):
    """Containers Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureCosmosdbIntegration(sgqlc.types.Type, CloudIntegration):
    """Cosmos DB Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureCostmanagementIntegration(sgqlc.types.Type, CloudIntegration):
    """Cost Management Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_keys",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_keys = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="tagKeys")
    """Specify if additional cost data per tag should be collected. This
    field is case sensitive.
    """


class CloudAzureDatafactoryIntegration(sgqlc.types.Type, CloudIntegration):
    """Data Factory Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureEventhubIntegration(sgqlc.types.Type, CloudIntegration):
    """Event Hub Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureExpressrouteIntegration(sgqlc.types.Type, CloudIntegration):
    """Express Route Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureFirewallsIntegration(sgqlc.types.Type, CloudIntegration):
    """Firewalls Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureFrontdoorIntegration(sgqlc.types.Type, CloudIntegration):
    """Front Door Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureFunctionsIntegration(sgqlc.types.Type, CloudIntegration):
    """Functions Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureKeyvaultIntegration(sgqlc.types.Type, CloudIntegration):
    """Key Vault Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureLoadbalancerIntegration(sgqlc.types.Type, CloudIntegration):
    """Load Balancer Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureLogicappsIntegration(sgqlc.types.Type, CloudIntegration):
    """Logic Apps Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureMachinelearningIntegration(sgqlc.types.Type, CloudIntegration):
    """Machine Learning Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureMariadbIntegration(sgqlc.types.Type, CloudIntegration):
    """Database for MariaDB Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureMysqlIntegration(sgqlc.types.Type, CloudIntegration):
    """Database for MySQL Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzurePostgresqlIntegration(sgqlc.types.Type, CloudIntegration):
    """Database for PostgreSQL Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzurePowerbidedicatedIntegration(sgqlc.types.Type, CloudIntegration):
    """Power BI Dedicated Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureRediscacheIntegration(sgqlc.types.Type, CloudIntegration):
    """Redis Cache Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureServicebusIntegration(sgqlc.types.Type, CloudIntegration):
    """Service Bus Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureServicefabricIntegration(sgqlc.types.Type, CloudIntegration):
    """Service Fabric Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureSqlIntegration(sgqlc.types.Type, CloudIntegration):
    """SQL Database Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureSqlmanagedIntegration(sgqlc.types.Type, CloudIntegration):
    """SQL Managed Instances Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureStorageIntegration(sgqlc.types.Type, CloudIntegration):
    """Storage Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureVirtualmachineIntegration(sgqlc.types.Type, CloudIntegration):
    """Virtual machine scale sets Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureVirtualnetworksIntegration(sgqlc.types.Type, CloudIntegration):
    """Virtual Network Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureVmsIntegration(sgqlc.types.Type, CloudIntegration):
    """Virtual Machines Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudAzureVpngatewaysIntegration(sgqlc.types.Type, CloudIntegration):
    """VPN Gateways Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )
    """Specify each Resource group associated with the resources that you
    want to monitor. Filter values are case-sensitive.
    """


class CloudBaseIntegration(sgqlc.types.Type, CloudIntegration):
    """Base Integration Object"""

    __schema__ = nerdgraph
    __field_names__ = ()


class CloudBaseProvider(sgqlc.types.Type, CloudProvider):
    """Base Provider Object"""

    __schema__ = nerdgraph
    __field_names__ = ()


class CloudBillingIntegration(sgqlc.types.Type, CloudIntegration):
    """Billing Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudCloudfrontIntegration(sgqlc.types.Type, CloudIntegration):
    """CloudFront Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_lambdas_at_edge",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    fetch_lambdas_at_edge = sgqlc.types.Field(
        Boolean, graphql_name="fetchLambdasAtEdge"
    )
    """Specify if Lambdas@Edge should be monitored. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudCloudtrailIntegration(sgqlc.types.Type, CloudIntegration):
    """CloudTrail Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudDynamodbIntegration(sgqlc.types.Type, CloudIntegration):
    """DynamoDB Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudEbsIntegration(sgqlc.types.Type, CloudIntegration):
    """EBS Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudEc2Integration(sgqlc.types.Type, CloudIntegration):
    """EC2 Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_ip_addresses",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_ip_addresses = sgqlc.types.Field(Boolean, graphql_name="fetchIpAddresses")
    """Specify if IP addresses of ec2 instance should be collected"""

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudEcsIntegration(sgqlc.types.Type, CloudIntegration):
    """ECS Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudEfsIntegration(sgqlc.types.Type, CloudIntegration):
    """EFS Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudElasticacheIntegration(sgqlc.types.Type, CloudIntegration):
    """ElastiCache Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudElasticbeanstalkIntegration(sgqlc.types.Type, CloudIntegration):
    """Elastic Beanstalk Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudElasticsearchIntegration(sgqlc.types.Type, CloudIntegration):
    """Elasticsearch Service Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_nodes",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_nodes = sgqlc.types.Field(Boolean, graphql_name="fetchNodes")
    """Specify if metrics should be collected for nodes. Turning it on
    will increase the number of API calls made to CloudWatch.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudElbIntegration(sgqlc.types.Type, CloudIntegration):
    """ELB (Classic) Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudEmrIntegration(sgqlc.types.Type, CloudIntegration):
    """EMR Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags and the extended inventory should be collected.
    May affect total data collection time and contribute to the Cloud
    provider API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudGcpAppengineIntegration(sgqlc.types.Type, CloudIntegration):
    """App Engine Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpBigqueryIntegration(sgqlc.types.Type, CloudIntegration):
    """BigQuery Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if labels and the extended inventory should be collected.
    May affect total data collection time and contribute to the Cloud
    provider API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpBigtableIntegration(sgqlc.types.Type, CloudIntegration):
    """Bigtable Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpComposerIntegration(sgqlc.types.Type, CloudIntegration):
    """Composer Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpDataflowIntegration(sgqlc.types.Type, CloudIntegration):
    """Dataflow Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpDataprocIntegration(sgqlc.types.Type, CloudIntegration):
    """Dataproc Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpDatastoreIntegration(sgqlc.types.Type, CloudIntegration):
    """Datastore Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpFirebasedatabaseIntegration(sgqlc.types.Type, CloudIntegration):
    """Firebase Database Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpFirebasehostingIntegration(sgqlc.types.Type, CloudIntegration):
    """Firebase Hosting Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpFirebasestorageIntegration(sgqlc.types.Type, CloudIntegration):
    """Firebase Storage Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpFirestoreIntegration(sgqlc.types.Type, CloudIntegration):
    """Firestore Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpFunctionsIntegration(sgqlc.types.Type, CloudIntegration):
    """Cloud Functions Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpInterconnectIntegration(sgqlc.types.Type, CloudIntegration):
    """Interconnect Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpKubernetesIntegration(sgqlc.types.Type, CloudIntegration):
    """Kubernetes Engine Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpLoadbalancingIntegration(sgqlc.types.Type, CloudIntegration):
    """Cloud Load Balancing Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpMemcacheIntegration(sgqlc.types.Type, CloudIntegration):
    """Memcache Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpProvider(sgqlc.types.Type, CloudProvider):
    """The Google Cloud Platform cloud provider"""

    __schema__ = nerdgraph
    __field_names__ = ("service_account_id",)
    service_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="serviceAccountId"
    )
    """The service account identifier used to link the GCP project to
    NewRelic.
    """


class CloudGcpPubsubIntegration(sgqlc.types.Type, CloudIntegration):
    """Cloud Pub/Sub Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if labels and the extended inventory should be collected.
    May affect total data collection time and contribute to the Cloud
    provider API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpRedisIntegration(sgqlc.types.Type, CloudIntegration):
    """Redis Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpRouterIntegration(sgqlc.types.Type, CloudIntegration):
    """Router Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpRunIntegration(sgqlc.types.Type, CloudIntegration):
    """Run Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpSpannerIntegration(sgqlc.types.Type, CloudIntegration):
    """Cloud Spanner Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if labels and the extended inventory should be collected.
    May affect total data collection time and contribute to the Cloud
    provider API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpSqlIntegration(sgqlc.types.Type, CloudIntegration):
    """Cloud SQL Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpStorageIntegration(sgqlc.types.Type, CloudIntegration):
    """Cloud Storage Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if labels and the extended inventory should be collected.
    May affect total data collection time and contribute to the Cloud
    provider API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpVmsIntegration(sgqlc.types.Type, CloudIntegration):
    """Compute Engine Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudGcpVpcaccessIntegration(sgqlc.types.Type, CloudIntegration):
    """VPC Access Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudHealthIntegration(sgqlc.types.Type, CloudIntegration):
    """Health Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudIamIntegration(sgqlc.types.Type, CloudIntegration):
    """IAM Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudIotIntegration(sgqlc.types.Type, CloudIntegration):
    """IoT Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudKinesisFirehoseIntegration(sgqlc.types.Type, CloudIntegration):
    """Kinesis Firehose Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudKinesisIntegration(sgqlc.types.Type, CloudIntegration):
    """Kinesis Streams Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_shards",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_shards = sgqlc.types.Field(Boolean, graphql_name="fetchShards")
    """Specify if Shards should be monitored. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudLambdaIntegration(sgqlc.types.Type, CloudIntegration):
    """Lambda Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudRdsIntegration(sgqlc.types.Type, CloudIntegration):
    """RDS Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudRedshiftIntegration(sgqlc.types.Type, CloudIntegration):
    """Redshift Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudRoute53Integration(sgqlc.types.Type, CloudIntegration):
    """Route 53 Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_extended_inventory",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudS3Integration(sgqlc.types.Type, CloudIntegration):
    """S3 Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudSesIntegration(sgqlc.types.Type, CloudIntegration):
    """SES Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudSnsIntegration(sgqlc.types.Type, CloudIntegration):
    """SNS Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudSqsIntegration(sgqlc.types.Type, CloudIntegration):
    """SQS Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "queue_prefixes",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )
    """Determine if extra inventory data be collected or not. May affect
    total data collection time and contribute to the Cloud provider
    API rate limit.
    """

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")
    """Specify if tags should be collected. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    queue_prefixes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="queuePrefixes"
    )
    """Specify each name or prefix for the Queues that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class CloudTrustedadvisorIntegration(sgqlc.types.Type, CloudIntegration):
    """Trusted Advisor Integration"""

    __schema__ = nerdgraph
    __field_names__ = ("inventory_polling_interval", "metrics_polling_interval")
    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""


class CloudVpcIntegration(sgqlc.types.Type, CloudIntegration):
    """VPC Integration"""

    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_nat_gateway",
        "fetch_vpn",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )
    """Specify each AWS region that includes the resources that you want
    to monitor.
    """

    fetch_nat_gateway = sgqlc.types.Field(Boolean, graphql_name="fetchNatGateway")
    """Specify if NAT gateway should be monitored. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    fetch_vpn = sgqlc.types.Field(Boolean, graphql_name="fetchVpn")
    """Specify if VPN should be monitored. May affect total data
    collection time and contribute to the Cloud provider API rate
    limit.
    """

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )
    """[DEPRECATED] Multiple polling interval is no longer supported, use
    only metrics_polling_interval
    """

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )
    """The data polling interval in seconds."""

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")
    """Specify a Tag key associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")
    """Specify a Tag value associated with the resources that you want to
    monitor. Filter values are case-sensitive.
    """


class DashboardEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """A Dashboard entity."""

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "dashboard_parent_guid",
        "description",
        "owner",
        "pages",
        "permissions",
        "updated_at",
    )
    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")
    """Dashboard creation timestamp."""

    dashboard_parent_guid = sgqlc.types.Field(
        EntityGuid, graphql_name="dashboardParentGuid"
    )
    """The parent entity `guid` of the dashboard."""

    description = sgqlc.types.Field(String, graphql_name="description")
    """Dashboard description."""

    owner = sgqlc.types.Field(DashboardOwnerInfo, graphql_name="owner")
    """Dashboard owner."""

    pages = sgqlc.types.Field(sgqlc.types.list_of(DashboardPage), graphql_name="pages")
    """A nested block of all pages belonging to the dashboard."""

    permissions = sgqlc.types.Field(DashboardPermissions, graphql_name="permissions")
    """Dashboard permissions configuration."""

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")
    """Dashboard update timestamp."""


class DashboardEntityOutline(sgqlc.types.Type, AlertableEntityOutline, EntityOutline):
    """A Dashboard entity outline."""

    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "dashboard_parent_guid",
        "owner",
        "permissions",
        "updated_at",
    )
    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")
    """The date and time the dashboard was created"""

    dashboard_parent_guid = sgqlc.types.Field(
        EntityGuid, graphql_name="dashboardParentGuid"
    )
    """The parent entity `guid` of the dashboard."""

    owner = sgqlc.types.Field(DashboardEntityOwnerInfo, graphql_name="owner")
    """The owner information of the dashboard."""

    permissions = sgqlc.types.Field(
        DashboardEntityPermissions, graphql_name="permissions"
    )
    """The permissions of the dashboard."""

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")
    """The date and time the dashboard was updated"""


class EdgeAgentEndpointDetail(sgqlc.types.Type, EdgeEndpointDetail):
    """All the details necessary to configure an agent to connect to an
    endoint.
    """

    __schema__ = nerdgraph
    __field_names__ = ()


class EdgeHttpsEndpointDetail(sgqlc.types.Type, EdgeEndpointDetail):
    """All the details necessary to configure an integration to connect
    to the Infinite Tracing Trace API (HTTP 1.1) endpoint.
    """

    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """Full URL used to send data to the endpoint. For instance, if you
    were using the [Java Telemetry
    SDK](https://docs.newrelic.com/docs/data-ingest-apis/get-data-new-
    relic/new-relic-sdks/telemetry-sdks-send-custom-telemetry-data-
    new-relic) this is the data you would use to create a `URI` to
    pass to the [`uriOverride`](https://github.com/newrelic/newrelic-
    telemetry-sdk-java/blob/85e526cf6fbba0640f20d2d7a3ab0dab89f958b3/t
    elemetry_core/src/main/java/com/newrelic/telemetry/AbstractSenderB
    uilder.java#L37-L48) method.
    """


class EntityRelationshipDetectedEdge(sgqlc.types.Type, EntityRelationshipEdge):
    """An entity relationship automatically detected by NewRelic."""

    __schema__ = nerdgraph
    __field_names__ = ()


class EntityRelationshipUserDefinedEdge(sgqlc.types.Type, EntityRelationshipEdge):
    """An entity user-defined relationship."""

    __schema__ = nerdgraph
    __field_names__ = ("created_by_user",)
    created_by_user = sgqlc.types.Field(UserReference, graphql_name="createdByUser")
    """The user that created the relationship."""


class ErrorsInboxAssignErrorGroupError(sgqlc.types.Type, ErrorsInboxResponseError):
    """Assign error group error"""

    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(ErrorsInboxAssignErrorGroupErrorType), graphql_name="type"
    )
    """The error type"""


class ErrorsInboxJiraIssue(sgqlc.types.Type, ErrorsInboxResource):
    """An single issue in JIRA"""

    __schema__ = nerdgraph
    __field_names__ = ("issue_id",)
    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="issueId")
    """Issue Id in JIRA"""


class ErrorsInboxUpdateErrorGroupStateError(sgqlc.types.Type, ErrorsInboxResponseError):
    """Configure notification policy error"""

    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(ErrorsInboxUpdateErrorGroupStateErrorType),
        graphql_name="type",
    )
    """The error type"""


class ExternalEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """An External entity."""

    __schema__ = nerdgraph
    __field_names__ = ()


class ExternalEntityOutline(sgqlc.types.Type, AlertableEntityOutline, EntityOutline):
    """An External entity outline."""

    __schema__ = nerdgraph
    __field_names__ = ()


class GenericEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """A generic entity."""

    __schema__ = nerdgraph
    __field_names__ = ()


class GenericEntityOutline(sgqlc.types.Type, AlertableEntityOutline, EntityOutline):
    """A generic entity outline."""

    __schema__ = nerdgraph
    __field_names__ = ()


class GenericInfrastructureEntity(
    sgqlc.types.Type, AlertableEntity, Entity, InfrastructureIntegrationEntity
):
    """An Infrastructure entity."""

    __schema__ = nerdgraph
    __field_names__ = ()


class GenericInfrastructureEntityOutline(
    sgqlc.types.Type,
    AlertableEntityOutline,
    EntityOutline,
    InfrastructureIntegrationEntityOutline,
):
    """An Infrastructure entity outline."""

    __schema__ = nerdgraph
    __field_names__ = ()


class InfrastructureAwsLambdaFunctionEntity(
    sgqlc.types.Type, AlertableEntity, Entity, InfrastructureIntegrationEntity
):
    """An AWS Lambda Function entity."""

    __schema__ = nerdgraph
    __field_names__ = ("runtime",)
    runtime = sgqlc.types.Field(String, graphql_name="runtime")


class InfrastructureAwsLambdaFunctionEntityOutline(
    sgqlc.types.Type,
    AlertableEntityOutline,
    EntityOutline,
    InfrastructureIntegrationEntityOutline,
):
    """An AWS Lambda Function entity outline."""

    __schema__ = nerdgraph
    __field_names__ = ("runtime",)
    runtime = sgqlc.types.Field(String, graphql_name="runtime")


class InfrastructureHostEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """An Infrastructure Host entity."""

    __schema__ = nerdgraph
    __field_names__ = ("host_summary",)
    host_summary = sgqlc.types.Field(
        InfrastructureHostSummaryData, graphql_name="hostSummary"
    )


class InfrastructureHostEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    """An Infrastructure Host entity outline."""

    __schema__ = nerdgraph
    __field_names__ = ("host_summary",)
    host_summary = sgqlc.types.Field(
        InfrastructureHostSummaryData, graphql_name="hostSummary"
    )


class KeyTransactionEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """A Key Transaction entity."""

    __schema__ = nerdgraph
    __field_names__ = ()


class KeyTransactionEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    """A Key Transaction entity outline."""

    __schema__ = nerdgraph
    __field_names__ = ()


class MobileApplicationEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """A Mobile Application entity."""

    __schema__ = nerdgraph
    __field_names__ = (
        "application_id",
        "crash",
        "exception",
        "metric_normalization_rule",
        "metric_normalization_rules",
        "mobile_summary",
    )
    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")
    """The ID of the Mobile App."""

    crash = sgqlc.types.Field(
        StackTraceMobileCrash,
        graphql_name="crash",
        args=sgqlc.types.ArgDict(
            (
                (
                    "occurrence_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="occurrenceId",
                        default=None,
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """A Crash that occurred in your Mobile Application.

    Arguments:

    * `occurrence_id` (`String!`): A unique identifer for an
      occurrence of a Mobile Crash.
    * `time_window` (`TimeWindowInput`): The time window (60 minutes
      maximum) in which to search for the mobile crash. Defaults to
      standard NRQL query window.
    """

    exception = sgqlc.types.Field(
        StackTraceMobileException,
        graphql_name="exception",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fingerprint",
                    sgqlc.types.Arg(String, graphql_name="fingerprint", default=None),
                ),
                (
                    "occurrence_id",
                    sgqlc.types.Arg(String, graphql_name="occurrenceId", default=None),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """A Handled Exception that occurred in your Mobile Application.

    Arguments:

    * `fingerprint` (`String`): The fingerprint of a Mobile Handled
      Exception. The first handled exception matching the fingerprint
      will be returned.
    * `occurrence_id` (`String`): A unique identifier for an
      occurrence of a Mobile Handled Exception. This is the
      'handledExceptionUuid' attribute on the MobileHandledException
      events.
    * `time_window` (`TimeWindowInput`): The time window (60 minutes
      maximum) in which to search for the handled exception. Defaults
      to standard NRQL query window.
    """

    metric_normalization_rule = sgqlc.types.Field(
        MetricNormalizationRule,
        graphql_name="metricNormalizationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Retrieves a rule.

    Arguments:

    * `id` (`Int!`): Rule Id
    """

    metric_normalization_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(MetricNormalizationRule)),
        graphql_name="metricNormalizationRules",
    )
    """Retrieves the rules for the application."""

    mobile_summary = sgqlc.types.Field(
        MobileAppSummaryData, graphql_name="mobileSummary"
    )
    """Summary statistics about the Mobile App."""


class MobileApplicationEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    """A Mobile Application entity outline."""

    __schema__ = nerdgraph
    __field_names__ = ("application_id", "mobile_summary")
    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")
    """The ID of the Mobile App."""

    mobile_summary = sgqlc.types.Field(
        MobileAppSummaryData, graphql_name="mobileSummary"
    )
    """Summary statistics about the Mobile App."""


class Nr1CatalogAllSupportedEntityTypes(
    sgqlc.types.Type, Nr1CatalogSupportedEntityTypes
):
    """Specifies the supported entity types to be all entity types"""

    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogInstallPlan(sgqlc.types.Type, Nr1CatalogInstaller):
    """An installer that uses install plan steps"""

    __schema__ = nerdgraph
    __field_names__ = ("steps",)
    steps = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogInstallPlanStep))
        ),
        graphql_name="steps",
    )
    """The list of install plan steps necessary to execute the
    installation of the quickstart
    """


class Nr1CatalogLauncher(sgqlc.types.Type, Nr1CatalogNerdpackItem):
    """Information about a launcher in a Nerdpack"""

    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogLauncherMetadata(sgqlc.types.Type, Nr1CatalogNerdpackItemMetadata):
    """Metadata information for a launcher"""

    __schema__ = nerdgraph
    __field_names__ = ("icon",)
    icon = sgqlc.types.Field(Nr1CatalogIcon, graphql_name="icon")
    """The corresponding icon for the launcher."""


class Nr1CatalogLinkInstallPlanDirective(
    sgqlc.types.Type, Nr1CatalogInstallPlanDirective
):
    """Information about a link install plan directive"""

    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """The URL of the external link used to guide the user through
    installation
    """


class Nr1CatalogNerdlet(sgqlc.types.Type, Nr1CatalogNerdpackItem):
    """Information about a Nerdlet in a Nerdpack"""

    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogNerdletInstallPlanDirective(
    sgqlc.types.Type, Nr1CatalogInstallPlanDirective
):
    """Information about a targeted install plan directive"""

    __schema__ = nerdgraph
    __field_names__ = ("nerdlet_id", "nerdlet_state")
    nerdlet_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="nerdletId")
    """The nerdlet ID used to guide the user through installation"""

    nerdlet_state = sgqlc.types.Field(
        Nr1CatalogRawNerdletState, graphql_name="nerdletState"
    )
    """The nerdlet state used to intialize the nerdlet"""


class Nr1CatalogNerdletMetadata(sgqlc.types.Type, Nr1CatalogNerdpackItemMetadata):
    """Metadata information for a Nerdlet"""

    __schema__ = nerdgraph
    __field_names__ = ("supported_entity_types",)
    supported_entity_types = sgqlc.types.Field(
        Nr1CatalogSupportedEntityTypes, graphql_name="supportedEntityTypes"
    )
    """The supported entity types by the Nerdlet."""


class Nr1CatalogNoSupportedEntityTypes(
    sgqlc.types.Type, Nr1CatalogSupportedEntityTypes
):
    """Specifies the supported entity types to be no entity types"""

    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogQuickstartAlert(sgqlc.types.Type, Nr1CatalogQuickstartComponent):
    """Information about an alert in a quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the alert"""


class Nr1CatalogQuickstartAlertCondition(
    sgqlc.types.Type, Nr1CatalogQuickstartComponent
):
    """Information about an alert condition in a quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the alert condition"""


class Nr1CatalogQuickstartAlertConditionMetadata(
    sgqlc.types.Type, Nr1CatalogQuickstartComponentMetadata
):
    """Metadata associated with the alert condition in a quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogQuickstartAlertConditionType),
        graphql_name="type",
    )
    """Determines the type of alert condition that will be created"""


class Nr1CatalogQuickstartAlertMetadata(
    sgqlc.types.Type, Nr1CatalogQuickstartComponentMetadata
):
    """Metadata associated with the alert in a quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogQuickstartDashboard(sgqlc.types.Type, Nr1CatalogQuickstartComponent):
    """Information about a dashboard in a quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")
    """The unique identifier for the dashboard"""


class Nr1CatalogQuickstartDashboardMetadata(
    sgqlc.types.Type, Nr1CatalogQuickstartComponentMetadata
):
    """Metadata associated with the dashboard in a quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ("previews",)
    previews = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogPreview))
        ),
        graphql_name="previews",
    )
    """A list of previews for the dashboard, such as screenshots."""


class Nr1CatalogQuickstartDocumentation(
    sgqlc.types.Type, Nr1CatalogQuickstartComponent
):
    """Information about a documentation component in a quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogQuickstartDocumentationMetadata(
    sgqlc.types.Type, Nr1CatalogQuickstartComponentMetadata
):
    """Metadata associated with the documentation component in a
    quickstart
    """

    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")
    """The documentation URL"""


class Nr1CatalogQuickstartInstallPlan(sgqlc.types.Type, Nr1CatalogQuickstartComponent):
    """Information about an install plan component in a quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogQuickstartInstallPlanMetadata(
    sgqlc.types.Type, Nr1CatalogQuickstartComponentMetadata
):
    """Metadata associated with the install plan in a quickstart"""

    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogScreenshot(sgqlc.types.Type, Nr1CatalogPreview):
    """Information about the publicly accessible screenshot"""

    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogSpecificSupportedEntityTypes(
    sgqlc.types.Type, Nr1CatalogSupportedEntityTypes
):
    """Specifies the supported entity types to be a specific subset of
    entity types
    """

    __schema__ = nerdgraph
    __field_names__ = ("entity_types",)
    entity_types = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(DomainType))),
        graphql_name="entityTypes",
    )
    """The list of support entity types."""


class Nr1CatalogTargetedInstallPlanDirective(
    sgqlc.types.Type, Nr1CatalogInstallPlanDirective
):
    """Information about a targeted install plan directive"""

    __schema__ = nerdgraph
    __field_names__ = ("recipe_name",)
    recipe_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="recipeName"
    )
    """The name of the recipe used for the installation"""


class Nr1CatalogVisualization(sgqlc.types.Type, Nr1CatalogNerdpackItem):
    """Information about a visualization in a Nerdpack"""

    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogVisualizationMetadata(sgqlc.types.Type, Nr1CatalogNerdpackItemMetadata):
    """Metadata information for a visualization"""

    __schema__ = nerdgraph
    __field_names__ = ()


class SecureCredentialEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """A secure credential entity."""

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "secure_credential_id",
        "secure_credential_summary",
        "updated_at",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the entity."""

    secure_credential_id = sgqlc.types.Field(ID, graphql_name="secureCredentialId")
    """The domain-specific identifier for the entity."""

    secure_credential_summary = sgqlc.types.Field(
        SecureCredentialSummaryData, graphql_name="secureCredentialSummary"
    )
    """Summary statistics for the Synthetic Monitor Secure Credential."""

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")
    """The time at which the entity was last updated."""


class SecureCredentialEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    """A secure credential entity outline."""

    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "secure_credential_id",
        "secure_credential_summary",
        "updated_at",
    )
    description = sgqlc.types.Field(String, graphql_name="description")
    """The description of the entity."""

    secure_credential_id = sgqlc.types.Field(ID, graphql_name="secureCredentialId")
    """The domain-specific identifier for the entity."""

    secure_credential_summary = sgqlc.types.Field(
        SecureCredentialSummaryData, graphql_name="secureCredentialSummary"
    )
    """Summary statistics for the Synthetic Monitor Secure Credential."""

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")
    """The time at which the entity was last updated."""


class SuggestedAnomalyBasedNrqlQuery(sgqlc.types.Type, SuggestedNrqlQuery):
    """A query suggestion based on analysis of events within a specific
    anomalous time range vs. nearby events outside of that time range.
    """

    __schema__ = nerdgraph
    __field_names__ = ("anomaly",)
    anomaly = sgqlc.types.Field(
        sgqlc.types.non_null(SuggestedNrqlQueryAnomaly), graphql_name="anomaly"
    )
    """Information about the anomaly upon which this suggestion is based"""


class SuggestedHistoryBasedNrqlQuery(sgqlc.types.Type, SuggestedNrqlQuery):
    """A query suggestion based on historical query patterns."""

    __schema__ = nerdgraph
    __field_names__ = ()


class SyntheticMonitorEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """A Synthetic Monitor entity."""

    __schema__ = nerdgraph
    __field_names__ = (
        "assets",
        "monitor_id",
        "monitor_summary",
        "monitor_type",
        "monitored_url",
        "period",
    )
    assets = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsSyntheticMonitorAsset),
        graphql_name="assets",
        args=sgqlc.types.ArgDict(
            (
                (
                    "check_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="checkId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Assets produced during the execution of the check, such as
    screenshots

    Arguments:

    * `check_id` (`String!`): The unique identifer of the monitor
      check
    """

    monitor_id = sgqlc.types.Field(ID, graphql_name="monitorId")
    """The Synthetic Monitor ID"""

    monitor_summary = sgqlc.types.Field(
        SyntheticMonitorSummaryData, graphql_name="monitorSummary"
    )
    """Summary statistics for the Synthetic Monitor."""

    monitor_type = sgqlc.types.Field(SyntheticMonitorType, graphql_name="monitorType")
    """The Synthetic Monitor type"""

    monitored_url = sgqlc.types.Field(String, graphql_name="monitoredUrl")
    """The URL being monitored by a `SIMPLE` or `BROWSER` monitor type."""

    period = sgqlc.types.Field(Minutes, graphql_name="period")
    """The duration in minutes between Synthetic Monitor runs."""


class SyntheticMonitorEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    """A Synthetic Monitor entity outline."""

    __schema__ = nerdgraph
    __field_names__ = (
        "monitor_id",
        "monitor_summary",
        "monitor_type",
        "monitored_url",
        "period",
    )
    monitor_id = sgqlc.types.Field(ID, graphql_name="monitorId")
    """The Synthetic Monitor ID"""

    monitor_summary = sgqlc.types.Field(
        SyntheticMonitorSummaryData, graphql_name="monitorSummary"
    )
    """Summary statistics for the Synthetic Monitor."""

    monitor_type = sgqlc.types.Field(SyntheticMonitorType, graphql_name="monitorType")
    """The Synthetic Monitor type"""

    monitored_url = sgqlc.types.Field(String, graphql_name="monitoredUrl")
    """The URL being monitored by a `SIMPLE` or `BROWSER` monitor type."""

    period = sgqlc.types.Field(Minutes, graphql_name="period")
    """The duration in minutes between Synthetic Monitor runs."""


class ThirdPartyServiceEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """A third party service entity."""

    __schema__ = nerdgraph
    __field_names__ = ()


class ThirdPartyServiceEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    """A third party service entity outline."""

    __schema__ = nerdgraph
    __field_names__ = ()


class UnavailableEntity(sgqlc.types.Type, AlertableEntity, Entity):
    """An entity that is unavailable."""

    __schema__ = nerdgraph
    __field_names__ = ()


class UnavailableEntityOutline(sgqlc.types.Type, AlertableEntityOutline, EntityOutline):
    """An entity outline that is unavailable."""

    __schema__ = nerdgraph
    __field_names__ = ()


class WhatsNewAnnouncementContent(sgqlc.types.Type, WhatsNewContent):
    """Represents the details about an announcement."""

    __schema__ = nerdgraph
    __field_names__ = (
        "body",
        "doc_url",
        "getting_started_url",
        "is_featured",
        "learn_more_url",
        "requirements",
    )
    body = sgqlc.types.Field(String, graphql_name="body")
    """The body of the news."""

    doc_url = sgqlc.types.Field(String, graphql_name="docUrl")
    """A link to the documentation."""

    getting_started_url = sgqlc.types.Field(String, graphql_name="gettingStartedUrl")
    """A link to a page to get started."""

    is_featured = sgqlc.types.Field(Boolean, graphql_name="isFeatured")
    """A boolean representing whether this content is Featured."""

    learn_more_url = sgqlc.types.Field(String, graphql_name="learnMoreUrl")
    """A link to a page to learn more about the announcement."""

    requirements = sgqlc.types.Field(String, graphql_name="requirements")
    """Information about the requirements."""


class WorkloadEntity(sgqlc.types.Type, AlertableEntity, CollectionEntity, Entity):
    """A workload entity."""

    __schema__ = nerdgraph
    __field_names__ = ("created_at", "created_by_user", "updated_at", "workload_status")
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """When the workload was created."""

    created_by_user = sgqlc.types.Field(UserReference, graphql_name="createdByUser")
    """The user that created the workload."""

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")
    """When the workload was last updated."""

    workload_status = sgqlc.types.Field(WorkloadStatus, graphql_name="workloadStatus")
    """Status of the workload."""


class WorkloadEntityOutline(sgqlc.types.Type, AlertableEntityOutline, EntityOutline):
    """A workload entity outline."""

    __schema__ = nerdgraph
    __field_names__ = ("created_at", "created_by_user", "updated_at", "workload_status")
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")
    """When the workload was created."""

    created_by_user = sgqlc.types.Field(UserReference, graphql_name="createdByUser")
    """The user that created the workload."""

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")
    """When the workload was last updated."""

    workload_status = sgqlc.types.Field(WorkloadStatus, graphql_name="workloadStatus")
    """Status of the workload."""


class WorkloadRollupRuleStatusResult(sgqlc.types.Type, WorkloadStatusResult):
    """A rollup rule that was involved in the calculation of the workload
    status.
    """

    __schema__ = nerdgraph
    __field_names__ = ("rollup_rule_details",)
    rollup_rule_details = sgqlc.types.Field(
        WorkloadRollupRuleDetails, graphql_name="rollupRuleDetails"
    )
    """Represents the details of a rollup rule."""


class WorkloadStaticStatusResult(sgqlc.types.Type, WorkloadStatusResult):
    """A static status that was involved in the calculation of the
    workload status.
    """

    __schema__ = nerdgraph
    __field_names__ = ("description", "summary")
    description = sgqlc.types.Field(String, graphql_name="description")
    """A description that provides additional details about the status of
    the workload.
    """

    summary = sgqlc.types.Field(String, graphql_name="summary")
    """A short description of the status of the workload."""


########################################################################
# Unions
########################################################################
class AiNotificationsAuth(sgqlc.types.Union):
    """Authentication interface"""

    __schema__ = nerdgraph
    __types__ = (
        AiNotificationsBasicAuth,
        AiNotificationsOAuth2Auth,
        AiNotificationsTokenAuth,
    )


class AiNotificationsError(sgqlc.types.Union):
    """Error object"""

    __schema__ = nerdgraph
    __types__ = (
        AiNotificationsConstraintsError,
        AiNotificationsDataValidationError,
        AiNotificationsResponseError,
        AiNotificationsSuggestionError,
    )


class AiWorkflowsConfiguration(sgqlc.types.Union):
    """Enrichment configuration object"""

    __schema__ = nerdgraph
    __types__ = (AiWorkflowsNrqlConfiguration,)


class AlertsNotificationChannelMutation(sgqlc.types.Union):
    """Notification channel types that are available for create and
    update operations.
    """

    __schema__ = nerdgraph
    __types__ = (
        AlertsEmailNotificationChannel,
        AlertsOpsGenieNotificationChannel,
        AlertsPagerDutyNotificationChannel,
        AlertsSlackNotificationChannel,
        AlertsVictorOpsNotificationChannel,
        AlertsWebhookNotificationChannel,
        AlertsXMattersNotificationChannel,
    )


class IncidentIntelligenceEnvironmentCreateEnvironmentResultDetails(sgqlc.types.Union):
    """Result details union"""

    __schema__ = nerdgraph
    __types__ = (
        IncidentIntelligenceEnvironmentEnvironmentAlreadyExists,
        IncidentIntelligenceEnvironmentEnvironmentCreated,
    )


class IncidentIntelligenceEnvironmentCurrentEnvironmentResultReasonDetails(
    sgqlc.types.Union
):
    """Reason details union"""

    __schema__ = nerdgraph
    __types__ = (
        IncidentIntelligenceEnvironmentMultipleEnvironmentsAvailable,
        IncidentIntelligenceEnvironmentUserNotAuthorizedForAccount,
        IncidentIntelligenceEnvironmentUserNotCapableToOperateOnAccount,
    )


class Nr1CatalogDataSourceInstallDirective(sgqlc.types.Union):
    """Installation information for a data source"""

    __schema__ = nerdgraph
    __types__ = (Nr1CatalogLinkInstallDirective, Nr1CatalogNerdletInstallDirective)


class Nr1CatalogSearchResult(sgqlc.types.Union):
    """A result returned when executing a search"""

    __schema__ = nerdgraph
    __types__ = (
        Nr1CatalogAlertPolicyTemplate,
        Nr1CatalogDashboardTemplate,
        Nr1CatalogDataSource,
        Nr1CatalogNerdpack,
        Nr1CatalogQuickstart,
    )


########################################################################
# Schema Entry Points
########################################################################
nerdgraph.query_type = RootQueryType
nerdgraph.mutation_type = RootMutationType
nerdgraph.subscription_type = None
